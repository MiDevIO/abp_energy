package com.misit.abpenergy.Main.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport androidx.core.database.getIntOrNullimport com.misit.abpenergy.Main.Model.UsersModelimport com.misit.abpenergy.SQLite.DbHelperimport es.dmoral.toasty.Toastyclass UsersDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<UsersModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: UsersModel):Long{//        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("$tbItem",null,cv)//        closeAccess()        return hasil!!    }    fun getItem(idUser: String): UsersModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE idUser = ?", arrayOf(idUser))        c?.moveToFirst()        var itemModels = UsersModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    fun cekUser(idUser: String,user_update:String): Int {        val c = sqlDatabase?.rawQuery("SELECT count(*) FROM "+                "$tbItem WHERE idUser = '"+idUser+"' and user_update = '"+user_update+"'",null)        c?.let {            if(it.moveToFirst()){                return it?.getIntOrNull(0) ?: 0            }        }        c?.close()        return 0    }    fun searchItems(cari: String?): ArrayList<UsersModel> {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE namaLengkap like '%"+cari+"%' or namaPerusahaan like '%"+cari+"%' or nik like '%"+cari+"%' or sect like '%"+cari+"%' or dept like '%"+cari+"%'",            null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    fun getAll(): ArrayList<UsersModel> {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): UsersModel {        val tglentry = cursor.getString(cursor.getColumnIndex("tglentry"))        val level = cursor.getString(cursor.getColumnIndex("level"))        val ttd = cursor.getString(cursor.getColumnIndex("ttd"))        val photoProfile = cursor.getString(cursor.getColumnIndex("photoProfile"))        val offlinePhoto = cursor.getString(cursor.getColumnIndex("offlinePhoto"))        val namaLengkap = cursor.getString(cursor.getColumnIndex("namaLengkap"))        val idSession = cursor.getString(cursor.getColumnIndex("idSession"))        val rule = cursor.getString(cursor.getColumnIndex("rule"))        val perusahaan = cursor.getInt(cursor.getColumnIndex("perusahaan"))        val section = cursor.getString(cursor.getColumnIndex("section"))        val namaPerusahaan = cursor.getString(cursor.getColumnIndex("namaPerusahaan"))        val idUser = cursor.getInt(cursor.getColumnIndex("idUser"))        val dept = cursor.getString(cursor.getColumnIndex("dept"))        val nik = cursor.getString(cursor.getColumnIndex("nik"))        val password = cursor.getString(cursor.getColumnIndex("password"))        val sect = cursor.getString(cursor.getColumnIndex("sect"))        val department = cursor.getString(cursor.getColumnIndex("department"))        val email = cursor.getString(cursor.getColumnIndex("email"))        val username = cursor.getString(cursor.getColumnIndex("username"))        val status = cursor.getInt(cursor.getColumnIndex("status"))        val user_update = cursor.getString(cursor.getColumnIndex("user_update"))        val usersModel = UsersModel()        usersModel.tglentry = tglentry        usersModel.level = level        usersModel.ttd = ttd        usersModel.photoProfile = photoProfile        usersModel.offlinePhoto = offlinePhoto        usersModel.namaLengkap = namaLengkap        usersModel.idSession = idSession        usersModel.rule = rule        usersModel.perusahaan = perusahaan        usersModel.section = section        usersModel.namaPerusahaan = namaPerusahaan        usersModel.idUser = idUser        usersModel.dept = dept        usersModel.nik = nik        usersModel.password = password        usersModel.sect = sect        usersModel.department = department        usersModel.email = email        usersModel.username = username        usersModel.status = status        usersModel.user_update = user_update        return usersModel    }    fun deleteItem(item:Int){        openAccess()        val hasil = sqlDatabase?.delete("$tbItem","idUser = ? ", arrayOf(item.toString()))        if(hasil!! <0 ){            Toasty.error(c!!,"Gagal Hapus").show()        }else{            Toasty.success(c!!,"Hapus Berhasil").show()        }        closeAccess()    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun deleteItem(idUser: String):Boolean{        val hasil = sqlDatabase?.delete("$tbItem","idUser = ? ", arrayOf(idUser))        if(hasil!! <0 ){            return false        }        return true    }    fun updateItem(item: UsersModel, idUser:Int):Boolean{        openAccess()        val items = ContentValues()        items.put("tglentry",item.tglentry)        items.put("level",item.level)        items.put("ttd",item.ttd)        items.put("photoProfile",item.photoProfile)        items.put("offlinePhoto",item.offlinePhoto)        items.put("namaLengkap",item.namaLengkap)        items.put("idSession",item.idSession)        items.put("rule",item.rule)        items.put("perusahaan",item.perusahaan)        items.put("section",item.section)        items.put("namaPerusahaan",item.namaPerusahaan)        items.put("dept",item.dept)        items.put("nik",item.nik)        items.put("password",item.password)        items.put("sect",item.sect)        items.put("department",item.department)        items.put("email",item.email)        items.put("username",item.username)        items.put("status",item.status)        items.put("user_update",item.user_update)        val hasil = sqlDatabase?.update("$tbItem",items,"idUser = ?", arrayOf("${idUser}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : UsersModel): ContentValues {        var cv = ContentValues()        cv.put("tglentry",item.tglentry)        cv.put("level",item.level)        cv.put("ttd",item.ttd)        cv.put("photoProfile",item.photoProfile)        cv.put("offlinePhoto",item.offlinePhoto)        cv.put("namaLengkap",item.namaLengkap)        cv.put("idSession",item.idSession)        cv.put("rule",item.rule)        cv.put("perusahaan",item.perusahaan)        cv.put("section",item.section)        cv.put("namaPerusahaan",item.namaPerusahaan)        cv.put("idUser",item.idUser)        cv.put("dept",item.dept)        cv.put("nik",item.nik)        cv.put("password",item.password)        cv.put("sect",item.sect)        cv.put("department",item.department)        cv.put("email",item.email)        cv.put("username",item.username)        cv.put("status",item.status)        cv.put("user_update",item.user_update)        return cv    }    companion object{        val tbItem = "USERS"    }}