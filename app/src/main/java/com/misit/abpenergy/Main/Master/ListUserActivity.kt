package com.misit.abpenergy.Main.Masterimport android.app.Activityimport android.content.Contextimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.view.Menuimport android.view.MenuItemimport androidx.appcompat.widget.SearchViewimport androidx.recyclerview.widget.LinearLayoutManagerimport com.misit.abpenergy.Main.DataSource.UsersDataSourceimport com.misit.abpenergy.HSE.HazardReport.Activity.NewHazardActivityimport com.misit.abpenergy.Main.Master.Adapter.ListUserAdapterimport com.misit.abpenergy.Main.Master.Response.UsersListItemimport com.misit.abpenergy.Rimport com.misit.abpenergy.Main.Response.UserListResponseimport com.misit.abpenergy.Utils.ConfigUtilimport kotlinx.android.synthetic.main.activity_list_user.*import kotlinx.coroutines.*import retrofit2.Callimport java.sql.SQLExceptionimport kotlin.collections.ArrayListclass ListUserActivity : AppCompatActivity(),ListUserAdapter.OnItemClickListener {    private var adapter: ListUserAdapter? = null    private var userList:MutableList<UsersListItem>?=null    private var userPick:String?=null    private var page:Int=1    private var call: Call<UserListResponse>?=null    private var visibleItem : Int=0    private var total : Int=0    private var pastVisibleItem : Int=0//    lateinit var swipeRefreshLayout: SwipeRefreshLayout    private var loading : Boolean=false    private var search:String?=null    var curentPosition: Int=0    var dataIntent:String?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_list_user)        title="List User"        search=""        userPick=""        page=1        dataIntent=""        visibleItem=0        total=0        pastVisibleItem=0        curentPosition=0        userList = ArrayList()        userPick = intent.getStringExtra(NewHazardActivity.USEPICK)        dataIntent = intent.getStringExtra(DataExtra)        var actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        adapter = ListUserAdapter(            this@ListUserActivity,            userPick,            userList!!        )        val linearLayoutManager = LinearLayoutManager(this@ListUserActivity)        rvListUser?.layoutManager = linearLayoutManager        rvListUser?.adapter =adapter        adapter?.setListener(this@ListUserActivity)        GlobalScope.launch(Dispatchers.Main) {            userListSQL(this@ListUserActivity, search!!)        }        Log.d("KemungkinanSQL","OK")    }    override fun onCreateOptionsMenu(menu: Menu?): Boolean {        menuInflater.inflate(R.menu.menu_cari,menu)        val menuItem = menu!!.findItem(R.id.searchUser)        val searchView = menuItem.actionView as SearchView        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener{            override fun onQueryTextSubmit(query: String?): Boolean {                if (query != null) {                    Log.d("query",query)                }                return true            }            override fun onQueryTextChange(newText: String?): Boolean {                userList?.clear()                if (newText != null) {                    Log.d("query",newText)                }                search=newText                GlobalScope.launch(Dispatchers.Main) {                    userListSQL(this@ListUserActivity, search)                }                return true            }        })        return super.onCreateOptionsMenu(menu)    }    override fun onOptionsItemSelected(item: MenuItem): Boolean {        return super.onOptionsItemSelected(item)    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }    override fun onItemClick(id_user: Int, nama: String, nik: String, profileIMG: String?) {        if(dataIntent=="Hazard"){            val intent = Intent()            intent.putExtra("nama",nama)            intent.putExtra("nik",nik)            intent.putExtra("profileIMG",profileIMG)            intent.putExtra(userPick,id_user.toString())            setResult(Activity.RESULT_OK,intent)            finish()        }    }    companion object{        var DataExtra = "DataExtra"    }    suspend fun userListSQL(c: Context,cari:String?){        userList?.clear()        coroutineScope {            val userDataSource = UsersDataSource(c)            Log.d("KemungkinanSQL",cari.toString())            val deferred = async {                try {                    val usersRow=userDataSource.searchItems(cari)                    usersRow.forEach{                        if(ConfigUtil.cekKoneksi(c)){                            Log.d("KemungkinanSQL1","${it.nik} = ${it.offlinePhoto} = ${it.photoProfile}")                            userList?.add(                                UsersListItem(                                    it.tglentry,                                    it.level,                                    it.ttd,                                    it.offlinePhoto,                                    it.namaLengkap,                                    it.idSession,                                    it.rule,                                    it.perusahaan,                                    it.section,                                    it.namaPerusahaan,                                    it.idUser,                                    it.dept,                                    it.nik,                                    it.password,                                    it.sect,                                    it.department,                                    it.email,                                    it.username,                                    it.status                                )                            )                        }else{                            Log.d("KemungkinanSQL2","${it.nik} = ${it.offlinePhoto} = ${it.photoProfile}")                            userList?.add(                                UsersListItem(                                    it.tglentry,                                    it.level,                                    it.ttd,                                    it.offlinePhoto,                                    it.namaLengkap,                                    it.idSession,                                    it.rule,                                    it.perusahaan,                                    it.section,                                    it.namaPerusahaan,                                    it.idUser,                                    it.dept,                                    it.nik,                                    it.password,                                    it.sect,                                    it.department,                                    it.email,                                    it.username,                                    it.status                                )                            )                        }                    }                    adapter?.notifyDataSetChanged()                }catch (e: SQLException){                    Log.d("KemungkinanSQL",e.toString())                }            }            deferred.await()        }    }}