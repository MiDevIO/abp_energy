package com.misit.abpenergy.Main.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport androidx.core.database.getIntOrNullimport com.misit.abpenergy.Main.Model.SchedulerModelimport com.misit.abpenergy.SQLite.DbHelperimport es.dmoral.toasty.Toastyclass SchedulerDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<SchedulerModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: SchedulerModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("${tbItem}",null,cv)        closeAccess()        return hasil!!    }    fun cekSchedule(): Int {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT count(*) FROM "+                "${tbItem}",null)        c?.let {            if(it.moveToFirst()){                return it?.getIntOrNull(0) ?: 0            }        }        c?.close()        closeAccess()        return 0    }    fun searchItems(cari: String?): ArrayList<SchedulerModel> {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "${tbItem} WHERE namaLengkap like '%"+cari+"%' or namaPerusahaan like '%"+cari+"%' or nik like '%"+cari+"%' or sect like '%"+cari+"%' or dept like '%"+cari+"%'",            null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    fun getAll(): ArrayList<SchedulerModel> {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "${tbItem}",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): SchedulerModel {        val idscheduler = cursor.getInt(cursor.getColumnIndex("idscheduler"))        val kode_shcedule = cursor.getString(cursor.getColumnIndex("kode_shcedule"))        val desk = cursor.getString(cursor.getColumnIndex("desk"))        val usersModel = SchedulerModel()        usersModel.idscheduler = idscheduler        usersModel.kode_shcedule = kode_shcedule        usersModel.desk = desk        return usersModel    }    fun deleteItem(idscheduler:Int){        openAccess()        val hasil = sqlDatabase?.delete("${tbItem}","idscheduler = ? ", arrayOf(idscheduler.toString()))        if(hasil!! <0 ){            Toasty.error(c!!,"Gagal Hapus").show()        }else{            Toasty.success(c!!,"Hapus Berhasil").show()        }        closeAccess()    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("${tbItem}", null,null)        if(hasil!! < 0 ){            return false        }        closeAccess()        return true    }    fun deleteItem(idscheduler: String):Boolean{        val hasil = sqlDatabase?.delete("${tbItem}","idscheduler = ? ", arrayOf(idscheduler))        if(hasil!! <0 ){            return false        }        return true    }    fun updateItem(item: SchedulerModel, idscheduler:Int):Boolean{        openAccess()        val cv = ContentValues()        cv.put("idscheduler",item.idscheduler)        cv.put("kode_shcedule",item.kode_shcedule)        cv.put("desk",item.desk)        val hasil = sqlDatabase?.update("${tbItem}",cv,"idscheduler = ?", arrayOf("${idscheduler}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : SchedulerModel): ContentValues {        var cv = ContentValues()        cv.put("kode_shcedule",item.kode_shcedule)        cv.put("desk",item.desk)        return cv    }    companion object{        val tbItem = "SCHEDULER"    }}