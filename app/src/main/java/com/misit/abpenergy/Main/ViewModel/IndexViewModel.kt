package com.misit.abpenergy.Main.ViewModelimport android.content.Contextimport android.util.Logimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.misit.abpenergy.Api.ApiClientTwoimport com.misit.abpenergy.Api.ApiEndPointTwoimport com.misit.abpenergy.Main.DataSource.DataUsersSourceimport com.misit.abpenergy.Main.Model.DataUsersModelimport com.misit.abpenergy.Main.Response.MessageInfoItemimport kotlinx.coroutines.*class IndexViewModel:ViewModel() {    private var user:MutableLiveData<DataUsersModel>    private lateinit var dataUserDatasource: DataUsersSource    private var hazardUser:MutableLiveData<Int>    private var inspeksiUser:MutableLiveData<Int>    private var messageList:MutableLiveData<MutableList<MessageInfoItem>>    init {        user = MutableLiveData()        hazardUser = MutableLiveData()        inspeksiUser = MutableLiveData()        messageList = MutableLiveData()    }    fun messageInfoObserver():MutableLiveData<MutableList<MessageInfoItem>>{        return messageList    }    fun getUserObserver() :MutableLiveData<DataUsersModel>{        return user    }    fun hazardObserver():MutableLiveData<Int>{        return hazardUser    }    fun inspeksiObserver():MutableLiveData<Int>{        return inspeksiUser    }    fun loadUser(c:Context,nik:String){        dataUserDatasource = DataUsersSource(c)        GlobalScope.launch {            val deferred = async {                dataUserDatasource.getItem(nik)            }            val result = deferred.await()            if(result!=null){                user.postValue(result)            }else{                user.postValue(null)            }        }    }    fun CARuser(hazard:Int,inspeksi:Int){        hazardUser.postValue(hazard)        inspeksiUser.postValue(inspeksi)    }    fun loadMessageInfo(c: Context){        var listItem:ArrayList<MessageInfoItem> = ArrayList()        GlobalScope.launch(Dispatchers.IO) {            var api = async { ApiClientTwo.getClient(c)!!.create(ApiEndPointTwo::class.java) }.await()            try {                var r = async { api.getMessageInfo() }.await()                if(r!!.isSuccessful){                    var pesan =  async {r.body() }.await()                    var a = listOf(                        async { listItem.addAll(pesan!!.messageInfo!!) },                        async { messageList.postValue(listItem) }                    )                    a.awaitAll()                }else{                }            }catch (e:Exception){                Log.d("ErrorMessage","${e.message}")            }        }    }    companion object{        var NIK = "NIK"    }}