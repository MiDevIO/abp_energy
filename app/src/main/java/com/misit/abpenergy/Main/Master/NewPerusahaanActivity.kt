package com.misit.abpenergy.Main.Masterimport android.app.Activityimport android.content.Contextimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.view.Viewimport android.widget.Toastimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Api.ApiEndPointTwoimport com.misit.abpenergy.Login.Response.DaftarAkunResponseimport com.misit.abpenergy.Rimport com.misit.abpenergy.Rkb.Response.CsrfTokenResponseimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_new_perusahaan.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass NewPerusahaanActivity : AppCompatActivity() {    private var csrf_token : String?=""    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_new_perusahaan)        var actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        title ="Form Perusahaan"        val idCompany = intent.getStringExtra(ID_PERUSAHAAN)        var namaPerusahaan = intent.getStringExtra(NAMA_PERUSAHAAN)        if(idCompany==null){            btnSimpan.visibility = View.VISIBLE            btnUpdate.visibility = View.GONE        }else{            btnSimpan.visibility = View.GONE            btnUpdate.visibility = View.VISIBLE            inPerusahaan.setText(namaPerusahaan)        }        btnSimpan.setOnClickListener {            val perusahaan = inPerusahaan.text.toString()            simpanperusahaan(this@NewPerusahaanActivity,perusahaan)        }        btnUpdate.setOnClickListener {            val perusahaan = inPerusahaan.text.toString()            updatePerusahaan(this@NewPerusahaanActivity,idCompany!!,perusahaan)        }    }    companion object{        var ID_PERUSAHAAN = "ID_PERUSAHAAN"        var NAMA_PERUSAHAAN = "NAMA_PERUSAHAAN"    }    private fun simpanperusahaan(c: Context, perusahaan:String) {        if(!isValidatedAll()){            return        }        val apiEndPoint = ApiClient.getClient(c)!!.create(ApiEndPointTwo::class.java)        val call = apiEndPoint.saveCompany(perusahaan,csrf_token)        call?.enqueue(object:Callback<DaftarAkunResponse>{            override fun onResponse(                call: Call<DaftarAkunResponse>,                response: Response<DaftarAkunResponse>            ) {                val r = response.body()                if(r!=null){                    if(r.success){                        Toasty.success(c,"Menambah Data Perusahaan Berhasil!").show()                        val intent = Intent()                        setResult(Activity.RESULT_OK,intent)                        finish()                    }else{                        if(r.login){                            Toasty.error(c,"Error! Data tidak tersimpan!").show()                        }else{                            Toasty.error(c,"Nama Perusahaan Sudah Ada!").show()                        }                    }                }else{                    Toasty.error(c,"Error! Silahkan Coba Lagi!").show()                }            }            override fun onFailure(call: Call<DaftarAkunResponse>, t: Throwable) {                Log.d("ErrorCompany",t.toString())            }        })    }    private fun updatePerusahaan(c: Context,idCompany:String, perusahaan:String) {        if(!isValidatedAll()){            return        }        val apiEndPoint = ApiClient.getClient(c)!!.create(ApiEndPointTwo::class.java)        val call = apiEndPoint.updateCompany(idCompany,perusahaan,"PUT",csrf_token)        call?.enqueue(object:Callback<DaftarAkunResponse>{            override fun onResponse(                call: Call<DaftarAkunResponse>,                response: Response<DaftarAkunResponse>            ) {                val r = response.body()                if(r!=null){                    if(r.success){                        Toasty.success(c,"Memperbaharui Data Perusahaan Berhasil!").show()                        val intent = Intent()                        setResult(Activity.RESULT_OK,intent)                        finish()                    }else{                            Toasty.error(c,"Error! Data tidak diperbaharui! Kemungkinan Data Baru dan Data Lama Sama!").show()                    }                }else{                    Toasty.error(c,"Error! Silahkan Coba Lagi!").show()                }            }            override fun onFailure(call: Call<DaftarAkunResponse>, t: Throwable) {                Log.d("ErrorCompany",t.toString())            }        })    }    private fun isValidatedAll()  :Boolean {        clearError()        if(inPerusahaan.text!!.isEmpty()){            tilPerusahaan.error = "Tidak Boleh Kosong"            inPerusahaan.requestFocus()            return false        }        return true    }    private fun clearError() {        tilPerusahaan.error = null    }    override fun onResume() {        getToken()        super.onResume()    }    private fun getToken() {        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getToken("csrf_token")        call?.enqueue(object : Callback<CsrfTokenResponse> {            override fun onFailure(call: Call<CsrfTokenResponse>, t: Throwable) {                Toast.makeText(this@NewPerusahaanActivity,"Error : $t", Toast.LENGTH_SHORT).show()            }            override fun onResponse(                call: Call<CsrfTokenResponse>,                response: Response<CsrfTokenResponse>            ) {                csrf_token = response.body()?.csrfToken            }        })    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }}