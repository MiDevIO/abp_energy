package com.misit.abpenergy.Main.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport com.misit.abpenergy.Main.Model.KeparahanModelimport com.misit.abpenergy.SQLite.DbHelperimport es.dmoral.toasty.Toastyclass KeparahanDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<KeparahanModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    private fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: KeparahanModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("$tbItem",null,cv)        closeAccess()        return hasil!!    }    fun getItem(idKeparahan: String): KeparahanModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE idKeparahan = ?", arrayOf(idKeparahan))        c?.moveToFirst()        var itemModels = KeparahanModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    fun getAll(): ArrayList<KeparahanModel> {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem ",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): KeparahanModel {        val idKeparahan = cursor.getInt(cursor.getColumnIndex("idKeparahan"))        val keparahan = cursor.getString(cursor.getColumnIndex("keparahan"))        val flag = cursor.getInt(cursor.getColumnIndex("flag"))        val nilai = cursor.getInt(cursor.getColumnIndex("nilai"))        val keparahanModel = KeparahanModel()        keparahanModel.idKeparahan = idKeparahan        keparahanModel.keparahan = keparahan        keparahanModel.flag = flag        keparahanModel.nilai = nilai        return keparahanModel    }    fun deleteItem(item:Int){        openAccess()        val hasil = sqlDatabase?.delete("$tbItem","idKeparahan = ? ", arrayOf(item.toString()))        if(hasil!! <0 ){            Toasty.error(c!!,"Gagal Hapus").show()        }else{            Toasty.success(c!!,"Hapus Berhasil").show()        }        closeAccess()    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun updateItem(item: KeparahanModel, idKeparahan:Int):Boolean{        openAccess()        val items = ContentValues()        items.put("keparahan",item.keparahan)        items.put("flag",item.flag)        items.put("nilai",item.nilai)        val hasil = sqlDatabase?.update("$tbItem",items,"idKeparahan = ?", arrayOf("${idKeparahan}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : KeparahanModel): ContentValues {        var cv = ContentValues()        cv.put("idKeparahan",item.idKeparahan)        cv.put("keparahan",item.keparahan)        cv.put("flag",item.flag)        cv.put("nilai",item.nilai)        return cv    }    companion object{        val tbItem = "KEPARAHAN"    }}