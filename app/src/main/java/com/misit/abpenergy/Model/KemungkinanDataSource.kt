package com.misit.abpenergy.Modelimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport com.misit.abpenergy.SQLite.DbHelperimport es.dmoral.toasty.Toastyclass KemungkinanDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<KemungkinanModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    private fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: KemungkinanModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("${tbItem}",null,cv)        closeAccess()        return hasil!!    }    fun getItem(idKemungkinan: String): KemungkinanModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "${tbItem} WHERE idKemungkinan = ?", arrayOf(idKemungkinan))        c?.moveToFirst()        var itemModels = KemungkinanModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    fun getAll(): ArrayList<KemungkinanModel> {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "${tbItem} ",null)        if(c!!.moveToFirst()){            while (c.isAfterLast){                listItem?.add(fetchRow(c))                c.moveToNext()            }        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): KemungkinanModel {        val idKemungkinan = cursor.getInt(cursor.getColumnIndex("idKemungkinan"))        val kemungkinan = cursor.getString(cursor.getColumnIndex("kemungkinan"))        val flag = cursor.getInt(cursor.getColumnIndex("flag"))        val nilai = cursor.getInt(cursor.getColumnIndex("nilai"))        val kemungkinanModel = KemungkinanModel()        kemungkinanModel.idKemungkinan = idKemungkinan        kemungkinanModel.kemungkinan = kemungkinan        kemungkinanModel.flag = flag        kemungkinanModel.nilai = nilai        return kemungkinanModel    }    fun deleteItem(item:Int){        openAccess()        val hasil = sqlDatabase?.delete("${tbItem}","nik = ? ", arrayOf(item.toString()))        if(hasil!! <0 ){            Toasty.error(c!!,"Gagal Hapus").show()        }else{            Toasty.success(c!!,"Hapus Berhasil").show()        }        closeAccess()    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("${tbItem}","1",null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun updateItem(item: KemungkinanModel, idKemungkinan:Int):Boolean{        openAccess()        val items = ContentValues()        items.put("kemungkinan",item.kemungkinan)        items.put("flag",item.flag)        items.put("nilai",item.nilai)        val hasil = sqlDatabase?.update("${tbItem}",items,"idKemungkinan = ?", arrayOf("${idKemungkinan}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : KemungkinanModel): ContentValues {        var cv = ContentValues()        cv.put("idKemungkinan",item.idKemungkinan)        cv.put("kemungkinan",item.kemungkinan)        cv.put("flag",item.flag)        cv.put("nilai",item.nilai)        return cv    }    companion object{        val tbItem = "KEMUNGKINAN"    }}