package com.misit.abpenergy.HSE.Inspeksi.SQLite.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.sqlite.SQLiteDatabaseimport android.util.Logimport com.misit.abpenergy.HSE.Inspeksi.SQLite.Model.FormModelimport com.misit.abpenergy.HSE.Inspeksi.SQLite.Model.ListModelimport com.misit.abpenergy.HSE.Inspeksi.SQLite.Model.SubModelimport com.misit.abpenergy.SQLite.DbHelperimport java.lang.Exceptionclass FormInspeksi(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    init {        dbHelper = DbHelper(c)    }    fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertForm(item: List<FormModel>):Long{        var hasil:Long?=null        try {            sqlDatabase?.beginTransaction()            item.forEach {                var cvForm = cvForm(it)                 hasil= sqlDatabase?.insertOrThrow("${tbForm}",null,cvForm)            }            sqlDatabase?.setTransactionSuccessful()            sqlDatabase?.endTransaction()            return hasil!!        }catch (e: Exception){            Log.d("ErrorInsert","${e.message}")            return -1        }    }    fun insertList(item: List<ListModel>):Long{        var hasil:Long?=null        try {            sqlDatabase?.beginTransaction()            item.forEach {                var cvList = cvList(it)                hasil = sqlDatabase?.insertWithOnConflict("${tbList}",null,cvList,SQLiteDatabase.CONFLICT_REPLACE)            }            sqlDatabase?.setTransactionSuccessful()            sqlDatabase?.endTransaction()            return hasil!!        }catch (e: Exception){            Log.d("ErrorInsert","${e.message}")            return -1        }    }    fun insertSub(item: List<SubModel>):Long{        var hasil :Long?=null        try {            item.forEach {                var cvSub = cvSub(it)                hasil = sqlDatabase?.insertWithOnConflict(                    "${tbsub}",                    null,cvSub,SQLiteDatabase.CONFLICT_REPLACE)            }            return hasil!!        }catch (e: Exception){            Log.d("ErrorInsert","${e.message}")            return -1        }    }    private fun cvForm(item : FormModel): ContentValues {        var items = ContentValues()        items.put("idForm",item.idForm)        items.put("kodeForm",item.kodeForm)        items.put("namaForm",item.namaForm)        items.put("userEntry",item.userEntry)        items.put("tglEntry",item.tglEntry)        items.put("flag",item.flag)        return items    }    private fun cvList(item : ListModel): ContentValues {        var items = ContentValues()        items.put("idList",item.idList )        items.put("idForm",item.idForm)        items.put("idSub",item.idSub)        items.put("user_input",item.user_input)        items.put("tgl_input",item.tgl_input)        items.put("flag",item.flag)        items.put("listInspeksi",item.listInspeksi)        return items    }    private fun cvSub(item : SubModel): ContentValues {        var items = ContentValues()        items.put("idSub",item.	idSub)        items.put("idForm",item.idForm)        items.put("numSub",item.numSub)        items.put("nameSub",item.nameSub)        items.put("user_input",item.user_input)        items.put("tgl_input",item.tgl_input)        items.put("flag",item.flag)        return items    }    companion object{        val tbForm = "form_inspeksi"        val tbList = "form_inspeksi_list"        val tbsub = "form_inspeksi_sub"    }}