package com.misit.abpenergy.HSE.Inspeksiimport android.app.Activityimport android.content.Contextimport android.content.ContextWrapperimport android.content.Intentimport android.graphics.Bitmapimport android.graphics.BitmapFactoryimport android.net.Uriimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.provider.MediaStoreimport android.util.Logimport android.view.Viewimport androidx.appcompat.app.AlertDialogimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.HSE.HazardReport.Activity.PhotoHazardActivityimport com.misit.abpenergy.HSE.Inspeksi.Response.ItemTempResponseimport com.misit.abpenergy.Rimport com.misit.abpenergy.HGE.Rkb.Response.CsrfTokenResponseimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.PopupUtilimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_pica_inspeksi.*import okhttp3.MediaType.Companion.toMediaTypeOrNullimport okhttp3.MultipartBodyimport okhttp3.RequestBodyimport okhttp3.RequestBody.Companion.asRequestBodyimport okhttp3.RequestBody.Companion.toRequestBodyimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.io.Fileimport java.io.FileOutputStreamimport java.io.IOExceptionimport java.io.OutputStreamimport java.util.*class PicaInspeksiActivity : AppCompatActivity() , View.OnClickListener{    private var uniqueID:String?=null    private var idForm:String?=null    private var csrf_token:String?=null    private var rbStatus:String?=null    private var bitmap: Bitmap?=null    private var fileUpload: Uri?=null    private var imgIn:Int=0    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_pica_inspeksi)        title = "Problem Identification Corrective Action"        val actionBar = supportActionBar        uniqueID = intent.getStringExtra("uniqueID")        idForm = intent.getStringExtra("formId")        actionBar?.setDisplayHomeAsUpEnabled(true)        inPicaTenggat.setOnClickListener(this)        btnPicaBatal.setOnClickListener(this)        btnPicaSimpan.setOnClickListener(this)        btnAddBukti.setOnClickListener(this)    }    override fun onClick(v: View?) {        if(v?.id==R.id.inPicaTenggat){            ConfigUtil.showDialogTgl(inPicaTenggat,this@PicaInspeksiActivity)        }        if(v?.id==R.id.btnPicaBatal){            onBackPressed()        }        if(v?.id==R.id.btnPicaSimpan){            var id = uniqueID!!.toRequestBody(MultipartBody.FORM)            var formId = idForm!!.toRequestBody(MultipartBody.FORM)            var temuan = inPicaTemuan.text.toString().toRequestBody(MultipartBody.FORM)            var nikPJ = inPicaNikPJ.text.toString().toRequestBody(MultipartBody.FORM)            var namaPJ = inPicaNamaPJ.text.toString().toRequestBody(MultipartBody.FORM)            var tglTenggat = inPicaTenggat.text.toString().toRequestBody(MultipartBody.FORM)            if(rbPicaSelesai.isChecked){                rbStatus = rbPicaSelesai.text.toString()            }else if(rbPicaBelumSelesai.isChecked){                rbStatus = rbPicaBelumSelesai.text.toString()            }else if(rbPicaDalamPengerjaan.isChecked){                rbStatus = rbPicaDalamPengerjaan.text.toString()            }else if(rbPicaBerlanjut.isChecked){                rbStatus = rbPicaBerlanjut.text.toString()            }            var rbStatusForm = rbStatus!!.toRequestBody(MultipartBody.FORM)            if(imgIn>0) {                var waktu = Date()                val cal = Calendar.getInstance()                cal.time = waktu                var jam =                    "${cal.get(Calendar.HOUR_OF_DAY)}${cal.get(Calendar.MINUTE)}${cal.get(Calendar.SECOND)}"                val wrapper = ContextWrapper(applicationContext)//    var filenya = File(fileUpload!!.path, jam)                var file = wrapper.getDir("images", Context.MODE_PRIVATE)                file = File(file, "${jam}.jpg")//    var reqFile = RequestBody.create("image/*".toMediaTypeOrNull(),file!!);                try {                    // Get the file output stream                    val stream: OutputStream = FileOutputStream(file)                    //var uri = Uri.parse(file.absolutePath)                    // Compress bitmap                    bitmap!!.compress(Bitmap.CompressFormat.JPEG, 20, stream)                    // Flush the stream                    stream.flush()                    // Close stream                    stream.close()                } catch (e: IOException) { // Catch the exception                    e.printStackTrace()                }                var fileUri = file.asRequestBody("image/*".toMediaTypeOrNull())                var bukti = MultipartBody.Part.createFormData("buktiTemuan", file.name, fileUri)                simpanPICA(id!!,formId,temuan,bukti,nikPJ,namaPJ,tglTenggat,rbStatusForm!!)            }else{                Toasty.error(this@PicaInspeksiActivity,"Gambar Tidak Boleh Kosong!!").show()            }        }        if(v?.id==R.id.btnAddBukti){            showDialogOption(433,422)        }    }    //    Dialog PICK PICTURE    fun showDialogOption(camera:Int,galery:Int){        val alertDialog = AlertDialog.Builder(this@PicaInspeksiActivity)        alertDialog.setTitle("Silahkan Pilih")        val animals = arrayOf<String>(            "Ambil Sebuah Gambar",            "Pilih Gambar dari galery"        )        alertDialog!!.setItems(animals, { dialog, which ->            when (which) {                0 -> openCamera(camera)                1 -> openGalleryForImage(galery)            }        })        alertDialog.create()        alertDialog.show()    }    //   openCamera    fun openCamera(codeRequest:Int){        var intent = Intent(this@PicaInspeksiActivity, PhotoHazardActivity::class.java)        startActivityForResult(intent,codeRequest)    }    //OPEN GALERY    private fun openGalleryForImage(codeRequest: Int) {        val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)        intent.type = "image/*"        startActivityForResult(intent, codeRequest)    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if(resultCode==Activity.RESULT_OK && requestCode==422) {            try {                fileUpload = data!!.data                try {                    bitmap = BitmapFactory.decodeStream(                        contentResolver.openInputStream(fileUpload!!))                    btnAddBukti.setImageBitmap(bitmap);                    imgIn = 1                } catch (e: IOException) {                    imgIn = 0                }            } catch (e: IOException) {                imgIn = 0            }        }else if(resultCode==Activity.RESULT_OK && requestCode==433){            try {                var dataSelesai = data!!                bitmap = dataSelesai                    .getByteArrayExtra("gambarDiFoto")?.let {                        BitmapFactory.decodeByteArray(                            dataSelesai.getByteArrayExtra("gambarDiFoto"), 0, it.size                        )                    }                btnAddBukti.setImageBitmap(bitmap);                imgIn = 1            } catch (e: IOException) {                imgIn = 0                e.printStackTrace();            }        }        super.onActivityResult(requestCode, resultCode, data)    }    private fun simpanPICA(idTemp:RequestBody,idForm:RequestBody,                           temuan:RequestBody,buktiTemuan: MultipartBody.Part,                           nikPJ:RequestBody,namaPJ:RequestBody,                           tglTenggat:RequestBody,rbStatus:RequestBody){        var csrf = csrf_token!!.toRequestBody(MultipartBody.FORM)        if(!isValidate()){            return        }        PopupUtil.showProgress(            this@PicaInspeksiActivity,            "Loading...",            "Menyimpan Pica ...!"        )        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.inspeksiPicaTemp(buktiTemuan,idTemp,idForm,temuan,nikPJ,namaPJ,tglTenggat,rbStatus,csrf)        call?.enqueue(object : Callback<ItemTempResponse> {            override fun onResponse(                call: Call<ItemTempResponse>,                response: Response<ItemTempResponse>            ) {                var r =response.body()                if(r!=null){                   if(r!!.success){                       Toasty.success(this@PicaInspeksiActivity,"PICA Berhasil di tambah!").show()                        PopupUtil.dismissDialog()                       var intent= Intent()                       setResult(Activity.RESULT_OK,intent)                       finish()                   }else{                       Toasty.error(this@PicaInspeksiActivity,"PICA Gagal di tambah!").show()                       PopupUtil.dismissDialog()                   }                }else{                    Toasty.error(this@PicaInspeksiActivity,"PICA Gagal di tambah!").show()                    PopupUtil.dismissDialog()                }            }            override fun onFailure(call: Call<ItemTempResponse>, t: Throwable) {                Log.d("ErrorPica",t.toString())                PopupUtil.dismissDialog()            }        })    }    override fun onNavigateUp(): Boolean {        onBackPressed()        return super.onNavigateUp()    }    fun isValidate():Boolean {        clearError()        if (inPicaTemuan.text!!.isEmpty()) {            tilPicaTemuan.error = "Please Input Someting"            inPicaTemuan.requestFocus()            return false        }        if (inPicaTenggat.text!!.isEmpty()) {            tilPicaTenggat.error = "Please Input Someting"            inPicaTenggat.requestFocus()            return false        }        if (inPicaNikPJ.text!!.isEmpty()) {            tilPicaNikPJ.error = "Please Input Someting"            inPicaNikPJ.requestFocus()            return false        }        if (inPicaNamaPJ.text!!.isEmpty()) {            tilPicaNamaPJ.error = "Please Input Someting"            inPicaNamaPJ.requestFocus()            return false        }        return true    }    private fun clearError() {        tilPicaTemuan.error=null        tilPicaNamaPJ.error=null        tilPicaTenggat.error=null        tilPicaNikPJ.error=null    }    override fun onResume() {        getToken()        super.onResume()    }    private fun getToken() {        val apiEndPoint = ApiClient.getClient(this@PicaInspeksiActivity)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getToken("csrf_token")        call?.enqueue(object : Callback<CsrfTokenResponse> {            override fun onResponse(                call: Call<CsrfTokenResponse>,                response: Response<CsrfTokenResponse>            ) {                csrf_token = response.body()?.csrfToken            }            override fun onFailure(call: Call<CsrfTokenResponse>, t: Throwable) {                Log.d("csrf_token",t.toString())            }        })    }}