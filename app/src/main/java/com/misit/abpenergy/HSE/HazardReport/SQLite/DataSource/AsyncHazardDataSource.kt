package com.misit.abpenergy.HSE.HazardReport.SQLite.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport android.database.sqlite.SQLiteExceptionimport android.util.Logimport androidx.core.database.getIntOrNullimport com.misit.abpenergy.HSE.HazardReport.SQLite.Model.*import com.misit.abpenergy.HSE.HazardReport.SQLite.Utils.Fetchimport com.misit.abpenergy.SQLite.DbHelperclass AsyncHazardDataSource(c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listAllItem :ArrayList<AsyncHazardModel>?=null    var listHeader :ArrayList<HazardHeaderModel>?=null    var listDetail :ArrayList<HazardDetailModel>?=null    var listValidation :ArrayList<HazardValidationModel>?=null    init {        listAllItem = ArrayList()        listHeader = ArrayList()        listDetail = ArrayList()        listValidation = ArrayList()        dbHelper = DbHelper(c)    }    fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun cekHazard(): Int {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT count(*) FROM "+                "$header as a  "+                "LEFT JOIN $detail as b ON b.uid = a.uid "+                "LEFT JOIN $validation as c on c.uid = a.uid "            ,null)        c?.let {            if(it.moveToFirst()){                return it?.getIntOrNull(0) ?: 0            }        }        c?.close()        closeAccess()        return 0    }    suspend fun getIdHazard():MutableList<String>?{        var listIdHazard= mutableListOf<String>()        openAccess()        val c = sqlDatabase?.rawQuery("SELECT idHazard from $header",null)        c?.let {            if(it.moveToFirst()){                do{                    listIdHazard.add(it.getString(it.getColumnIndex("idHazard")))                }while (it.moveToNext())            }        }        c?.close()        closeAccess()        return listIdHazard    }    fun getPage(dari:String,sampai:String,user_input:String): Int {        var countRows=0        val numRows = sqlDatabase!!.rawQuery(            "SELECT count(*) as jumlah FROM " +                    "$header " +                    "WHERE user_input = '"+user_input+"' "+                    " and (tgl_hazard >= '" + dari + "' AND  tgl_hazard <= '" + sampai + "')",            null        )        numRows.let {            if(it.moveToFirst()){                val sendItem = numRows?.getIntOrNull(0) ?: 0                return sendItem                Log.d("GetPage","$numRows")            }            it.close()        }        Log.d("GetPage","$numRows")        return countRows    }    fun getPaginate(username:String,halaman_awal:Int,batas:Int,dari:String,sampai:String,validasi:Int): ArrayList<HazardReportView>{        var cekValidasi :String?=null        val listItem : ArrayList<HazardReportView> = ArrayList()        var c: Cursor        if(validasi!=null){            if (validasi==0){                cekValidasi = " and h.user_valid IS NULL"            }else if(validasi==1){                cekValidasi = " and ( h.option_flag='1' or h.option_flag IS NULL) and h.user_valid IS NOT NULL"            }else if(validasi==2){                cekValidasi = " and h.option_flag ='0'"            }            c = sqlDatabase!!.rawQuery("SELECT "+                    "a.*, b.*,c.*,d.*,e.*,f.namaLengkap,g.*,h.*"+                    " FROM "+                    "$header a "+                    "INNER JOIN $detail b ON b.uid=a.uid "+                    "LEFT JOIN KEMUNGKINAN c ON c.idKemungkinan=a.idKemungkinan "+                    "LEFT JOIN KEPARAHAN d ON d.idKeparahan=a.idKeparahan "+                    "LEFT JOIN LOKASI e ON e.idLok=a.lokasi "+                    "LEFT JOIN USERS f ON f.username=a.user_input "+                    "LEFT JOIN PENGENDALIAN g ON g.idHirarki=b.idPengendalian "+                    "LEFT JOIN $validation h ON h.uid=a.uid "+                    " WHERE (a.tgl_hazard >= '"+dari+"' AND  a.tgl_hazard <= '"+sampai+"') AND a.user_input = '"+username+"' $cekValidasi "+                    " ORDER BY a.tgl_hazard desc LIMIT $halaman_awal,$batas ",null)        }else{            c = sqlDatabase!!.rawQuery("SELECT "+                    "a.*, b.*,c.*,d.*,e.*,f.namaLengkap,g.*,h.*"+                    " FROM "+                    "$header a "+                    "INNER JOIN $detail b ON b.uid=a.uid "+                    "LEFT JOIN KEMUNGKINAN c ON c.idKemungkinan=a.idKemungkinan "+                    "LEFT JOIN KEPARAHAN d ON d.idKeparahan=a.idKeparahan "+                    "LEFT JOIN LOKASI e ON e.idLok=a.lokasi "+                    "LEFT JOIN USERS f ON f.username=a.user_input "+                    "LEFT JOIN PENGENDALIAN g ON g.idHirarki=b.idPengendalian "+                    "LEFT JOIN $validation h ON h.uid=a.uid "+                    " WHERE (a.tgl_hazard >= '"+dari+"' AND  a.tgl_hazard <= '"+sampai+"') AND a.user_input = '"+username+"' "+                    " ORDER BY a.tgl_hazard desc LIMIT $halaman_awal,$batas ",null)        }        c.let {            if(c.moveToFirst()){                do {                    listItem?.add(Fetch.joinHazard(c))                }while (c.moveToNext())            }            if (c.isLast){                return listItem                c?.close()            }        }        return listItem    }    fun getHazard(username:String): ArrayList<HazardReport>{        val listItem : ArrayList<HazardReport> = ArrayList()        var c= sqlDatabase?.rawQuery("SELECT "+                    "a.*"+                    " FROM "+                    "$header a "+                    " WHERE a.user_input = '"+username+"' ",null)        c?.let {            if(c.moveToFirst()){                do {                    listItem?.add(fetchAllRow(c))                }while (c.moveToNext())            }            if (c.isLast){                return listItem                c?.close()            }        }        return listItem    }    fun insertHeader(item: HazardReport):Boolean{        var status: Boolean        try {            var cv = cvHeader(item)            var hasil = sqlDatabase?.insertOrThrow("${header}",null,cv)           if (hasil!=null){                if(hasil <= 0 ){                    status= false                }else{                    status= true                }            }else{                status=false           }        }catch (e:SQLiteException){            Log.d("SqlHeader","${e.message}")           status= false        }        return status    }    fun insertDetail(item: HazardReport):Boolean{        var status=false        try {            var cv = cvDetail(item)            var hasil = sqlDatabase?.insertOrThrow("${detail}",null,cv)            if (hasil!=null){                if(hasil <= 0 ){                    status= false                }else{                    status= true                }            }else{                status=false            }        }catch(e:SQLiteException){            Log.d("SqlHeader","${e.message}")            status= false        }        return status    }    fun insertValidation(item: HazardReport):Boolean{        var status=false        try {            var cv = cvValidation(item)            var hasil = sqlDatabase?.insertOrThrow("${validation}", null, cv)            if (hasil!=null){                if(hasil <= 0 ){                    status= false                }else{                    status= true                }            }else{                status=false            }        }catch (e:SQLiteException){            Log.d("SqlHeader","${e.message}")            status= false        }        return status    }//    private fun fetchJoinRow(cursor: Cursor): HazardReportView {//        val idHazard = cursor.getInt(cursor.getColumnIndex("idHazard"))//        val uid = cursor.getString(cursor.getColumnIndex("uid"))//        val perusahaan = cursor.getString(cursor.getColumnIndex("perusahaan"))//        val tgl_hazard = cursor.getString(cursor.getColumnIndex("tgl_hazard"))//        val jam_hazard = cursor.getString(cursor.getColumnIndex("jam_hazard"))//        val idKemungkinan = cursor.getInt(cursor.getColumnIndex("idKemungkinan"))//        val idKeparahan = cursor.getInt(cursor.getColumnIndex("idKeparahan"))//        val deskripsi = cursor.getString(cursor.getColumnIndex("deskripsi"))//        val lokasi = cursor.getString(cursor.getColumnIndex("lokasi"))//        val lokasi_detail = cursor.getString(cursor.getColumnIndex("lokasi_detail"))//        val status_perbaikan = cursor.getString(cursor.getColumnIndex("status_perbaikan"))//        val user_input = cursor.getString(cursor.getColumnIndex("user_input"))//        val kemungkinan = cursor.getString(cursor.getColumnIndex("kemungkinan"))//        val flag = cursor.getInt(cursor.getColumnIndex("flag"))//        val updateBukti = cursor.getString(cursor.getColumnIndex("update_bukti"))//        val nilai = cursor.getInt(cursor.getColumnIndex("nilai"))//        val statusPerbaikan = cursor.getString(cursor.getColumnIndex("status_perbaikan"))//        val namaLengkap = cursor.getString(cursor.getColumnIndex("nama_lengkap"))//        val tglSelesai = cursor.getString(cursor.getColumnIndex("tgl_selesai"))//        val namaPengendalian = cursor.getString(cursor.getColumnIndex("namaPengendalian"))//        val tglvalid = cursor.getString(cursor.getColumnIndex("tgl_valid"))//        val idKeparahanSesudah = cursor.getInt(cursor.getColumnIndex("idKeparahanSesudah"))//        val tindakan = cursor.getString(cursor.getColumnIndex("tindakan"))//        val katBahaya = cursor.getString(cursor.getColumnIndex("katBahaya"))//        val keteranganUpdate = cursor.getString(cursor.getColumnIndex("keterangan_update"))//        val lokasiHazard = cursor.getString(cursor.getColumnIndex("lokasiHazard"))//        val fotoPJ = cursor.getString(cursor.getColumnIndex("fotoPJ"))//        val idvalidation = cursor.getInt(cursor.getColumnIndex("idValidation"))//        val jamSelesai = cursor.getString(cursor.getColumnIndex("jam_selesai"))//        val idKemungkinanSesudah = cursor.getInt(cursor.getColumnIndex("idKemungkinanSesudah"))//        val jamvarid = cursor.getString(cursor.getColumnIndex("jam_valid"))//        val idHirarki = cursor.getInt(cursor.getColumnIndex("idHirarki"))//        val tglInput = cursor.getString(cursor.getColumnIndex("tglInput"))//        val nikPJ = cursor.getString(cursor.getColumnIndex("nikPJ"))//        val bukti = cursor.getString(cursor.getColumnIndex("bukti"))//        val uservalid = cursor.getString(cursor.getColumnIndex("user_valid"))//        val keparahan = cursor.getString(cursor.getColumnIndex("keparahan"))//        val fotoPJ_option = cursor.getInt(cursor.getColumnIndex("fotoPJ_option"))//        val status = cursor.getInt(cursor.getColumnIndex("status"))//        val namaPJ = cursor.getString(cursor.getColumnIndex("namaPJ"))//        val tgl_tenggat = cursor.getString(cursor.getColumnIndex("tgl_tenggat"))//        val time_input = cursor.getString(cursor.getColumnIndex("time_input"))//        val option_flag = cursor.getInt(cursor.getColumnIndex("option_flag"))//        val keterangan_admin = cursor.getString(cursor.getColumnIndex("keterangan_admin"))//        val hazardHeaderModel = HazardReportView()//        hazardHeaderModel.kemungkinan = kemungkinan//        hazardHeaderModel.flag = flag//        hazardHeaderModel.updateBukti = updateBukti//        hazardHeaderModel.nilai = nilai//        hazardHeaderModel.statusPerbaikan = statusPerbaikan//        hazardHeaderModel.namaLengkap = namaLengkap//        hazardHeaderModel.tglSelesai = tglSelesai//        hazardHeaderModel.namaPengendalian = namaPengendalian//        hazardHeaderModel.tglvalid = tglvalid//        hazardHeaderModel.idKeparahanSesudah = idKeparahanSesudah//        hazardHeaderModel.tindakan = tindakan//        hazardHeaderModel.katBahaya = katBahaya//        hazardHeaderModel.keteranganUpdate = keteranganUpdate//        hazardHeaderModel.lokasiHazard = lokasiHazard//        hazardHeaderModel.fotoPJ = fotoPJ//        hazardHeaderModel.idvalidation = idvalidation//        hazardHeaderModel.jamSelesai = jamSelesai//        hazardHeaderModel.idKemungkinanSesudah = idKemungkinanSesudah//        hazardHeaderModel.jamvarid = jamvarid//        hazardHeaderModel.idHirarki = idHirarki//        hazardHeaderModel.tglInput = tglInput//        hazardHeaderModel.nikPJ = nikPJ//        hazardHeaderModel.bukti = bukti//        hazardHeaderModel.uservalid = uservalid//        hazardHeaderModel.keparahan = keparahan//        hazardHeaderModel.fotoPJ_option = fotoPJ_option//        hazardHeaderModel.status = status//        hazardHeaderModel.namaPJ = namaPJ//        hazardHeaderModel.tgl_tenggat = tgl_tenggat//        hazardHeaderModel.idHazard = idHazard//        hazardHeaderModel.uid = uid//        hazardHeaderModel.perusahaan = perusahaan//        hazardHeaderModel.tglHazard = tgl_hazard//        hazardHeaderModel.jamHazard = jam_hazard//        hazardHeaderModel.idKemungkinan = idKemungkinan//        hazardHeaderModel.idKeparahan = idKeparahan//        hazardHeaderModel.deskripsi = deskripsi//        hazardHeaderModel.lokasi = lokasi//        hazardHeaderModel.lokasiDetail = lokasi_detail//        hazardHeaderModel.statusPerbaikan = status_perbaikan//        hazardHeaderModel.userInput = user_input//        hazardHeaderModel.timeInput = time_input//        hazardHeaderModel.option_flag = option_flag//        hazardHeaderModel.keterangan_admin = keterangan_admin//        return hazardHeaderModel//    }    private fun fetchAllRow(cursor: Cursor): HazardReport {        val idHazard = cursor.getInt(cursor.getColumnIndex("idHazard"))        val hazardHeaderModel = HazardReport()        hazardHeaderModel.idHazard = idHazard        return hazardHeaderModel    }    private fun cvHeader(item : HazardReport): ContentValues {        var cv = ContentValues()        cv.put("idHazard",item.idHazard)        cv.put("uid",item.uid)        cv.put("perusahaan",item.perusahaan)        cv.put("tgl_hazard",item.tgl_hazard)        cv.put("jam_hazard",item.jam_hazard)        cv.put("idKemungkinan",item.idKemungkinan)        cv.put("idKeparahan",item.idKeparahan)        cv.put("deskripsi",item.deskripsi)        cv.put("lokasi",item.lokasi)        cv.put("lokasi_detail",item.lokasi_detail)        cv.put("status_perbaikan",item.status_perbaikan)        cv.put("user_input",item.user_input)        cv.put("time_input",item.time_input)        cv.put("status",item.status)        return cv    }    private fun cvDetail(item : HazardReport): ContentValues {        var cv = ContentValues()        cv.put("idHazard",item.idHazard)        cv.put("uid",item.uid)        cv.put("tindakan",item.tindakan)        cv.put("namaPJ",item.namaPJ)        cv.put("nikPJ",item.nikPJ)        cv.put("fotoPJ",item.fotoPJ)        cv.put("katBahaya",item.katBahaya)        cv.put("idPengendalian",item.idPengendalian)        cv.put("tgl_selesai",item.tgl_selesai)        cv.put("jam_selesai",item.jam_selesai)        cv.put("bukti",item.bukti)        cv.put("update_bukti",item.update_bukti)        cv.put("keterangan_update",item.keterangan_update)        cv.put("idKemungkinanSesudah",item.idKemungkinanSesudah)        cv.put("idKeparahanSesudah",item.idKeparahanSesudah)        cv.put("tgl_tenggat",item.tgl_tenggat)        cv.put("fotoPJ_option",item.fotoPJ_option)        return cv    }    private fun cvValidation(item : HazardReport): ContentValues {        var cv = ContentValues()        cv.put("uid",item.uid)        cv.put("idValidation",item.idValidation)        cv.put("user_valid",item.user_valid)        cv.put("tgl_valid",item.tgl_valid)        cv.put("jam_valid",item.jam_valid)        cv.put("keterangan_admin",item.keterangan_admin)        cv.put("option_flag",item.option_flag)        return cv    }    companion object{        var header ="HAZARD_HEADER_LOCAL"        var detail ="HAZARD_DETAIL_LOCAL"        var validation ="HAZARD_VALIDATION_LOCAL"    }}