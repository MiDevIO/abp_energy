package com.misit.abpenergy.HSE.HazardReport.Activityimport android.content.Intentimport android.graphics.Colorimport android.graphics.drawable.ColorDrawableimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.view.*import android.widget.Buttonimport androidx.appcompat.app.AlertDialogimport androidx.appcompat.widget.SearchViewimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport androidx.swiperefreshlayout.widget.SwipeRefreshLayoutimport com.google.android.material.tabs.TabLayoutimport com.google.android.material.textfield.TextInputEditTextimport com.google.android.material.textfield.TextInputLayoutimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointTwoimport com.misit.abpenergy.HSE.HazardReport.Adapter.ListHazardReportAdapterimport com.misit.abpenergy.HSE.HazardReport.Response.HazardItemimport com.misit.abpenergy.HSE.HazardReport.Response.ListHazardimport com.misit.abpenergy.Login.LoginActivityimport com.misit.abpenergy.Login.Response.DaftarAkunResponseimport com.misit.abpenergy.Rimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.PopupUtilimport com.misit.abpenergy.Utils.PrefsUtilimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_hazard_h_s_e.*import kotlinx.android.synthetic.main.activity_hazard_h_s_e.btnLoadimport kotlinx.android.synthetic.main.activity_hazard_h_s_e.floatingNewHazardimport kotlinx.android.synthetic.main.activity_hazard_h_s_e.txtTglDariimport kotlinx.android.synthetic.main.activity_hazard_h_s_e.txtTglSampaiimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.asyncimport kotlinx.coroutines.launchimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport kotlin.collections.ArrayListclass HazardHSEActivity : AppCompatActivity(), ListHazardReportAdapter.OnItemClickListener, View.OnClickListener {    private var adapter: ListHazardReportAdapter? = null    private var hazardList:MutableList<HazardItem>?=null    private var hazardDisplay:MutableList<HazardItem>?=null    lateinit var swipeRefreshLayout: SwipeRefreshLayout    var dialog:AlertDialog?=null    private var page : Int=1    private var visibleItem : Int=0    private var total : Int=0    private var pastVisibleItem : Int=0    private var loading : Boolean=false    private var search:String?=null    private var disetujui:Int?=null    var curentPosition: Int=0    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_hazard_h_s_e)        search=""        title= "All Hazard Report"        val window: Window = this.window        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)        window.statusBarColor = ContextCompat.getColor(this@HazardHSEActivity, R.color.colorPrimary)        var actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN",false)){            USERNAME = PrefsUtil.getInstance().getStringState(PrefsUtil.USER_NAME,"")            RULE = PrefsUtil.getInstance().getStringState(PrefsUtil.RULE,"")        }else{            val intent = Intent(this, LoginActivity::class.java)            startActivity(intent)            finish()        }        hazardList= ArrayList()        hazardDisplay = ArrayList()        adapter = ListHazardReportAdapter(this@HazardHSEActivity, RULE,"ALL",hazardDisplay!!)        val linearLayoutManager = LinearLayoutManager(this@HazardHSEActivity)        rvHazardListHSE?.layoutManager = linearLayoutManager        rvHazardListHSE.adapter =adapter        adapter?.setListener(this)        DARI =PrefsUtil.getInstance().getStringState(PrefsUtil.AWAL_BULAN,"")        SAMPAI = PrefsUtil.getInstance().getStringState(PrefsUtil.AKHIR_BULAN,"")        TOTAL_HAZARD_USER = PrefsUtil.getInstance().getStringState(PrefsUtil.TOTAL_HAZARD_USER!!,"0")        txtTglDari.setText(DARI)        txtTglSampai.setText(SAMPAI)        swipeRefreshLayout = findViewById(R.id.pullRefreshHazard)        swipeRefreshLayout.setOnRefreshListener(object :SwipeRefreshLayout.OnRefreshListener{            override fun onRefresh() {                rvHazardListHSE.adapter = adapter                page=1                hazardList= ArrayList()                hazardDisplay?.clear()                load(page.toString(), DARI, SAMPAI,disetujui)            }        })        floatingNewHazard.setOnClickListener {            var intent = Intent(this@HazardHSEActivity, NewHazardActivity::class.java)            startActivity(intent)        }        hazardDisplay?.clear()        hazardList?.clear()        disetujui=0        load("0", DARI, SAMPAI,disetujui)        txtTglDari.setOnClickListener(this)        txtTglSampai.setOnClickListener(this)        btnLoad.setOnClickListener(this)        val tabLayout =  findViewById<View>(R.id.tabs) as TabLayout        tabLayout.addOnTabSelectedListener(object :TabLayout.OnTabSelectedListener{            override fun onTabReselected(p0: TabLayout.Tab?) {            }            override fun onTabUnselected(p0: TabLayout.Tab?) {            }            override fun onTabSelected(p0: TabLayout.Tab?) {                page=1                hazardList= ArrayList()                hazardDisplay?.clear()                if(p0!!.position==1){                    disetujui =1                    rvHazardListHSE.adapter = adapter                    load(page.toString(), DARI, SAMPAI,disetujui)                }else if(p0!!.position==0){                    disetujui=0                    rvHazardListHSE.adapter = adapter                    load(page.toString(), DARI, SAMPAI,disetujui)                }else if(p0!!.position==2){                    disetujui=2                    rvHazardListHSE.adapter = adapter                    load(page.toString(), DARI, SAMPAI,disetujui)                }else{                    disetujui=0                    rvHazardListHSE.adapter = adapter                    load(page.toString(), DARI, SAMPAI,disetujui)                }            }        })    }    override fun onCreateOptionsMenu(menu: Menu?): Boolean {        menuInflater.inflate(R.menu.menu_cari,menu)        val menuItem = menu!!.findItem(R.id.searchUser)        val searchView = menuItem.actionView as SearchView        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener{            override fun onQueryTextSubmit(query: String?): Boolean {                if (query != null) {                    Log.d("query",query)                }                return true            }            override fun onQueryTextChange(newText: String?): Boolean {                hazardDisplay?.clear()                hazardList?.clear()                if (newText != null) {                    Log.d("query",newText)                }                search=newText                load("1", DARI, SAMPAI,disetujui)                return true            }        })        return super.onCreateOptionsMenu(menu)    }    fun filter(){            hazardDisplay?.clear()            hazardList?.forEach {                Log.d("uservalid","${it!!.uservalid}")                if(it!!.uservalid==null){                    hazardDisplay?.add(it)                }            }        rvHazardListHSE.adapter!!.notifyDataSetChanged()    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }    override fun onItemClick(uid: String?) {        var intent = Intent(this@HazardHSEActivity, DetailHazardActivity::class.java)        intent.putExtra(DetailHazardActivity.UID,uid.toString())        intent.putExtra("Method","Online")        startActivity(intent)    }    override fun onUpdateClick(uid: String?) {    }    override fun onVerify(uid: String?, option: Int?) {            if(option==0){                cancelDialog(option!!,uid!!)            }else if(option==1){                doVerify(option!!,uid!!,"")            }    }    override fun deleteItem(uid: String?) {        GlobalScope.launch(Dispatchers.Main) {            var del = async { deleteHazard(uid) }            if(del.await()){                load(page.toString(), DARI, SAMPAI,disetujui)                adapter?.notifyDataSetChanged()            }        }    }    override fun rubahHazard(uid: String?) {    }    private suspend fun deleteHazard(uid: String?):Boolean {        var apiEndPoint=ApiClient.getClient(this@HazardHSEActivity)!!.create(ApiEndPointTwo::class.java)        var result =  apiEndPoint.deleteHazard(uid)        return if (result!!.isSuccessful) {            return result!!.body()!!.success!!        } else {            return false        }    }    private fun cancelDialog(option: Int?, uid: String){        var  mDialogView = LayoutInflater.from(this@HazardHSEActivity).inflate(R.layout.cancel_hazard,null)        val ketHazard = mDialogView?.findViewById<View>(R.id.ketHazard) as TextInputEditText        val tilKetHazard = mDialogView?.findViewById<View>(R.id.tilKetHazard) as TextInputLayout        val btnSimpan = mDialogView?.findViewById<View>(R.id.btnSimpan) as Button        val btnCancel = mDialogView?.findViewById<View>(R.id.btnCancel) as Button        val mBuilder = AlertDialog.Builder(this@HazardHSEActivity)        mBuilder.setView(mDialogView)        dialog =mBuilder.show()        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))        btnCancel.setOnClickListener {            dialog?.dismiss()        }        btnSimpan.setOnClickListener{            if(validate(ketHazard,tilKetHazard)){                Log.d("ABC","OK")                doVerify(option!!,uid,ketHazard.text.toString())//                dialog.dismiss()            }else{                Log.d("ABC","NO")            }        }    }    private fun validate(ket:TextInputEditText,til:TextInputLayout):Boolean{        clearError(til)        if(ket.text!!.isEmpty()){            til.error="Please Input Someting"            ket.requestFocus()            return false        }        return true    }    private fun clearError(til: TextInputLayout){        til.error=null    }    private fun doVerify(option: Int, uid: String,keterangan:String?) {        val c = this@HazardHSEActivity            var apiEndPoint=ApiClient.getClient(this@HazardHSEActivity)!!.create(ApiEndPointTwo::class.java)            var call= apiEndPoint.doVerifyHazard(option,uid, USERNAME,keterangan)            call?.enqueue(object :Callback<DaftarAkunResponse>{                override fun onResponse(                    call: Call<DaftarAkunResponse>,                    response: Response<DaftarAkunResponse>                ) {                    val r = response.body()                    if (r!=null){                        if (r.success){                            hazardList?.clear()                            hazardDisplay?.clear()//                            Toasty.success(c,r.resultLog.toString()).show()                            load(page.toString(), DARI, SAMPAI,disetujui)                            dialog?.dismiss()                        }else{//                            Toasty.error(c,r.resultLog.toString()).show()                            load(page.toString(), DARI, SAMPAI,disetujui)                            dialog?.dismiss()                        }                    }else{                        Toasty.error(c,"Gagal, Silahkan Coba Lagi!").show()                        load(page.toString(), DARI, SAMPAI,disetujui)                        dialog?.dismiss()                    }                }                override fun onFailure(call: Call<DaftarAkunResponse>, t: Throwable) {                    Log.d("VerifyError",t.toString())                    load(page.toString(), DARI, SAMPAI,disetujui)                }            })    }    override fun onClick(v: View?) {        if(v?.id==R.id.txtTglDari){            ConfigUtil.showDialogTgl(txtTglDari,this@HazardHSEActivity)        }        if(v?.id==R.id.txtTglSampai){            ConfigUtil.showDialogTgl(txtTglSampai,this@HazardHSEActivity)        }        if(v?.id==R.id.btnLoad){            hazardList!!.clear()            hazardDisplay?.clear()            var dari = txtTglDari.text.toString()            var sampai = txtTglSampai.text.toString()            load("1",dari!!,sampai!!,disetujui)            this@HazardHSEActivity?.runOnUiThread {                adapter?.notifyDataSetChanged()            }        }        if(v?.id==R.id.btnBlmSetuju){//            filter()            disetujui=0            rvHazardListHSE.adapter = adapter            page=1            hazardList= ArrayList()            hazardDisplay?.clear()            load(page.toString(), DARI, SAMPAI,disetujui)        }        if (v?.id==R.id.btnSetujuHazard){            disetujui =1            rvHazardListHSE.adapter = adapter            page=1            hazardList= ArrayList()            hazardDisplay?.clear()            load(page.toString(), DARI, SAMPAI,disetujui)        }    }    companion object{        private var NIK = "NIK"        private var RULE = "RULE"        private var USERNAME="USERNAME"        private  var DARI="01 January 2021"        private  var SAMPAI="31 January 2021"        private  var TOTAL_HAZARD_USER = "TOTAL_HAZARD_USER"    }    fun load(hal:String,dari:String,sampai:String,validasi:Int?){        swipeRefreshLayout.isRefreshing=true        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPointTwo::class.java)        val call = apiEndPoint.getListHazardHSE(dari,sampai,hal,disetujui)        call?.enqueue(object : Callback<ListHazard> {            override fun onFailure(call: Call<ListHazard>, t: Throwable) {                swipeRefreshLayout.isRefreshing=false                Toasty.error(this@HazardHSEActivity,"Error : $t", Toasty.LENGTH_SHORT).show()                PopupUtil.dismissDialog()            }            override fun onResponse(call: Call<ListHazard>, response: Response<ListHazard>) {                var listHazard = response.body()                if(listHazard!=null){                    if (listHazard.data!=null){                        PopupUtil.showProgress(this@HazardHSEActivity,"Loading...","Membuat Hazard Report!")                        loading=true                        hazardList!!.addAll(listHazard.data!!)                        hazardDisplay?.addAll(listHazard.data!!)                        adapter?.notifyDataSetChanged()                    }else{                        curentPosition = (rvHazardListHSE.layoutManager as LinearLayoutManager).findLastVisibleItemPosition()                        hazardList!!.addAll(listHazard.data!!)                        hazardDisplay?.addAll(listHazard.data!!)                        adapter?.notifyDataSetChanged()                    }                }                rvHazardListHSE.addOnScrollListener(object : RecyclerView.OnScrollListener(){                    override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {                        if (dy > 0) {                            visibleItem = recyclerView.layoutManager!!.childCount                            total = recyclerView.layoutManager!!.itemCount                            pastVisibleItem =                                (recyclerView.layoutManager as LinearLayoutManager).findFirstVisibleItemPosition()                            if (loading) {                                if ((visibleItem + pastVisibleItem) >= total) {                                    loading = false                                    page++                                    load(page.toString(), dari,sampai,validasi)                                }                            }                        }                    }                    override fun onScrollStateChanged(                        recyclerView: RecyclerView,                        newState: Int                    ) {                        super.onScrollStateChanged(recyclerView, newState)                    }                })                PopupUtil.dismissDialog()                swipeRefreshLayout.isRefreshing=false            }        })    }}