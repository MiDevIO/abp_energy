package com.misit.abpenergy.HSE.HazardReport.SQLite.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport android.util.Logimport com.misit.abpenergy.HSE.HazardReport.SQLite.Model.MetrikModelimport com.misit.abpenergy.SQLite.DbHelperimport kotlinx.coroutines.asyncimport kotlinx.coroutines.coroutineScopeclass MetrikDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<MetrikModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    companion object{        val tbItem = "metrik_resiko"    }    private fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: MetrikModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("${tbItem}",null,cv)        closeAccess()        return hasil!!    }    suspend fun getMetrik(nilai:Int): MetrikModel {        var listItem = MetrikModel()        openAccess()        coroutineScope {            val c = sqlDatabase?.rawQuery("SELECT * FROM " +                    "$tbItem WHERE max >='"+nilai+"' AND min <='"+nilai+"' " ,null)            val first = async { c?.moveToFirst() }            if(first.await()==true){                val sendItem = async { fetchRow(c!!) }                Log.d("sendItem","${sendItem.await()}")                if(sendItem.await()!=null){                    listItem = sendItem.await()                    c?.close()                    closeAccess()                }            }            Log.d("sendItem","${first.await()}")        }        return listItem    }    private fun fetchRow(cursor: Cursor): MetrikModel {        val idResiko = cursor.getInt(cursor.getColumnIndex("idResiko"))        val kodeBahaya = cursor.getString(cursor.getColumnIndex("kodeBahaya"))        val min = cursor.getInt(cursor.getColumnIndex("min"))        val max = cursor.getInt(cursor.getColumnIndex("max"))        val kategori = cursor.getString(cursor.getColumnIndex("kategori"))        val tindakan = cursor.getString(cursor.getColumnIndex("tindakan"))        val bgColor = cursor.getString(cursor.getColumnIndex("bgColor"))        val txtColor = cursor.getString(cursor.getColumnIndex("txtColor"))        val flag = cursor.getInt(cursor.getColumnIndex("flag"))        val batas = cursor.getInt(cursor.getColumnIndex("batas"))        val metrikModel = MetrikModel()        metrikModel.idResiko = idResiko        metrikModel.kodeBahaya = kodeBahaya        metrikModel.min = min        metrikModel.max = max        metrikModel.kategori = kategori        metrikModel.tindakan = tindakan        metrikModel.bgColor = bgColor        metrikModel.flag = flag        metrikModel.txtColor = txtColor        metrikModel.batas = batas        return metrikModel    }    private fun createCV(item : MetrikModel): ContentValues {        var cv = ContentValues()        cv.put("idResiko",item.idResiko)        cv.put("kodeBahaya",item.kodeBahaya)        cv.put("min",item.min)        cv.put("max",item.max)        cv.put("kategori",item.kategori)        cv.put("tindakan",item.tindakan)        cv.put("bgColor",item.bgColor)        cv.put("flag",item.flag )        cv.put("txtColor",item.txtColor)        cv.put("batas",item.batas)        return cv    }    fun deleteAll(): Boolean {        openAccess()        val hasil = sqlDatabase?.delete("${tbItem}",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }}