package com.misit.abpenergy.HSE.HazardReport.SQLite.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport android.util.Logimport com.misit.abpenergy.HSE.HazardReport.SQLite.Model.HazardDetailModelimport com.misit.abpenergy.Main.Model.KemungkinanModelimport com.misit.abpenergy.SQLite.DbHelperimport es.dmoral.toasty.Toastyclass HazardDetailDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<KemungkinanModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    private fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: HazardDetailModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("$tbItem",null,cv)        closeAccess()        return hasil!!    }    fun getItem(idHazard: String): HazardDetailModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE idHazard = ?", arrayOf(idHazard))        c?.moveToFirst()        var itemModels = HazardDetailModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    fun getAll(): ArrayList<HazardDetailModel> {        val listItem : ArrayList<HazardDetailModel> = ArrayList()        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem ",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): HazardDetailModel {        val idHazard = cursor.getInt(cursor.getColumnIndex("idHazard"))        val uid = cursor.getString(cursor.getColumnIndex("uid"))        val tindakan = cursor.getString(cursor.getColumnIndex("tindakan"))        val namaPJ = cursor.getString(cursor.getColumnIndex("namaPJ"))        val nikPJ = cursor.getString(cursor.getColumnIndex("nikPJ"))        val fotoPJ = cursor.getString(cursor.getColumnIndex("fotoPJ"))        val katBahaya = cursor.getString(cursor.getColumnIndex("katBahaya"))        val idPengendalian = cursor.getInt(cursor.getColumnIndex("idPengendalian"))        val tgl_selesai = cursor.getString(cursor.getColumnIndex("tgl_selesai"))        val jam_selesai = cursor.getString(cursor.getColumnIndex("jam_selesai"))        val bukti = cursor.getString(cursor.getColumnIndex("bukti"))        val update_bukti = cursor.getString(cursor.getColumnIndex("update_bukti"))        val keterangan_update = cursor.getString(cursor.getColumnIndex("keterangan_update"))        val idKemungkinanSesudah = cursor.getInt(cursor.getColumnIndex("idKemungkinanSesudah"))        val idKeparahanSesudah = cursor.getInt(cursor.getColumnIndex("idKeparahanSesudah"))        val tgl_tenggat = cursor.getString(cursor.getColumnIndex("tgl_tenggat"))        val fotoPJ_option = cursor.getInt(cursor.getColumnIndex("fotoPJ_option"))        val hazardDetailModel = HazardDetailModel()        hazardDetailModel.idHazard = idHazard        hazardDetailModel.uid = uid        hazardDetailModel.tindakan = tindakan        hazardDetailModel.namaPJ = namaPJ        hazardDetailModel.nikPJ = nikPJ        hazardDetailModel.fotoPJ = fotoPJ        hazardDetailModel.katBahaya = katBahaya        hazardDetailModel.idPengendalian = idPengendalian        hazardDetailModel.tgl_selesai = tgl_selesai        hazardDetailModel.jam_selesai = jam_selesai        hazardDetailModel.bukti = bukti        hazardDetailModel.update_bukti = update_bukti        hazardDetailModel.keterangan_update = keterangan_update        hazardDetailModel.idKemungkinanSesudah = idKemungkinanSesudah        hazardDetailModel.idKeparahanSesudah = idKeparahanSesudah        hazardDetailModel.tgl_tenggat = tgl_tenggat        hazardDetailModel.fotoPJ_option = fotoPJ_option        return hazardDetailModel    }    fun deleteItem(item:Int):Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem","idHazard = ? ", arrayOf(item.toString()))        if(hasil!! <0 ){            Toasty.error(c!!,"Gagal Hapus").show()            Log.d("ServiceJob","Gagal Hapus")            return false        }else{            Log.d("ServiceJob","Berhasil Hapus")//            Toasty.success(c!!,"Hapus Berhasil").show()        }        closeAccess()        return true    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun updateItem(item: HazardDetailModel, idHazard:Int):Boolean{        openAccess()        val items = ContentValues()        items.put("uid",item.uid)        items.put("tindakan",item.tindakan)        items.put("namaPJ",item.namaPJ)        items.put("nikPJ",item.nikPJ)        items.put("fotoPJ",item.fotoPJ)        items.put("katBahaya",item.katBahaya)        items.put("idPengendalian",item.idPengendalian)        items.put("tgl_selesai",item.tgl_selesai)        items.put("jam_selesai",item.jam_selesai)        items.put("bukti",item.bukti)        items.put("update_bukti",item.update_bukti)        items.put("keterangan_update",item.keterangan_update)        items.put("idKemungkinanSesudah",item.idKemungkinanSesudah)        items.put("idKeparahanSesudah",item.idKeparahanSesudah)        items.put("tgl_tenggat",item.tgl_tenggat)        items.put("fotoPJ_option",item.fotoPJ_option)        val hasil = sqlDatabase?.update("$tbItem",items,"idHazard = ?",            arrayOf("${idHazard}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : HazardDetailModel): ContentValues {        var items = ContentValues()        items.put("uid",item.uid)        items.put("tindakan",item.tindakan)        items.put("namaPJ",item.namaPJ)        items.put("nikPJ",item.nikPJ)        items.put("fotoPJ",item.fotoPJ)        items.put("katBahaya",item.katBahaya)        items.put("idPengendalian",item.idPengendalian)        items.put("tgl_selesai",item.tgl_selesai)        items.put("jam_selesai",item.jam_selesai)        items.put("bukti",item.bukti)        items.put("update_bukti",item.update_bukti)        items.put("keterangan_update",item.keterangan_update)        items.put("idKemungkinanSesudah",item.idKemungkinanSesudah)        items.put("idKeparahanSesudah",item.idKeparahanSesudah)        items.put("tgl_tenggat",item.tgl_tenggat)        items.put("fotoPJ_option",item.fotoPJ_option)        return items    }    companion object{        val tbItem = "HAZARD_DETAIL"    }}