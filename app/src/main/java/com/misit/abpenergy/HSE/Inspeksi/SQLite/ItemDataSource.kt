package com.misit.abpenergy.HSE.Inspeksi.SQLiteimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport com.misit.abpenergy.SQLite.DbHelperimport es.dmoral.toasty.Toastyclass ItemDataSource(val c:Context) {    var dbHelper :DbHelper    var sqlDatabase : SQLiteDatabase?=null    init {        dbHelper = DbHelper(c)    }    private fun openAccess(){      sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: ItemModels):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("$tbItem",null,cv)        closeAccess()        return hasil!!    }    fun getItem(uniqueId: String): ItemModels {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE UNIQUEID = ?", arrayOf(uniqueId))        c?.moveToFirst()        var itemModels = ItemModels()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    private fun fetchRow(cursor: Cursor): ItemModels {        val uniqueID = cursor.getString(cursor.getColumnIndex("UNIQUEID"))        val yes = cursor.getInt(cursor.getColumnIndex("YES"))        val no = cursor.getInt(cursor.getColumnIndex("NO"))        val total = cursor.getInt(cursor.getColumnIndex("TOTAL"))        val itemModels = ItemModels()        itemModels.UNIQUEID = uniqueID        itemModels.YES = yes        itemModels.NO = no        itemModels.TOTAL = total        return itemModels    }    fun deleteItem(item:Int){        openAccess()        val hasil = sqlDatabase?.delete("$tbItem","UNIQUEID = ? ", arrayOf(item.toString()))        if(hasil!! <0 ){            Toasty.error(c!!,"Gagal Hapus").show()        }else{            Toasty.success(c!!,"Hapus Berhasil").show()        }    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem","1",null)        if(hasil!! <0 ){            return false        }        return true    }    fun updateItem(item: ItemModels, uniqueId:String):Boolean{        openAccess()        val items = ContentValues()        items.put("YES",item.YES)        items.put("NO",item.NO)        items.put("TOTAL",item.TOTAL)        val hasil = sqlDatabase?.update("$tbItem",items,"UNIQUEID = ?", arrayOf("${uniqueId}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : ItemModels):ContentValues{        var cv =ContentValues()        cv.put("UNIQUEID",item.UNIQUEID)        cv.put("YES",item.YES)        cv.put("NO",item.NO)        cv.put("TOTAL",item.TOTAL)        return cv    }    companion object{        val tbItem = "INSPEKSI_ITEM_COUNTER"    }}