package com.misit.abpenergy.HSE.HazardReport.Activityimport android.app.Activityimport android.content.Contextimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.view.Windowimport android.view.WindowManagerimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.LinearLayoutManagerimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Main.DataSource.LokasiDataSourceimport com.misit.abpenergy.HSE.HazardReport.Adapter.LokasiAdapterimport com.misit.abpenergy.HSE.HazardReport.Response.LokasiItemimport com.misit.abpenergy.HSE.HazardReport.Response.LokasiResponseimport com.misit.abpenergy.Rimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_lokasi.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.sql.SQLExceptionclass LokasiActivity : AppCompatActivity(),    LokasiAdapter.OnItemClickListener {    private var adapter: LokasiAdapter? = null    private var lokasiList:MutableList<LokasiItem>?=null    private var lokasiDipilih:String?=null    private var call: Call<LokasiResponse>?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_lokasi)        title="Pilih Lokasi Bahaya"        val window: Window = this.window        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)        window.statusBarColor = ContextCompat.getColor(this, R.color.colorPrimary)        lokasiList = ArrayList()        lokasiDipilih = intent.getStringExtra("lokasiDipilih")        var actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        adapter = LokasiAdapter(            this,            lokasiDipilih,            lokasiList!!        )        val linearLayoutManager = LinearLayoutManager(this@LokasiActivity)        rvLokasi?.layoutManager = linearLayoutManager        rvLokasi.adapter =adapter        adapter?.setListener(this)//        loadData()        lokasiSQL(this@LokasiActivity)    }    private fun loadData() {        val apiEndPoint = ApiClient.getClient(this@LokasiActivity)!!.create(ApiEndPoint::class.java)        call = apiEndPoint.getLokasiList()        call?.enqueue(object : Callback<LokasiResponse?> {            override fun onFailure(call: Call<LokasiResponse?>, t: Throwable) {                Toasty.error(this@LokasiActivity,"Error : "+ t).show()            }            override fun onResponse(                call: Call<LokasiResponse?>,                response: Response<LokasiResponse?>            ) {                var lokasiRes= response.body()                if(lokasiRes!=null){                    Log.d("LOKASI_LOG",lokasiRes.toString())                    if(lokasiRes.lokasi!=null){                        lokasiList?.addAll(lokasiRes.lokasi!!)                        adapter?.notifyDataSetChanged()                    }                }            }        })    }    override fun onItemClick(idLokasi: String?, lokasi: String?) {        val intent = Intent()        intent.putExtra("lokasiID",idLokasi)        intent.putExtra("lokasiDipilih",lokasi)        setResult(Activity.RESULT_OK,intent)        finish()    }    override fun onNavigateUp(): Boolean {        onBackPressed()        return super.onNavigateUp()    }    private fun lokasiSQL(c: Context){        val lokasiDataSource =            LokasiDataSource(c)        try {            val lokasiRow=lokasiDataSource.getAll()            lokasiRow.forEach{                Log.d("KemungkinanSQL",lokasiRow.toString())                lokasiList?.add(LokasiItem(it.tglInput,it.userInput,it.lokasi,it.idLok))                adapter?.notifyDataSetChanged()            }        }catch (e: SQLException){            Log.d("KemungkinanSQL",e.toString())        }    }}