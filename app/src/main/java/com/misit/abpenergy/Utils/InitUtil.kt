package com.misit.abpenergy.Utilsimport android.content.Contextimport android.content.Intentimport android.content.pm.PackageInfoimport android.content.pm.PackageManagerimport android.util.Logimport android.widget.Toastimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.google.android.gms.tasks.OnCompleteListenerimport com.google.firebase.messaging.FirebaseMessagingimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Api.ApiEndPointTwoimport com.misit.abpenergy.Main.DataSource.*import com.misit.abpenergy.HSE.HazardReport.SQLite.DataSource.*import com.misit.abpenergy.HSE.HazardReport.SQLite.Model.*import com.misit.abpenergy.Main.Model.*import com.misit.abpenergy.HGE.Sarpras.SQLite.DataSource.PenumpangDataSourceimport com.misit.abpenergy.HGE.Sarpras.SQLite.Model.PenumpangModelimport com.misit.abpenergy.HGE.Sarpras.SaranaResponse.PenumpangListModelimport kotlinx.coroutines.*import java.io.Fileclass InitUtil(c:Context) {    private var dataUserDatasource: DataUsersSource?=null    private var penumpangDataSource: PenumpangDataSource?=null    private var penumpangModel:ArrayList<PenumpangListModel>?=null    var listKaryawan : ArrayList<KaryawanModel>? = null    var kemungkinanDatasource: KemungkinanDataSource    var keparahanDatasource: KeparahanDataSource    var perusahaanDataSource: PerusahaanDataSource    var lokasiDatasource: LokasiDataSource    var riskDataSource: RiskDataSource    var pengendalianDataSource: PengendalianDataSource    var usersDataSource: UsersDataSource    var metrikDataSource:MetrikDataSource    var detHirarkiDataSource:DetHirarkiDataSource    var detKeparahanDataSource:DetKeparahanDataSource    private var android_token : String?=""    var d :ArrayList<PenumpangModel>?=null    init {        PrefsUtil.initInstance(c)        penumpangDataSource = PenumpangDataSource(c)        dataUserDatasource = DataUsersSource(c)        kemungkinanDatasource = KemungkinanDataSource(c)        keparahanDatasource = KeparahanDataSource(c)        perusahaanDataSource = PerusahaanDataSource(c)        lokasiDatasource = LokasiDataSource(c)        riskDataSource = RiskDataSource(c)        pengendalianDataSource = PengendalianDataSource(c)        metrikDataSource=MetrikDataSource(c)        usersDataSource = UsersDataSource(c)        detHirarkiDataSource = DetHirarkiDataSource(c)        detKeparahanDataSource = DetKeparahanDataSource(c)        penumpangModel = ArrayList()        listKaryawan = ArrayList()        listKaryawan = ArrayList()        d = ArrayList()    }    fun loadUsers(name: String,msg: String,c: Context,username:String?){        GlobalScope.launch(Dispatchers.IO) {                try {                    val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPoint::class.java)                    val response = apiEndPoint?.dataUserCorutine(username)                    if(response!=null){                        val usersModel = DataUsersModel()                        if(response.isSuccessful) {                            var res = response.body()                            if (res != null) {                                if (res.dataUser != null) {                                    val dt = res.dataUser                                    val cekUser = async { dataUserDatasource!!.cekUser("${dt!!.username}","${dt!!.user_update}") }                                    Log.d("UserUpdate","${cekUser.await()}")                                    if(res.dataHazard!=null){ PrefsUtil.getInstance().setNumberState("dataHazard",res.dataHazard!!.toInt()) } else { PrefsUtil.getInstance().setNumberState("dataHazard",0) }                                    if(res.datInspeksi!=null){ PrefsUtil.getInstance().setNumberState("dataInspeksi",res.datInspeksi!!.toInt()) } else { PrefsUtil.getInstance().setNumberState("dataInspeksi",0) }                                    if(cekUser.await()<1) {                                        dataUserDatasource?.deleteItem(dt!!.username!!)                                        usersModel.compString = 0                                        usersModel.department = dt?.department                                        usersModel.dept = dt?.dept                                        usersModel.email = dt?.email                                        usersModel.flag = dt?.flag                                        usersModel.id_dept = dt?.idDept                                        usersModel.id_perusahaan = dt?.idPerusahaan                                        usersModel.nama_lengkap = dt?.namaLengkap                                        usersModel.id_sect = dt?.idSect                                        usersModel.id_session = dt?.idSession                                        usersModel.id = dt?.id!!                                        usersModel.id_user = dt?.idUser                                        usersModel.level = dt?.level                                        usersModel.nama_perusahaan = dt?.namaPerusahaan                                        usersModel.nik = dt?.nik                                        usersModel.password = dt?.password                                        usersModel.perusahaan = dt?.perusahaan                                        usersModel.photo_profile = dt?.photoProfile                                        usersModel.rule = dt?.rule                                        usersModel.sect = dt?.sect                                        usersModel.section = dt?.section                                        usersModel.status = dt?.status                                        usersModel.tglentry = dt?.tglentry                                        usersModel.time_in = dt?.timeIn                                        usersModel.timelog = dt?.timelog                                        usersModel.ttd = dt?.ttd                                        usersModel.user_entry = dt?.userEntry                                        usersModel.username = dt.username                                        usersModel.dataHazard = 0                                        usersModel.dataInspeksi = 0                                        usersModel.user_update = dt.user_update                                        if (dt.photoProfile != null) {                                            usersModel.offline_profile = "${dt.nik!!}.jpg"                                        }                                        val def = async {                                            val result = dataUserDatasource?.insertItem(usersModel)                                            if(result!! >=0){//                                            sendMessageToActivity(name,msg,c)                                                Log.d("UserUpdate","DONE 99")                                                corutineSarana(c,name,msg)                                            }else{                                                Log.d("UserUpdate","Not Done 99")                                                loadUsers(name,msg,c,username)                                            }                                        }                                        def.await()                                    }else{                                        Log.d("UserUpdate","DONE 99")                                        corutineSarana(c,name,msg)                                    }                                }                            }                        }                    }                }catch (e: Exception){//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                    Toasty.info(c,"${e.message}")                    sendMessageToActivity(name,msg,c)                }        }    }    suspend fun corutineSarana(c:Context,name: String,msg: String){        try {            GlobalScope.launch(Dispatchers.IO){                    var i = 1                    var len =0                    val def = async {                        try{                            listKaryawan?.clear()                            val apiEndPoint = ApiClient.getClient(c)!!.create(ApiEndPoint::class.java)                            val response = apiEndPoint.corutineAllSarana()                            if (response.isSuccessful) {                                val r = response.body()?.karyawan                                Log.d("UserUpdate","${r} 99")                                r.let {                                    if(it!=null){                                        len = r?.size!!                                        r?.forEach {                                            val cekUser = async {  penumpangDataSource!!.cekUser("${it.nik}","${penumpangDataSource}")}                                            if(cekUser.await()<1) {                                                penumpangDataSource!!.deleteItem("${it.nik}")                                                penumpangModel?.add(                                                PenumpangListModel(                                                    i.toLong(),                                                    it!!.nik!!,                                                    it!!.nama!!,                                                    it!!.jabatan!!,                                                    it!!.dt_update                                                )                                            )                                            }                                            i++                                        }                                        PrefsUtil.getInstance()                                            .setStringState(                                                PrefsUtil.AWAL_BULAN,                                                response.body()?.awalBulan                                            )                                        PrefsUtil.getInstance()                                            .setStringState(                                                PrefsUtil.AKHIR_BULAN,                                                response.body()?.akhirBulan                                            )                                    }                                }                            } else {                                false                            }                            if (i >= len) {                                Log.d("a","a")                              async { copyPenumpang(penumpangModel!!,c,name,msg) }.await()                                    true                            } else {                                false                            }                        }catch (e: Exception){                            Log.d("Error Corotine","${e.printStackTrace()}")                            false                        }                    }                    if(!def.await()){                      corutineSarana(c,name,msg)                    }                }        }catch (e:Exception){            Log.d("Error Corotine","${e.printStackTrace()}")            sendMessageToActivity(name,msg,c)        }    }    suspend private fun copyPenumpang(penumpang: ArrayList<PenumpangListModel>,c:Context,name: String,msg: String){        Log.d("a","b")        d?.clear()        GlobalScope.launch(Dispatchers.IO){            Log.d("a","c")            async {                Log.d("a","d")                penumpangDataSource?.openAccess()                penumpang.forEach {                    var p = PenumpangModel()                    p.id = it.id                    p.nik = it.nik                    p.nama = it.nama                    p.jabatan = it.jabatan                    p.penumpang_update = it.penumpang_update                    d?.add(p)                }                Log.d("dataPenumpang","e ${d}")            }.await()            var a = async { penumpangDataSource?.insertItem(d!!) }.await()            if(a!! > 0){                Log.d("a","f")                penumpangDataSource?.closeAccess()                loadKemungkinan(c,name,msg)            }        }    }    private suspend fun loadKemungkinan(c: Context,name:String,msg: String) {        try{            var i = 1            var len = 0            val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPoint::class.java)            var kemungkinanModel = KemungkinanModel()            CoroutineScope(Dispatchers.IO).launch {                val deferred = async {                    val response = apiEndPoint?.kemungkinanCorutine()                    if (response != null) {                        if (response.isSuccessful) {                            val kemungkinanRes = response.body()?.kemungkinan                            len = kemungkinanRes?.size ?: 0                            if (kemungkinanRes != null) {                                kemungkinanRes.forEach {                                    var cekData = async { kemungkinanDatasource.cekData("${it.idKemungkinan}","${it.kemungkinan_update}") }                                    if(cekData.await()<1){                                        kemungkinanDatasource.deleteItem(it.idKemungkinan!!)                                        kemungkinanModel.idKemungkinan = it.idKemungkinan                                        kemungkinanModel.kemungkinan = it.kemungkinan                                        kemungkinanModel.flag = it.flag                                        kemungkinanModel.nilai = it.nilai                                        kemungkinanModel.kemungkinan_update = it.kemungkinan_update                                        kemungkinanModel.keterangan = it.keterangan                                        if (kemungkinanDatasource.insertItem(kemungkinanModel) > 0) {                                            i++                                        }                                    }else{                                        i++                                    }                                }                            }                        }                    }                    if (i >= len) {                        true                    } else {                        false                    }                }                val res = deferred.await()                if (res) {                    loadKeparahan(c, name, msg)                } else {                    loadKemungkinan(c, name, msg)                }            }        }catch (e: Exception){//                    loadUsers(name,msg,c,username)            Log.d("Error Corotine","${e.printStackTrace()}")//            Toasty.info(c,"${e.message}")            sendMessageToActivity(name,msg,c)        }    }    private suspend fun loadKeparahan(c: Context,name:String,msg: String) {        var i = 1        var len =0        CoroutineScope(Dispatchers.IO).launch {            val deleted = async {                keparahanDatasource.deleteAll()            }            if(deleted.await()){                try{                    val deferred = async {                    val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPoint::class.java)                    var keparahanModel = KeparahanModel()                        async {                            val response = apiEndPoint?.keparahanCorutine()                            if (response != null) {                                if (response!!.isSuccessful) {                                    val keparahanRes = response.body()?.keparahan                                    if (keparahanRes != null) {                                        len = keparahanRes?.size ?: 0                                        async {                                            keparahanRes.forEach {                                                keparahanModel.idKeparahan = it.idKeparahan                                                keparahanModel.keparahan = it.keparahan                                                keparahanModel.flag = it.flag                                                keparahanModel.nilai = it.nilai                                                keparahanDatasource.insertItem(keparahanModel)                                                Log.d("Keparahan","$i")                                                i++                                            }                                        }.await()                                    }                                }                            }                        }.await()                        if (i >= len) {                            true                        } else {                            false                        }                    }                    if(deferred.await()){                        loadPerusahaan(c,name,msg)                    }else{                        loadKeparahan(c,name,msg)                    }                }catch (e: Exception){//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                        Toasty.info(c,"${e.message}")                    sendMessageToActivity(name,msg,c)                }            }        }    }    private suspend fun loadPerusahaan(c: Context,name:String,msg: String) {        var i = 1        var len =0        CoroutineScope(Dispatchers.IO).launch {            val deleted = async { perusahaanDataSource.deleteAll() }            if(deleted.await()){                try{                    val deferred =async {                        val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPointTwo::class.java)                        var perusahaanModel = PerusahaanModel()                        val response = apiEndPoint?.perusahaanCorutine()                        if (response != null) {                            if (response.isSuccessful) {                                val perusahaanRes = response.body()?.company                                if (perusahaanRes != null) {                                    len = perusahaanRes?.size ?: 0                                    perusahaanRes.forEach {                                        perusahaanModel.idPerusahaan = it.idPerusahaan                                        perusahaanModel.namaPerusahaan = it.namaPerusahaan                                        perusahaanModel.flag = it.flag                                        perusahaanModel.timeIn = it.timeIn                                        perusahaanDataSource.insertItem(perusahaanModel)                                        i++                                    }                                }                            }                        }                        if (i >= len) {                            true                        } else {                            false                        }                }                if(deferred.await()){                    loadLokasi(c,name,msg)                }else{                    loadPerusahaan(c,name,msg)                }                }catch (e: Exception){//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                        Toasty.info(c,"${e.message}")                    sendMessageToActivity(name,msg,c)                }            }        }    }    suspend private fun loadLokasi(c: Context,name:String,msg: String) {        var i = 1        var len =0        CoroutineScope(Dispatchers.IO).launch {            val deleted = async {                 lokasiDatasource.deleteAll()            }            if(deleted.await()){                try{                    val deferred = async {                        val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPoint::class.java)                        var lokasiModel = LokasiModel()                        val response = apiEndPoint?.lokasiCorutine()                        if (response != null) {                            if (response.isSuccessful) {                                val lokasiRes = response.body()?.lokasi                                len = lokasiRes?.size ?: 0                                if (lokasiRes != null) {                                    lokasiRes.forEach {                                        lokasiModel.idLok = it.idLok                                        lokasiModel.lokasi = it.lokasi                                        lokasiModel.userInput = it.userInput                                        lokasiModel.tglInput = it.tglInput                                        lokasiDatasource.insertItem(lokasiModel)                                        i++                                    }                                }                            }                        }                        if (i >= len) {                            true                        } else {                            false                        }                }.await()                if(deferred){                    loadPengendalian(c,name,msg)                }else{                    loadLokasi(c,name,msg)                }                }catch (e: Exception){//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                        Toasty.info(c,"${e.message}")                    sendMessageToActivity(name,msg,c)                }            }        }    }    suspend private fun loadPengendalian(c: Context,name:String,msg: String) {        var i = 1        var len =0        CoroutineScope(Dispatchers.IO).launch {            val deleted =async { pengendalianDataSource.deleteAll() }.await()            if(deleted){                try{                    val deferred = async {                        val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPoint::class.java)                        var pengendalianModel =                            PengendalianModel()                        val response = apiEndPoint?.hirarkiCorutine()                        if (response != null) {                            if (response.isSuccessful) {                                val lokasiRes = response.body()?.hirarki                                if (lokasiRes != null) {                                    lokasiRes.forEach {                                        pengendalianModel.idHirarki = it.idHirarki                                        pengendalianModel.namaPengendalian = it.namaPengendalian                                        pengendalianModel.userInput = it.userInput                                        pengendalianModel.tglInput = it.tglInput                                        pengendalianModel.flag = it.flag                                        pengendalianDataSource.insertItem(pengendalianModel)                                        i++                                    }                                }                            }                        }                        if (i >= len) {                            true                        } else {                            false                        }                }.await()                if(deferred){                    loadRisk(c,name,msg)                }else{                    loadPengendalian(c,name,msg)                }                }catch (e: Exception){//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                        Toasty.info(c,"${e.message}")                    sendMessageToActivity(name,msg,c)                }            }        }    }    suspend private fun loadRisk(c: Context,name:String,msg: String) {        var i = 1        var len =0        CoroutineScope(Dispatchers.IO).launch {                val deleted = async {                riskDataSource.deleteAll()            }.await()            if(deleted){                try{                    val deferred = async {                        val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPoint::class.java)                        var riskModel =                            RiskModel()                        val response = apiEndPoint?.riskCorutine()                        if (response != null) {                            if (response.isSuccessful) {                                val riskRes = response.body()?.risk                                len = riskRes?.size ?: 0                                if (riskRes != null) {                                    riskRes.forEach {                                        riskModel.idRisk = it.idRisk                                        riskModel.bgColor = it.bgColor                                        riskModel.txtColor = it.txtColor                                        riskModel.risk = it.risk                                        riskModel.descRisk = it.descRisk                                        riskModel.userInput = it.userInput                                        riskModel.tglInput = it.tglInput                                        riskDataSource.insertItem(riskModel)                                        i++                                    }                                }                            }                        }                        if (i >= len) {                            true                        } else {                            false                        }                }.await()                if(deferred){//                    sendMessageToActivity(name,msg,c)                    loadAllUsers(c,name,msg)                }else{                    loadRisk(c,name,msg)                }                Log.d("loadRisk","${deferred}")                }catch (e: Exception){//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                        Toasty.info(c,"${e.message}")                    sendMessageToActivity(name,msg,c)                }            }        }    }    suspend fun deleteImage(c: Context,name:String,msg: String){        CoroutineScope(Dispatchers.IO).launch {            val imgDel = async {                ConfigUtil.deleteInABPIMAGES(c,"PROFILE_IMAGE")            }.await()            if(imgDel){                loadAllUsers(c,name,msg)            }else{                deleteImage(c,name,msg)            }        }    }    suspend private fun loadAllUsers(c: Context, name: String, msg: String) {        var i = 1        var len =0        Log.d("DownloadResult", "loadAllUsers")        CoroutineScope(Dispatchers.IO).launch {            Log.d("DownloadResult", "CoroutineScope")            try {                Log.d("DownloadResult", "CoroutineScope try")                val insert = async {                    Log.d("DownloadResult", "insert")                    usersDataSource.openAccess()                        val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPointTwo::class.java)                        var usersModel = UsersModel()                        val response = apiEndPoint?.userAllCorutine()                        if (response != null) {                            Log.d("DownloadResult", "response")                            if (response.isSuccessful) {                                Log.d("DownloadResult", "isSuccessful")                                val listUserAll = response.body()?.usersList                                if (listUserAll != null) {                                    Log.d("DownloadResult", "listUserAll")                                    len = listUserAll?.size ?: 0                                    listUserAll.forEach {                                        Log.d("DownloadResult", "listUserAll forEach")                                        val cekUser = async { usersDataSource.cekUser("${it.idUser}","${it.user_update}") }                                        Log.d("UserUpdate","${cekUser.await()}")                                        if(cekUser.await()<1){                                            Log.d("DownloadResult", "ekUser.await() ${cekUser.await()}")                                            usersDataSource.deleteItem("${it.idUser}")                                            if (it.photoProfile != null) {                                                Log.d("DownloadResult", "Download Initial photoProfile")                                                ConfigUtil.downloadImage(                                                    c,                                                    it.photoProfile!!,                                                    it.nik!!,                                                    "PROFILE_IMAGE"                                                )                                                usersModel.offlinePhoto = "${it.nik!!}.jpg"                                            } else {                                                Log.d("DownloadResult", "Profile Image Null")                                                usersModel.offlinePhoto = null                                            }                                            Log.d("UsersList", "${it.nik} = ${it.photoProfile}")                                            usersModel.tglentry = it.tglentry                                            usersModel.level = it.level                                            usersModel.ttd = it.ttd                                            usersModel.photoProfile = it.photoProfile                                            usersModel.namaLengkap = it.namaLengkap                                            usersModel.idSession = it.idSession                                            usersModel.rule = it.rule                                            usersModel.perusahaan = it.perusahaan                                            usersModel.section = it.section                                            usersModel.namaPerusahaan = it.namaPerusahaan                                            usersModel.idUser = it.idUser                                            usersModel.dept = it.dept                                            usersModel.nik = it.nik                                            usersModel.password = it.password                                            usersModel.sect = it.sect                                            usersModel.department = it.department                                            usersModel.email = it.email                                            usersModel.username = it.username                                            usersModel.status = it.status                                            usersModel.user_update = it.user_update                                            usersDataSource.insertItem(usersModel)                                        }else{                                            Log.d("DownloadResult", "Cek File In Dir")                                            var dir = File(c.getExternalFilesDir(null), "PROFILE_IMAGE")                                            var fileInDir = File(dir,"${it.nik!!}.jpg")                                            if(fileInDir.exists()){                                                Log.d("DownloadResult", "File ${it.nik!!}.jpg Ada")                                            }else{                                                Log.d("DownloadResult", "File ${it.nik!!}.jpg Tidak Ada")                                                  if (it.photoProfile != null) {                                                      Log.d("DownloadResult", "photoProfile ${it.photoProfile}")                                                      ConfigUtil.downloadImage(                                                          c,                                                          it.photoProfile!!,                                                          it.nik!!,                                                          "PROFILE_IMAGE"                                                      )                                                  }else{                                                      Log.d("DownloadResult", "photoProfile ${it.photoProfile}")                                                  }                                            }                                        }                                        i++                                    }                                }                            }                        }                        if (i >= len) {                            Log.d("DownloadResult", "${i} = ${len}")                            true                        } else {                            false                        }                }.await()                if(insert){                    usersDataSource.closeAccess()                    metrik_resiko(c,name,msg)                }else{                    loadAllUsers(c,name,msg)                }                }catch (e: Exception){//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                        Toasty.info(c,"${e.message}")                    sendMessageToActivity(name,msg,c)                }        }    }    suspend fun metrik_resiko(c: Context, name: String, msg: String){        var i = 1        var len =0        var metrikModel = MetrikModel()        CoroutineScope(Dispatchers.IO).launch {            val deferred = async {                metrikDataSource.deleteAll()            }            if(deferred.await()){                try {                    val insert = async {                        val apiEndPoint =                            ApiClient.getClient(c)?.create(ApiEndPointTwo::class.java)                        val response = apiEndPoint?.corotineMatrikResiko()                        if (response != null) {                            if (response.isSuccessful) {                                val metrik = response.body()                                if (metrik != null) {                                    var listMetrik = metrik.metrikResiko                                    if (listMetrik != null) {                                        len = listMetrik.size ?: 0                                        listMetrik.forEach {                                            metrikModel.idResiko = it?.idResiko                                            metrikModel.kodeBahaya = it?.kodeBahaya                                            metrikModel.min = it?.min                                            metrikModel.max = it?.max                                            metrikModel.kategori = it?.kategori                                            metrikModel.tindakan = it?.tindakan                                            metrikModel.bgColor = it?.bgColor                                            metrikModel.txtColor = it?.txtColor                                            metrikModel.flag = it?.flag                                            metrikModel.batas = it?.batas                                            metrikDataSource.insertItem(metrikModel)                                            i++                                        }                                    }                                }                            }                        }                        if (i >= len) {                            true                        } else {                            false                        }                    }                    if(insert.await()){                        detHirarki(c,name,msg)//                        sendMessageToActivity(name,msg,c)                    }else{                        metrik_resiko(c,name,msg)                    }                }catch (e: Exception){                    detHirarki(c,name,msg)//                        sendMessageToActivity(name,msg,c)//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                        Toasty.info(c,"${e.message}")                }            }        }    }    suspend fun detHirarki(c: Context, name: String, msg: String){        var i = 1        var len =0        var detHirarki = DetHirarki()        CoroutineScope(Dispatchers.IO).launch {            val deferred = async {                detHirarkiDataSource.deleteAll()            }            if(deferred.await()){                try {                    val insert = async {                        val apiEndPoint =                            ApiClient.getClient(c)?.create(ApiEndPoint::class.java)                        val response = apiEndPoint?.detHirarkiCorutine()                        if (response != null) {                            if (response.isSuccessful) {                                val result = response.body()                                if (result != null) {                                    var listHirarki = result.detHirarki                                    if (listHirarki != null) {                                        len = listHirarki.size ?: 0                                        listHirarki.forEach {                                            detHirarki.id_hirarki = it?.idHirarki.toString()                                            detHirarki.keterangan = it?.keterangan                                            detHirarki.ket_input = it?.ketInput                                            detHirarki.time_input = it?.timeInput                                            detHirarkiDataSource.insertItem(detHirarki)                                            i++                                        }                                    }                                }                            }                        }                        if (i >= len) {                            true                        } else {                            false                        }                    }                    if(insert.await()){                        deKeparahan(c,name,msg)//                        sendMessageToActivity(name,msg,c)                    }else{                        detHirarki(c,name,msg)                    }                }catch (e: Exception){                    deKeparahan(c,name,msg)//                        sendMessageToActivity(name,msg,c)//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                        Toasty.info(c,"${e.message}")                }            }        }    }    suspend fun deKeparahan(c: Context, name: String, msg: String){        var i = 1        var len =0        var detKeparahan = DetKeparahan()        CoroutineScope(Dispatchers.IO).launch {            val deferred = async {                detKeparahanDataSource.deleteAll()            }            if(deferred.await()){                try {                    val insert = async {                        val apiEndPoint =                            ApiClient.getClient(c)?.create(ApiEndPoint::class.java)                        val response = apiEndPoint?.detKeparahanCorutine()                        if (response != null) {                            if (response.isSuccessful) {                                val result = response.body()                                if (result != null) {                                    var listHirarki = result.detKeparahan                                    if (listHirarki != null) {                                        len = listHirarki.size ?: 0                                        listHirarki.forEach {                                            detKeparahan.idKeparahan = it?.idKeparahan.toString()                                            detKeparahan.keterangan = it?.keterangan                                            detKeparahan.ket_input = it?.ketInput                                            detKeparahan.time_input = it?.timeInput                                            detKeparahanDataSource.insertItem(detKeparahan)                                            i++                                        }                                    }                                }                            }                        }                        if (i >= len) {                            true                        } else {                            false                        }                    }                    if(insert.await()){                        androidToken(name,msg,c)//                        sendMessageToActivity(name,msg,c)                    }else{                        deKeparahan(c,name,msg)                    }                }catch (e: Exception){                    androidToken(name,msg,c)//                        sendMessageToActivity(name,msg,c)//                    loadUsers(name,msg,c,username)                    Log.d("Error Corotine","${e.printStackTrace()}")//                        Toasty.info(c,"${e.message}")                }            }        }    }    fun androidToken(name:String,msg: String,c: Context){        FirebaseMessaging.getInstance().isAutoInitEnabled = true        FirebaseMessaging.getInstance().token            .addOnCompleteListener(OnCompleteListener { task ->                if (!task.isSuccessful) {                    Toast.makeText(c,"Error : $task.exception", Toast.LENGTH_SHORT).show()                    return@OnCompleteListener                }                // Get new Instance ID token                if(task.result!=null){                    android_token = task.result                    GlobalScope.launch(Dispatchers.IO) { updateToken(name,msg,c,task.result) }                }else{                    androidToken(name,msg,c)                }            })    }    private suspend fun updateToken(name: String, msg: String, c: Context, token:String){        var nik:String?=null        if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN",false)){           nik = PrefsUtil.getInstance().getStringState(PrefsUtil.NIK,null)       }        if(nik!=null){            try {                val pInfo: PackageInfo = c.getPackageManager().getPackageInfo(c.packageName, 0)                val apiEndPoint = ApiClient.getClient(c)!!.create(ApiEndPointTwo::class.java)                val response = apiEndPoint?.updatePhoneToken(nik,token, pInfo.versionName,"abpsystem","")                if (response != null) {                    if(response.isSuccessful){                        var res = response.body()                        Log.d("UpdateToken","${res!!.success}")                        if (res!=null){                            if(res.success!=null){                                if (res.success!!){                                    sendMessageToActivity(name,msg,c)                                }else{                                    sendMessageToActivity(name,msg,c)                                }                            }else{                                sendMessageToActivity(name,msg,c)                            }                        }else{                            sendMessageToActivity(name,msg,c)                        }                    }else{                        sendMessageToActivity(name,msg,c)                    }                }else{                    sendMessageToActivity(name,msg,c)                }            } catch (e: PackageManager.NameNotFoundException) {                Log.d("AppVersion","${e.message}")                sendMessageToActivity(name,msg,c)            }        }else{            Log.d("AppVersion","${nik}")            sendMessageToActivity(name,msg,c)        }    }    companion object{        var USERNAME ="USERNAME"    }    private fun sendMessageToActivity(name: String,msg: String,c: Context) {        val intent = Intent()        intent.action = "com.misit.abpenergy"        intent.putExtra(name, msg)        LocalBroadcastManager.getInstance(c).sendBroadcast(intent)    }}