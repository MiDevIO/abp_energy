package com.misit.abpenergy.Loginimport android.content.Contextimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.widget.Toastimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Api.ApiEndPointTwoimport com.misit.abpenergy.Login.Response.DaftarAkunResponseimport com.misit.abpenergy.Login.Response.DataProfileResponseimport com.misit.abpenergy.Rimport com.misit.abpenergy.Rkb.Response.CsrfTokenResponseimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_ubah_data.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass UbahDataActivity : AppCompatActivity() {    private var username:String?=null    private var csrf_token : String?=""    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_ubah_data)        val actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        title = "Update Data"        username = intent.getStringExtra("USERNAME")        loadUser(username!!,this@UbahDataActivity)    }    private fun loadUser(username: String,c:Context) {        val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPointTwo::class.java)        val call = apiEndPoint?.updateProfile(username)        call?.enqueue(object:Callback<DataProfileResponse>{            override fun onResponse(                call: Call<DataProfileResponse>,                response: Response<DataProfileResponse>            ) {                val r = response.body()                if(r!=null){                    if(r.profile!=null){                        val profile = r.profile                        inUsername.setText(profile.username)                        inNik.setText(profile.nik)                        inNamaLengkap.setText(profile.namaLengkap)                        inEmail.setText(profile.email)                        inPerusahaan.setText(profile.namaPerusahaan)                        inDept.setText(profile.dept)                        inDevisi.setText(profile.sect)                    }                }            }            override fun onFailure(call: Call<DataProfileResponse>, t: Throwable) {                Log.d("ErrorDataProfile",t.toString())            }        })    }    fun simpanData(c:Context,nik:String,nama:String,email:String,perusahaan:String,dept:String,devisi:String){        if(!isValidatedAll()){            return        }        val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPointTwo::class.java)        val call = apiEndPoint?.simpanDataProfile(nik,nama,email,perusahaan,dept,devisi,csrf_token)        call?.enqueue(object:Callback<DaftarAkunResponse>{            override fun onResponse(                call: Call<DaftarAkunResponse>,                response: Response<DaftarAkunResponse>            ) {                val r = response.body()                if(r!=null){                    if(r.success){                        Toasty.success(c,"Update Data Berhasil").show()                        finish()                    }else{                        Toasty.error(c,"Update Data Gagal").show()                    }                }            }            override fun onFailure(call: Call<DaftarAkunResponse>, t: Throwable) {                Log.d("ErrorSimpanProfile",t.toString())            }        })    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }    private fun isValidatedAll()  :Boolean {        clearError()        if(inNik.text!!.isEmpty()){            tilNik.error = "Please Input Someting"            inNik.requestFocus()        }        if(inNamaLengkap.text!!.isEmpty()){            tilNamaLengkap.error = "Please Input Someting"            inNamaLengkap.requestFocus()        }        if(inEmail.text!!.isEmpty()){            tilEmail.error = "Please Input Someting"            inEmail.requestFocus()        }        if(inPerusahaan.text!!.isEmpty()){            tilPerusahaan.error = "Please Input Someting"            inPerusahaan.requestFocus()        }        if(inDept.text!!.isEmpty()){            tilDept.error = "Please Input Someting"            inDept.requestFocus()        }        if(inDevisi.text!!.isEmpty()){            tilDevisi.error = "Please Input Someting"            inDevisi.requestFocus()        }        return true    }    private fun clearError() {        tilNik.error = null        tilNamaLengkap.error = null        tilEmail.error = null        tilPerusahaan.error = null        tilDept.error = null        tilDevisi.error = null    }    fun getToken(context: Context) {        val apiEndPoint = ApiClient.getClient(context)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getToken("csrf_token")        call?.enqueue(object : Callback<CsrfTokenResponse> {            override fun onFailure(call: Call<CsrfTokenResponse>, t: Throwable) {                Toast.makeText(context, "Error : $t", Toast.LENGTH_SHORT).show()                csrf_token=null            }            override fun onResponse(                call: Call<CsrfTokenResponse>,                response: Response<CsrfTokenResponse>            ) {                csrf_token= response.body()?.csrfToken            }        })    }}