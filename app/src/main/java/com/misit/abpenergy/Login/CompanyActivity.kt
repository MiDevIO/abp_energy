package com.misit.abpenergy.Loginimport android.app.Activityimport android.content.Contextimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.view.Windowimport android.view.WindowManagerimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.LinearLayoutManagerimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointTwoimport com.misit.abpenergy.Login.Adapter.CompanyAdapaterimport com.misit.abpenergy.Login.Response.CompanyItemimport com.misit.abpenergy.Login.Response.CompanyResponseimport com.misit.abpenergy.Main.DataSource.PerusahaanDataSourceimport com.misit.abpenergy.Rimport com.misit.abpenergy.Utils.PopupUtilimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_company.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.sql.SQLExceptionclass CompanyActivity : AppCompatActivity(),CompanyAdapater.OnItemClickListener {    private var adapter: CompanyAdapater? = null    private var companyList:MutableList<CompanyItem>?=null    private var idCompany:String?=null    private var companyDipilih:String?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_company)        title= "Perusahaan"        companyDipilih = intent.getStringExtra("companyDipilih")        val window: Window = this.window        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)        window.statusBarColor = ContextCompat.getColor(this@CompanyActivity, R.color.colorPrimary)        var actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        companyList= ArrayList()        adapter = CompanyAdapater(this@CompanyActivity,companyDipilih!!,companyList!!)        val linearLayoutManager = LinearLayoutManager(this@CompanyActivity)        rvCompany?.layoutManager = linearLayoutManager        rvCompany.adapter =adapter        adapter?.setListener(this)//        loadData()        perusahaanSQL(this@CompanyActivity)    }     private fun loadData() {        PopupUtil.showProgress(this@CompanyActivity,"Loading...","Memuat Data Perusahaan!")        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPointTwo::class.java)        val call = apiEndPoint.getCompany()        call?.enqueue(object : Callback<CompanyResponse> {            override fun onResponse(                call: Call<CompanyResponse>,                response: Response<CompanyResponse>            ) {                var r = response.body()                if(r!=null){                    companyList?.addAll(r.company!!)                    adapter?.notifyDataSetChanged()                    PopupUtil.dismissDialog()                }else{                    Toasty.error(this@CompanyActivity,"Perusahaan Tidak Ditemukan!").show()                    PopupUtil.dismissDialog()                }            }            override fun onFailure(call: Call<CompanyResponse>, t: Throwable) {                Log.d("ErrorCompany",t.toString())            }        })    }    override fun onItemClick(idCompany: String?, namaPerusahaan: String?) {        val intent = Intent()        intent.putExtra("companyDipilih",namaPerusahaan)        intent.putExtra("idCompany",idCompany)        setResult(Activity.RESULT_OK,intent)        finish()    }    private fun perusahaanSQL(c: Context){        val perusahaanDataSource =            PerusahaanDataSource(c)        try {            val perusahaanRow=perusahaanDataSource.getAll()            perusahaanRow.forEach{                Log.d("KemungkinanSQL",perusahaanRow.toString())                companyList?.add(CompanyItem(it.flag,it.idPerusahaan,it.timeIn,it.namaPerusahaan))                adapter?.notifyDataSetChanged()            }        }catch (e: SQLException){            Log.d("KemungkinanSQL",e.toString())        }    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }}