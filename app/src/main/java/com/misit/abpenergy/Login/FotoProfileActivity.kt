package com.misit.abpenergy.Loginimport android.app.Activityimport android.content.*import android.graphics.Bitmapimport android.graphics.BitmapFactoryimport android.net.Uriimport android.os.Bundleimport android.provider.MediaStoreimport android.util.Logimport android.view.Viewimport androidx.appcompat.app.AlertDialogimport androidx.appcompat.app.AppCompatActivityimport com.misit.abpenergy.Rimport com.misit.abpenergy.Utils.ConfigUtilimport com.theartofdev.edmodo.cropper.CropImageimport com.theartofdev.edmodo.cropper.CropImageViewimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_foto_profile.*import java.io.Fileimport java.io.FileOutputStreamimport java.io.IOExceptionimport java.io.OutputStreamimport java.util.*class FotoProfileActivity : AppCompatActivity(),View.OnClickListener {    private var bitmap:Bitmap?=null    private var img:Int?=null    private var fileUpload:Uri?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_foto_profile)        btnAmbilFoto.setOnClickListener(this)    }    override fun onClick(v: View?) {        if(v?.id==R.id.btnAmbilFoto){            bitmap=null            img=0//            ConfigUtil.showDialogOption(this@FotoProfileActivity, 101,102)//            CropImage//                .activity()//                .setGuidelines(CropImageView.Guidelines.ON)//                .setFixAspectRatio(true)////                .setAspectRatio(480,480)//                .start(this@FotoProfileActivity)            val list = arrayOf<String>("Camera", "Galery")            showDialogOption(this, list)        }    }    fun showDialogOption(c: Context, title: Array<String>){        val alertDialog = AlertDialog.Builder(c)        alertDialog.setTitle("Silahkan Pilih")        alertDialog!!.setItems(title, DialogInterface.OnClickListener { dialog, which ->            when (which) {                0 -> takeWithCamera(this@FotoProfileActivity)                1 -> pickFromGalery(c)            }        })        alertDialog.create()        alertDialog.show()    }    private fun takeWithCamera(c: Activity) {        val takePictureIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)        try {            startActivityForResult(takePictureIntent, 112)        } catch (e: ActivityNotFoundException) {            // display error state to the user        }    }    private fun pickFromGalery(c: Context) {        val intent = Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI)        intent.type = "image/*"        startActivityForResult(intent, 102)    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if(resultCode== Activity.RESULT_OK && requestCode==102) {            //            GALERY            try {                fileUpload = data!!.data                CropImage                    .activity(fileUpload)                    .setGuidelines(CropImageView.Guidelines.ON)                    .setFixAspectRatio(true)                    .setAspectRatio(480,480)                    .start(this@FotoProfileActivity)            } catch (e: IOException) {                img = 0            }        }else if(resultCode== Activity.RESULT_OK && requestCode==101) {            try {                var dataFoto = data!!                bitmap = BitmapFactory.decodeByteArray(                    dataFoto.getByteArrayExtra("gambarDiFoto"), 0, dataFoto                        .getByteArrayExtra("gambarDiFoto").size                )                imgProf.setImageBitmap(bitmap);                img = 1            } catch (e: IOException) {                img = 0                e.printStackTrace();            }        }        if (requestCode === CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {            val result = CropImage.getActivityResult(data)            Log.d("requestCode", resultCode.toString())            if (resultCode === RESULT_OK) {                val resultUri = result.uri                imgProf.setImageURI(resultUri)                try {                    bitmap = BitmapFactory.decodeStream(                        contentResolver.openInputStream(resultUri!!)                    )                    imgProf.setImageBitmap(bitmap);                    img = 1                } catch (e: IOException) {                    Log.d("LOG_CROP_IMAGE",e.toString())                    img = 0                }            } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {                Log.d("ErrorLog", result.getError().toString())            }        }        if (requestCode == 112 && resultCode == RESULT_OK) {            val imageBitmap = data?.extras?.get("data") as Bitmap            val uri = bitmapToFile(imageBitmap)            Log.d("IMGURI",uri.toString())            CropImage                .activity(uri)                .setGuidelines(CropImageView.Guidelines.ON)                .setFixAspectRatio(true)                .setAspectRatio(480,480)                .start(this@FotoProfileActivity)//            imgProf.setImageBitmap(imageBitmap)        }        super.onActivityResult(requestCode, resultCode, data)    }    // Method to save an bitmap to a file    fun bitmapToFile(bitmap:Bitmap): Uri {        // Get the context wrapper        val wrapper = ContextWrapper(applicationContext)        // Initialize a new file instance to save bitmap object        var file = wrapper.getDir("Images",Context.MODE_PRIVATE)        file = File(file,"${UUID.randomUUID()}.jpg")        try{            // Compress the bitmap and save in jpg format            val stream: OutputStream = FileOutputStream(file)            bitmap.compress(Bitmap.CompressFormat.JPEG,100,stream)            stream.flush()            stream.close()        }catch (e:IOException){            e.printStackTrace()        }        // Return the saved bitmap uri        return Uri.fromFile(File(file.absolutePath))    }}