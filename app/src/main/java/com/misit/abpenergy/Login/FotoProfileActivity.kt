package com.misit.abpenergy.Loginimport android.app.Activityimport android.content.*import android.graphics.Bitmapimport android.graphics.BitmapFactoryimport android.net.Uriimport android.os.Bundleimport android.provider.MediaStoreimport android.util.Logimport android.view.Viewimport android.widget.Toastimport androidx.appcompat.app.AlertDialogimport androidx.appcompat.app.AppCompatActivityimport com.bumptech.glide.Glideimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Api.ApiEndPointTwoimport com.misit.abpenergy.Login.Response.DaftarAkunResponseimport com.misit.abpenergy.Rimport com.misit.abpenergy.Rkb.Response.CsrfTokenResponseimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.PrefsUtilimport com.theartofdev.edmodo.cropper.CropImageimport com.theartofdev.edmodo.cropper.CropImageViewimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_foto_profile.*import okhttp3.MediaType.Companion.toMediaTypeOrNullimport okhttp3.MultipartBodyimport okhttp3.RequestBody.Companion.asRequestBodyimport okhttp3.RequestBody.Companion.toRequestBodyimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.io.Fileimport java.io.IOExceptionimport java.util.*class FotoProfileActivity : AppCompatActivity(),View.OnClickListener {    private var bitmap:Bitmap?=null    private var img:Int?=null    private var csrf_token:String?=null    private var fileUpload:Uri?=null    var fotoURL:String?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_foto_profile)        fotoURL = intent.getStringExtra("fotoURL")        if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN", false)){            USERNAME = PrefsUtil.getInstance().getStringState(PrefsUtil.USER_NAME, "")            NAMA_LENGKAP = PrefsUtil.getInstance().getStringState(PrefsUtil.NAMA_LENGKAP, "")            NIK = PrefsUtil.getInstance().getStringState(PrefsUtil.NIK, "")            DEPARTMENT = PrefsUtil.getInstance().getStringState(PrefsUtil.DEPT, "")            SECTON = PrefsUtil.getInstance().getStringState(PrefsUtil.SECTION, "")            LEVEL = PrefsUtil.getInstance().getStringState(PrefsUtil.LEVEL, "")            RULE = PrefsUtil.getInstance().getStringState(PrefsUtil.RULE, "")        }else{            val intent = Intent(this, LoginActivity::class.java)            startActivity(intent)            finish()        }        btnAmbilFoto.setOnClickListener(this)    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }    override fun onResume() {        PrefsUtil.initInstance(this)        Glide.with(this@FotoProfileActivity).load(fotoURL).into(imgProf)        getToken()        super.onResume()    }    override fun onClick(v: View?) {        if(v?.id==R.id.btnAmbilFoto){            bitmap=null            img=0            val list = arrayOf<String>("Camera", "Galery")            showDialogOption(this, list)        }    }    fun showDialogOption(c: Context, title: Array<String>){        val alertDialog = AlertDialog.Builder(c)        alertDialog.setTitle("Silahkan Pilih")        alertDialog!!.setItems(title, DialogInterface.OnClickListener { dialog, which ->            when (which) {                0 -> takeWithCamera(this@FotoProfileActivity)                1 -> pickFromGalery(c)            }        })        alertDialog.create()        alertDialog.show()    }    private fun takeWithCamera(c: Activity) {        val takePictureIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)        try {            startActivityForResult(takePictureIntent, 112)        } catch (e: ActivityNotFoundException) {            Log.d("ErrorCamera",e.toString())        }    }    private fun pickFromGalery(c: Context) {        val intent = Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI)        intent.type = "image/*"        startActivityForResult(intent, 102)    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if(resultCode== Activity.RESULT_OK && requestCode==102) {            //            GALERY            try {                fileUpload = data!!.data                CropImage                    .activity(fileUpload)                    .setGuidelines(CropImageView.Guidelines.ON)                    .setFixAspectRatio(true)                    .setAspectRatio(720,720)                    .start(this@FotoProfileActivity)            } catch (e: IOException) {                img = 0            }        }else if(resultCode== Activity.RESULT_OK && requestCode==101) {            try {                var dataFoto = data!!                bitmap = dataFoto                    .getByteArrayExtra("gambarDiFoto")?.let {                        BitmapFactory.decodeByteArray(                            dataFoto.getByteArrayExtra("gambarDiFoto"), 0, it.size                        )                    }//                imgProf.setImageBitmap(bitmap);                img = 1            } catch (e: IOException) {                img = 0                e.printStackTrace();            }        }        if (requestCode === CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {            val result = CropImage.getActivityResult(data)            Log.d("requestCode", resultCode.toString())            if (resultCode === RESULT_OK) {                val resultUri = result.uri//                imgProf.setImageURI(resultUri)                try {                    bitmap = BitmapFactory.decodeStream(                        contentResolver.openInputStream(resultUri!!)                    )//                    imgProf.setImageBitmap(bitmap);                    img = 1                } catch (e: IOException) {                    Log.d("LOG_CROP_IMAGE",e.toString())                    img = 0                }                uploadFoto()            } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {                Log.d("ErrorLog", result.getError().toString())            }        }        if (requestCode == 112 && resultCode == RESULT_OK) {            val imageBitmap = data?.extras?.get("data") as Bitmap            val uri = ConfigUtil.bitmapToFile(imageBitmap,applicationContext)            Log.d("IMGURI",uri.toString())            CropImage                .activity(uri)                .setGuidelines(CropImageView.Guidelines.ON)                .setFixAspectRatio(true)//                .setAspectRatio(480,480)                .start(this@FotoProfileActivity)        }        super.onActivityResult(requestCode, resultCode, data)    }    private fun uploadFoto(){        if(!isValidate()){            return        }        val rnds = (0..1000).random()        val wrapper = ContextWrapper(applicationContext)        //    var filenya = File(fileUpload!!.path, jam)        var file = wrapper.getDir("images", Context.MODE_PRIVATE)        file = File(file, "${NIK}_${USERNAME}_PROFILE_${rnds}.jpg")        ConfigUtil.streamFoto(bitmap!!,file)        var fileUri = file.asRequestBody("image/*".toMediaTypeOrNull())        var fotoProfile = MultipartBody.Part.createFormData("fileToUpload",file.name,fileUri)        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPointTwo::class.java)        val nik = NIK!!.toRequestBody(MultipartBody.FORM)        val token = csrf_token!!.toRequestBody(MultipartBody.FORM)        var call = apiEndPoint.postFotoProfile(fotoProfile,nik,token)        call?.enqueue(object : Callback<DaftarAkunResponse>{            override fun onResponse(                call: Call<DaftarAkunResponse>,                response: Response<DaftarAkunResponse>            ) {                val r = response.body()                if(r!=null){                    if(r.success){                        if(r.resultLog!=null){                            Glide.with(this@FotoProfileActivity)                                .load(r.resultLog)                                .into(imgProf)                            PrefsUtil.getInstance()                                .setBooleanState(PrefsUtil.PHOTO_PROFILE,                                    true)                        }else{                            Toasty.error(this@FotoProfileActivity,"Foto Gagal Di Upload").show()                        }                    }else{                        Toasty.error(this@FotoProfileActivity,"Foto Gagal Di Upload").show()                    }                }else{                    Toasty.error(this@FotoProfileActivity,"Foto Gagal Di Upload").show()                }            }            override fun onFailure(call: Call<DaftarAkunResponse>, t: Throwable) {                Toasty.error(this@FotoProfileActivity,"Foto Gagal Di Upload").show()                Log.d("ErrorFoto",t.toString())            }        })    }    //    TOKEN    private fun getToken() {        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getToken("csrf_token")        call?.enqueue(object : Callback<CsrfTokenResponse> {            override fun onFailure(call: Call<CsrfTokenResponse>, t: Throwable) {                Toast.makeText(this@FotoProfileActivity,"Error : $t", Toast.LENGTH_SHORT).show()            }            override fun onResponse(                call: Call<CsrfTokenResponse>,                response: Response<CsrfTokenResponse>            ) {                csrf_token = response.body()?.csrfToken            }        })    }//    TOKEN    private fun isValidate():Boolean{    if (img!! <= 0 )    {        Toasty.error(this@FotoProfileActivity,"Harap Memilih Gambar", Toasty.LENGTH_LONG).show()        btnAmbilFoto.performClick()        return false    }        return true    }    companion object{        var USERNAME = "username"        var DEPARTMENT="department"        var SECTON="section"        var LEVEL="level"        var Tab_INDEX ="tab_index"        var NAMA_LENGKAP = "nama_lengkap"        var NO_RKB = "NO_RKB"        var TIPE = null        var RULE = "RULE"        var NIK = "NIK"    }}