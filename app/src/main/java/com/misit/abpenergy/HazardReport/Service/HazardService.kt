package com.misit.abpenergy.HazardReport.Serviceimport android.app.*import android.content.Intentimport android.os.Buildimport android.os.CountDownTimerimport android.os.Handlerimport android.os.IBinderimport android.util.Logimport com.misit.abpenergy.NewIndexActivityimport com.misit.abpenergy.Rimport com.misit.abpenergy.Utils.Constantsimport es.dmoral.toasty.Toastyclass HazardService: Service() {    lateinit var manager:NotificationManager    override fun onBind(intent: Intent?): IBinder? {        return null    }    override fun onCreate() {        createNotificationChannel()        super.onCreate()    }    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {        intent.let {            when(it!!.action){                Constants.SERVICE_START-> showNotification()                Constants.SERVICE_STOP->stopService()            }        }        return super.onStartCommand(intent, flags, startId)    }    private fun showNotification() {        val notificationIntent = Intent(this,NewIndexActivity::class.java)        val pendingIntent = PendingIntent.getActivity(this, 1, notificationIntent,0)        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val notification =                Notification.Builder(this,Constants.CHANNEL_ID).setContentText("Menyimpan Data....!!!").setSmallIcon(                    R.drawable.abp_white).setContentIntent(pendingIntent).build()            startForeground(Constants.NOTIFICATION_ID,notification)            Toasty.info(this@HazardService,"Service Started!!").show()//            savingHazard()        }    }    private fun savingHazard() {        object : CountDownTimer(30000, 10) {            override fun onTick(millisUntilFinished: Long) {                Log.d("HAZARDSERVICE","seconds remaining: " + millisUntilFinished / 1000)            }            override fun onFinish() {                stopService(Intent(this@HazardService, HazardService::class.java).apply {                    this.action = Constants.SERVICE_STOP                })                Log.d("HAZARDSERVICE","done")            }        }.start()    }    private fun createNotificationChannel(){        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){            val serviceChannel = NotificationChannel(                Constants.CHANNEL_ID,"Saving Service Channel",NotificationManager.IMPORTANCE_DEFAULT            )            manager = getSystemService(                NotificationManager::class.java)            manager.createNotificationChannel(serviceChannel)        }    }    private fun stopService(){        manager.cancel(Constants.NOTIFICATION_ID)        stopForeground(true)        stopSelf()        Toasty.info(this@HazardService,"Service Stopped!!").show()    }}