package com.misit.abpenergy.HazardReport.Activityimport android.app.Activityimport android.content.Contextimport android.content.Intentimport android.database.sqlite.SQLiteExceptionimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.view.Windowimport android.view.WindowManagerimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.LinearLayoutManagerimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.HazardReport.Adapter.KeparahanAdapterimport com.misit.abpenergy.Main.DataSource.KeparahanDataSourceimport com.misit.abpenergy.HazardReport.Response.*import com.misit.abpenergy.HazardReport.SQLite.DataSource.DetKeparahanDataSourceimport com.misit.abpenergy.Rimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_keparahan.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.sql.SQLExceptionclass KeparahanActivity : AppCompatActivity(),    KeparahanAdapter.OnItemClickListener {    private var adapter: KeparahanAdapter? = null    private var keparahanList:MutableList<KeparahanItemFull>?=null    private var keparahanDipilih:String?=null    private var call: Call<KeparahanResponse>?=null    var detKeparahan:MutableList<DetKeparahanItem>?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_keparahan)        title="Pilih Resiko Keparahan"        val window: Window = this.window        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)        window.statusBarColor = ContextCompat.getColor(this, R.color.colorPrimary)        keparahanList = ArrayList()        keparahanDipilih = intent.getStringExtra("keparahanDipilih")        var actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        adapter = KeparahanAdapter(            this,            keparahanDipilih,            keparahanList!!        )        val linearLayoutManager = LinearLayoutManager(this@KeparahanActivity)        rvKeparahan?.layoutManager = linearLayoutManager        rvKeparahan.adapter =adapter        adapter?.setListener(this)//        loadData()        keparahanSQL(this@KeparahanActivity)    }    private fun loadData() {        val apiEndPoint = ApiClient.getClient(this@KeparahanActivity)!!.create(ApiEndPoint::class.java)        call = apiEndPoint.resikoKeparahan()        call?.enqueue(object : Callback<KeparahanResponse?> {            override fun onFailure(call: Call<KeparahanResponse?>, t: Throwable) {                Toasty.error(this@KeparahanActivity,"Error : "+ t).show()            }            override fun onResponse(                call: Call<KeparahanResponse?>,                response: Response<KeparahanResponse?>            ) {                var keparahanRes= response.body()                if(keparahanRes!=null){                    Log.d("keparahanDipilih",keparahanRes.toString())                    if(keparahanRes.keparahan!=null){//                        keparahanList?.addAll(keparahanRes.keparahan!!)                        adapter?.notifyDataSetChanged()                    }                }            }        })    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }    override fun onItemClick(uid: String, keparahan: String,nilai:Int?) {        val intent: Intent = Intent()        intent.putExtra("keparahanID",uid)        intent.putExtra("keparahanDipilih",keparahan)        intent.putExtra("nilaiKeparahanSebelum","$nilai")        setResult(Activity.RESULT_OK,intent)        finish()    }    private fun keparahanSQL(c: Context){        val keparahanDataSource =            KeparahanDataSource(c)        try {            val keparahanRow=keparahanDataSource.getAll()            keparahanRow.forEach{                detKeparahan=ArrayList()                Log.d("KemungkinanSQL",keparahanRow.toString())                keparahanList?.add(KeparahanItemFull(it.flag,it.idKeparahan,it.nilai,it.keparahan,loadDetail("${it.idKeparahan}",c)))                adapter?.notifyDataSetChanged()            }        }catch (e: SQLException){            Log.d("KemungkinanSQL",e.toString())        }    }    fun  loadDetail(idKeparahan:String,c: Context): MutableList<DetKeparahanItem>? {        detKeparahan?.clear()        var detKeparahanDB = DetKeparahanDataSource(c)        try {            val getItem = detKeparahanDB.getBy(idKeparahan)            getItem.forEach {                detKeparahan?.add(DetKeparahanItem(it.keterangan,it.idKeparahan?.toInt(),it.id_det,it.time_input,it.ket_input))                Log.d("detHirarkiList", "${it.idKeparahan}")            }        }catch (e: SQLiteException){            e.message?.let { Log.d("ErrorDetail", it) }        }        return detKeparahan;    }}