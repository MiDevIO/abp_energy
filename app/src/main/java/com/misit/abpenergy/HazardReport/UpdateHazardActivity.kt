package com.misit.abpenergy.HazardReportimport android.app.Activityimport android.content.Contextimport android.content.ContextWrapperimport android.content.DialogInterfaceimport android.content.Intentimport android.graphics.Bitmapimport android.graphics.BitmapFactoryimport android.net.Uriimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.provider.MediaStoreimport android.util.Logimport android.view.Viewimport android.widget.Toastimport androidx.appcompat.app.AlertDialogimport androidx.core.content.FileProviderimport androidx.core.net.toUriimport com.bumptech.glide.Glideimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.HazardReport.Response.HazardReportResponseimport com.misit.abpenergy.Rimport com.misit.abpenergy.Rkb.Response.CsrfTokenResponseimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.PopupUtilimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_new_hazard.*import kotlinx.android.synthetic.main.activity_update_hazard.*import okhttp3.MediaType.Companion.toMediaTypeOrNullimport okhttp3.MultipartBodyimport okhttp3.RequestBodyimport okhttp3.RequestBody.Companion.asRequestBodyimport okhttp3.RequestBody.Companion.toRequestBodyimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.io.Fileimport java.io.FileOutputStreamimport java.io.IOExceptionimport java.io.OutputStreamimport java.util.*class UpdateHazardActivity : AppCompatActivity(),View.OnClickListener {    private var bitmap: Bitmap? = null    private var fileUpload: Uri? = null    private var imgIn: Int = 0    private var csrf_token: String? = null    private var kemungkinanDipilihSesudah:String? = null    private var keparahanDipilihSesudah:String? = null    private var kemungkinanIDSesudah:String? = null    private var keparahanIDSesudah:String? = null    private var cal = Calendar.getInstance()    private var storageDir:File? = null    private var pathFileSelesai:String?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_update_hazard)        UID = intent.getStringExtra("UID")        Log.d("UID",UID!!)        imgIn = 0        bitmap = null        FORM_UPLOAD = intent.getBooleanExtra("FORM_UPLOAD", false)        cvUpdateStatus.setOnClickListener(this)        btnCancelUpdate.setOnClickListener(this)        btnSimpanStatus.setOnClickListener(this)        inTGLSelesaiUpdate.setOnClickListener(this)        inJamSelesaiUpdate.setOnClickListener(this)        inSesudahKemungkinan.setOnClickListener(this)        inSesudahKeparahan.setOnClickListener(this)    }    override fun onClick(v: View?) {        if (v?.id == R.id.cvUpdateStatus) {            showDialogOption(this@UpdateHazardActivity,102,103,"selesai")        }        if (v?.id == R.id.btnSimpanStatus) {            if(UID!=null){                updateStatus()            }else{                Toasty.error(this@UpdateHazardActivity,"Data Tidak Ditemukan").show()            }        }        if (v?.id == R.id.btnCancelUpdate) {            finish()        }        if (v?.id == R.id.inTGLSelesaiUpdate) {            ConfigUtil.showDialogTgl(inTGLSelesaiUpdate,this@UpdateHazardActivity)        }        if (v?.id == R.id.inJamSelesaiUpdate) {            ConfigUtil.showDialogTime(inJamSelesaiUpdate,this@UpdateHazardActivity)        }        if(v?.id==R.id.inSesudahKemungkinan){            var intent = Intent(this@UpdateHazardActivity,KemungkinanActivity::class.java)            intent.putExtra("kemungkinanDipilih",kemungkinanDipilihSesudah)            startActivityForResult(intent,100)        }        if(v?.id==R.id.inSesudahKeparahan){            var intent = Intent(this@UpdateHazardActivity,KeparahanActivity::class.java)            intent.putExtra("keparahanDipilih",keparahanDipilihSesudah)            startActivityForResult(intent,101)        }    }    //    TOKEN    private fun getToken() {        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getToken("csrf_token")        call?.enqueue(object : Callback<CsrfTokenResponse> {            override fun onFailure(call: Call<CsrfTokenResponse>, t: Throwable) {                Toast.makeText(this@UpdateHazardActivity, "Error : $t", Toast.LENGTH_SHORT).show()            }            override fun onResponse(                call: Call<CsrfTokenResponse>,                response: Response<CsrfTokenResponse>            ) {                csrf_token = response.body()?.csrfToken            }        })    }    //    TOKEN    override fun onResume() {        storageDir = getExternalFilesDir("ABP_IMAGES")        getToken()        if (FORM_UPLOAD) {            cvUpdateStatus.visibility = View.VISIBLE        } else {            cvUpdateStatus.visibility = View.GONE        }        super.onResume()    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if (resultCode == Activity.RESULT_OK && requestCode == 103) {//            Galery            try {//                data.clipData                fileUpload = data!!.data                try {                    bitmap = BitmapFactory.decodeStream(                        contentResolver.openInputStream(fileUpload!!)                    )                    imgUpdateStatus.setImageBitmap(bitmap);                    imgIn = 1                } catch (e: IOException) {                    imgIn = 0                }            } catch (e: IOException) {                imgIn = 0                imgUpdateStatus.visibility = View.GONE            }        } else if (resultCode == Activity.RESULT_OK && requestCode == 102) {//            camera            try {                fileUpload = "file:///${pathFileSelesai}".toUri()                try {                    bitmap = BitmapFactory.decodeStream(                        contentResolver.openInputStream(fileUpload!!)                    )                    Glide.with(this@UpdateHazardActivity).load(fileUpload).into(imgUpdateStatus)                } catch (e: IOException) {                    e.printStackTrace();                }                imgIn = 1            } catch (e: IOException) {                imgIn = 0                e.printStackTrace();            }        }else if(resultCode== Activity.RESULT_OK && requestCode==100){            kemungkinanDipilihSesudah = data!!.getStringExtra("kemungkinanDipilih")            kemungkinanIDSesudah = data.getStringExtra("kemungkinanID")            inSesudahKemungkinan.setText(kemungkinanDipilihSesudah)        }else if(resultCode== Activity.RESULT_OK && requestCode==101){            keparahanDipilihSesudah = data!!.getStringExtra("keparahanDipilih")            keparahanIDSesudah = data.getStringExtra("keparahanID")            inSesudahKeparahan.setText(keparahanDipilihSesudah)        } else if (resultCode == Activity.RESULT_CANCELED) {//            Toasty.info(this@UpdateHazardActivity, resultCode.toString(), Toasty.LENGTH_SHORT)//                .show()        }        super.onActivityResult(requestCode, resultCode, data)    }    companion object {        var UID :String?= null        var FORM_UPLOAD = false    }    //OPEN GALERY    private fun openGalleryForImage(galery:Int) {//        btnFLMenu.collapse()        val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)        intent.type = "image/*"        startActivityForResult(intent, galery)    }    //OPEN GALERY    //    OPEN CAMERA    fun openCamera() {//        btnFLMenu.collapse()        var intent = Intent(this@UpdateHazardActivity, PhotoHazardActivity::class.java)        startActivityForResult(intent, 333)    }    //    OPEN    //    Dialog PICK PICTURE    fun showDialogOption(c:Activity,camera:Int,galery:Int,fName:String) {        val alertDialog = AlertDialog.Builder(c)        alertDialog.setTitle("Silahkan Pilih")        val animals = arrayOf<String>(            "Ambil Sebuah Gambar",            "Pilih Gambar dari galery"        )        alertDialog!!.setItems(animals, DialogInterface.OnClickListener { dialog, which ->            when (which) {                0 -> cameraIntent(c, camera,fName)                1 -> openGalleryForImage(galery)            }        })        alertDialog.create()        alertDialog.show()    }    //    Dialog PICK PICTURE    private fun cameraIntent(c: Activity, requestCode: Int, fName: String){        Intent(MediaStore.ACTION_IMAGE_CAPTURE).also { takePictureIntent ->            // Ensure that there's a camera activity to handle the intent            takePictureIntent.resolveActivity(packageManager)?.also {                // Create the File where the photo should go                val photoFile: File? = try {                    createImageFile(fName)                } catch (ex: IOException) {                    // Error occurred while creating the File                    Log.d("errorCreate", ex.toString())                    null                }                // Continue only if the File was successfully created                photoFile?.also {                    val photoURI = FileProvider.getUriForFile(                        c,                        "com.misit.abpenergy.fileprovider",                        it                    )                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI)                    startActivityForResult(takePictureIntent, requestCode)                }            }        }    }    @Throws(IOException::class)    private fun createImageFile(fName: String): File {        // Create an image file name        return File.createTempFile(            "${fName}", /* prefix */            ".jpg", /* suffix */            storageDir /* directory */        ).apply {            // Save a file: path for use with ACTION_VIEW intents            pathFileSelesai = absolutePath        }    }    private fun updateStatus(){        var call:Call<HazardReportResponse>?=null        if(!isValidate()){            return        }        PopupUtil.showProgress(this@UpdateHazardActivity,"Loading...","Mengupdate Status Hazard!")        var uid = UID!!.toRequestBody(MultipartBody.FORM)        var inTGLSelesai = inTGLSelesaiUpdate.text.toString().toRequestBody(MultipartBody.FORM)        var inJamSelesai = inJamSelesaiUpdate.text.toString().toRequestBody(MultipartBody.FORM)        var inKeterangan = inKeteranganUpdate.text.toString().toRequestBody(MultipartBody.FORM)        var idSesudahKemungkinan = kemungkinanIDSesudah.toString().toRequestBody(MultipartBody.FORM)        var idSesudahKeparahan = keparahanIDSesudah.toString().toRequestBody(MultipartBody.FORM)        var _token:RequestBody = csrf_token!!.toRequestBody(MultipartBody.FORM)        if(imgIn>0) {            var waktu = Date()            val cal = Calendar.getInstance()            cal.time = waktu            var jam =                "${cal.get(Calendar.HOUR_OF_DAY)}${cal.get(Calendar.MINUTE)}${cal.get(Calendar.SECOND)}"            val wrapper = ContextWrapper(applicationContext)//    var filenya = File(fileUpload!!.path, jam)            var file = wrapper.getDir("images", Context.MODE_PRIVATE)            file = File(file, "${jam}_selesai.jpg")//    var reqFile = RequestBody.create("image/*".toMediaTypeOrNull(),file!!);            try {                // Get the file output stream                val stream: OutputStream = FileOutputStream(file)                //var uri = Uri.parse(file.absolutePath)                // Compress bitmap                bitmap!!.compress(Bitmap.CompressFormat.JPEG, 100, stream)                // Flush the stream                stream.flush()                // Close stream                stream.close()            } catch (e: IOException) { // Catch the exception                e.printStackTrace()            }            var fileUri = file.asRequestBody("image/*".toMediaTypeOrNull())            var bukti = MultipartBody.Part.createFormData("fileToUpload", file.name, fileUri)            //    API POST PHOTO            val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)            call = apiEndPoint.updateBuktiBergambar(                bukti,uid, inTGLSelesai, inJamSelesai,idSesudahKemungkinan,idSesudahKeparahan, inKeterangan, _token            )        }else{            //    API POST            val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)            call = apiEndPoint.updateBukti(                uid,inTGLSelesai, inJamSelesai, inKeterangan,idSesudahKemungkinan,idSesudahKeparahan, _token            )        }        call?.enqueue(object : Callback<HazardReportResponse> {            override fun onResponse(                call: Call<HazardReportResponse>,                response: Response<HazardReportResponse>            ) {                var sResponse = response.body()                if(sResponse!=null){                    if(sResponse.success!!){                        Toasty.success(this@UpdateHazardActivity,"Status Telah Di Update! ").show()                        ConfigUtil.resultIntent(this@UpdateHazardActivity)                        PopupUtil.dismissDialog()                        val intent = Intent()                        setResult(Activity.RESULT_OK,intent)                        finish()                    }else{                        Toasty.error(this@UpdateHazardActivity,"Gagal Mengupdate Status! ").show()                        PopupUtil.dismissDialog()                    }                }else{                    Toasty.error(this@UpdateHazardActivity,"Gagal Mengupdate Status ").show()                    PopupUtil.dismissDialog()                }            }            override fun onFailure(call: Call<HazardReportResponse>, t: Throwable) {                Log.d("Error Upload", t.printStackTrace().toString())            }        })    }    //    Validasi    fun isValidate():Boolean{        clearError()        if(inTGLSelesaiUpdate.text!!.isEmpty()){            tilTGLSelesaiUpdate.error="Please Input Someting"            inTGLSelesaiUpdate.requestFocus()            return false        }        if(inJamSelesaiUpdate.text!!.isEmpty()){            tilJamSelesaiUpdate.error="Please Input Someting"            inJamSelesaiUpdate.requestFocus()            return false        }        if(inKeteranganUpdate.text!!.isEmpty()){            tilKeteranganUpdate.error="Please Input Someting"            inKeteranganUpdate.requestFocus()            return false        }        if(inSesudahKemungkinan.text!!.isEmpty()){            tilSesudahKemungkinan.error="Please Input Someting"            inSesudahKemungkinan.requestFocus()            return false        }        if(inSesudahKeparahan.text!!.isEmpty()){            tilSesudahKeparahan.error="Please Input Someting"            inSesudahKeparahan.requestFocus()            return false        }        if (imgIn <= 0 )        {            Toasty.error(this@UpdateHazardActivity,"Harap Memilih Gambar",Toasty.LENGTH_LONG).show()            cvUpdateStatus.performClick()            return false        }        return true    }    private fun clearError() {        tilTGLSelesaiUpdate.error=null        tilJamSelesaiUpdate.error=null        tilKeteranganUpdate.error=null        tilSesudahKemungkinan.error=null        tilSesudahKeparahan.error=null    }    //    Validasi}