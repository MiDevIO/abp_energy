package com.misit.abpenergy.HazardReportimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.view.Windowimport android.view.WindowManagerimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport androidx.swiperefreshlayout.widget.SwipeRefreshLayoutimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.HazardReport.Adapter.ListHazardReportAdapterimport com.misit.abpenergy.HazardReport.Response.DataItemimport com.misit.abpenergy.HazardReport.Response.ListHazardimport com.misit.abpenergy.Rimport com.misit.abpenergy.Utils.PopupUtilimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_a_l_l_hazard_report.*import kotlinx.android.synthetic.main.activity_a_l_l_hazard_report.rvHazardListimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass ALLHazardReportActivity : AppCompatActivity(), ListHazardReportAdapter.OnItemClickListener  {    private var adapter: ListHazardReportAdapter? = null    private var hazardList:MutableList<DataItem>?=null    lateinit var swipeRefreshLayout: SwipeRefreshLayout    private var page : Int=1    private var visibleItem : Int=0    private var total : Int=0    private var pastVisibleItem : Int=0    private var loading : Boolean=false    var curentPosition: Int=0    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_a_l_l_hazard_report)        title="HAZARD REPORT"        val window: Window = this.window        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)        window.statusBarColor = ContextCompat.getColor(this, R.color.colorPrimary)        var actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        hazardList= ArrayList()        adapter = ListHazardReportAdapter(this@ALLHazardReportActivity,hazardList!!)        val linearLayoutManager = LinearLayoutManager(this@ALLHazardReportActivity)        rvHazardList?.layoutManager = linearLayoutManager        rvHazardList.adapter =adapter        adapter?.setListener(this)        swipeRefreshLayout = findViewById(R.id.pullRefreshHazard)        swipeRefreshLayout.setOnRefreshListener(object :SwipeRefreshLayout.OnRefreshListener{            override fun onRefresh() {                rvHazardList.adapter = adapter                page=1                hazardList?.clear()                load(page.toString())//                swipeRefreshLayout.isRefreshing=false                //PopupUtil.dismissDialog()            }        })        hazardList?.clear()        load("1")    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }    fun load(hal:String){        swipeRefreshLayout.isRefreshing=true        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getListHazardAll(hal)        call?.enqueue(object : Callback<ListHazard> {            override fun onFailure(call: Call<ListHazard>, t: Throwable) {                swipeRefreshLayout.isRefreshing=false                Toasty.error(this@ALLHazardReportActivity,"Error : $t", Toasty.LENGTH_SHORT).show()                PopupUtil.dismissDialog()            }            override fun onResponse(call: Call<ListHazard>, response: Response<ListHazard>) {                var listHazard = response.body()                if(listHazard!=null){                    if (listHazard.data!=null){                        PopupUtil.showProgress(this@ALLHazardReportActivity,"Loading...","Membuat Hazard Report!")                        loading=true                        hazardList!!.addAll(listHazard.data!!)                        adapter?.notifyDataSetChanged()                    }else{                        curentPosition = (rvHazardList.layoutManager as LinearLayoutManager).findLastVisibleItemPosition()                        hazardList!!.addAll(listHazard.data!!)                        adapter?.notifyDataSetChanged()                    }                }                rvHazardList.addOnScrollListener(object : RecyclerView.OnScrollListener(){                    override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {                        if (dy > 0) {                            visibleItem = recyclerView.layoutManager!!.childCount                            total = recyclerView.layoutManager!!.itemCount                            pastVisibleItem =                                (recyclerView.layoutManager as LinearLayoutManager).findFirstVisibleItemPosition()                            if (loading) {                                if ((visibleItem + pastVisibleItem) >= total) {                                    loading = false                                    page++                                    load(page.toString())                                }                            }                        }                    }                    override fun onScrollStateChanged(                        recyclerView: RecyclerView,                        newState: Int                    ) {                        super.onScrollStateChanged(recyclerView, newState)                    }                })                PopupUtil.dismissDialog()                swipeRefreshLayout.isRefreshing=false            }        })    }    override fun onItemClick(uid: String?) {        var intent = Intent(this@ALLHazardReportActivity,DetailHazardActivity::class.java)        intent.putExtra(DetailHazardActivity.UID,uid.toString())        intent.putExtra("ALLHazard","admin")        startActivity(intent)    }    override fun onUpdateClick(uid: String?) {        Toasty.info(this@ALLHazardReportActivity,uid!!).show()    }}