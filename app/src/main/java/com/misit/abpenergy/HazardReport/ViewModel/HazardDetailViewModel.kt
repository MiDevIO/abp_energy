package com.misit.abpenergy.HazardReport.ViewModelimport android.content.Contextimport android.util.Logimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.HazardReport.Response.*import com.misit.abpenergy.HazardReport.SQLite.DataSource.DetailDataSourceOfflineimport com.misit.abpenergy.HazardReport.SQLite.DataSource.MetrikDataSourceimport com.misit.abpenergy.Utils.PrefsUtilimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.asyncimport kotlinx.coroutines.coroutineScopeclass HazardDetailViewModel:ViewModel() {    var detailResponse : MutableLiveData<DetailHazardResponse>    lateinit var detailHazard : DetailDataSourceOffline    lateinit var metrik : MetrikDataSource    init {        detailResponse = MutableLiveData()        if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN", false)){            NIK = PrefsUtil.getInstance().getStringState(PrefsUtil.NIK, "")            USERNAME = PrefsUtil.getInstance().getStringState(PrefsUtil.USER_NAME, "")            TOTAL_HAZARD_USER = PrefsUtil.getInstance().getStringState(PrefsUtil.TOTAL_HAZARD_USER!!,"0")        }    }    fun hazardDetailObserver():MutableLiveData<DetailHazardResponse>{        return detailResponse    }    suspend fun loadDetailOffline(uid:String,c:Context){        detailHazard = DetailDataSourceOffline(c)        metrik = MetrikDataSource(c)        var responDetail = DetailHazardResponse()        coroutineScope {            val result = async { detailHazard.getItem(uid) }            if(result.await()!=null){                val data = result.await()                if(data!=null) {                    var nilaiRiskSebelum = data.nilaiKemungkinan!! * data.nilaiKeparahan!!                    var sebelum = metrik.getMetrik(nilaiRiskSebelum)                    var riskSebelum = RiskSebelum()                    riskSebelum.idResiko = sebelum.idResiko                    riskSebelum.min = sebelum.min                    riskSebelum.max = sebelum.max                    riskSebelum.kategori = sebelum.kategori                    riskSebelum.tindakan = sebelum.tindakan                    riskSebelum.kodeBahaya = sebelum.kodeBahaya                    riskSebelum.bgColor = sebelum.bgColor                    riskSebelum.flag = sebelum.flag                    riskSebelum.txtColor = sebelum.txtColor                    responDetail.itemHazardList = data                    responDetail.riskSebelum = riskSebelum                    responDetail.nilaiRiskSebelum = nilaiRiskSebelum                    if (data.idKemungkinanSesudah != null) {                        Log.d("RiskSesudah","${data.idKemungkinanSesudah}")                        var riskSesudah = RiskSesudah()                        var nilaiRiskSesudah = data.nilaiKemungkinanSesudah!! * data.nilaiKeparahanSesudah!!                        var sesudah = metrik.getMetrik(nilaiRiskSesudah)                        riskSesudah.idResiko = sesudah.idResiko                        riskSesudah.min = sesudah.min                        riskSesudah.max = sesudah.max                        riskSesudah.kategori = sesudah.kategori                        riskSesudah.kodeBahaya = sesudah.kodeBahaya                        riskSesudah.tindakan = sesudah.tindakan                        riskSesudah.bgColor = sesudah.bgColor                        riskSesudah.flag = sesudah.flag                        riskSesudah.txtColor = sesudah.txtColor                        responDetail.riskSesudah = riskSesudah                        responDetail.nilaiRiskSesudah = nilaiRiskSesudah                    }else{                        responDetail.riskSesudah = null                        responDetail.nilaiRiskSesudah = null                    }                }                detailResponse.postValue(responDetail)            }        }    }    suspend fun loadDetailOnline(uid:String,c:Context){        val apiEndPoint = ApiClient.getClient(c)!!.create(ApiEndPoint::class.java)        val response = apiEndPoint.getItemHazardCorotine(uid)        if(response!=null){            if(response.isSuccessful)            {                var dataHazard = response.body()                if(dataHazard!=null){                    if(dataHazard.itemHazardList!=null){                        detailResponse.postValue(dataHazard!!)                    }                }            }        }    }    companion object{        var NIK="NIK"        var USERNAME="USERNAME"        var TOTAL_HAZARD_USER= "TOTAL_HAZARD_USER"    }}