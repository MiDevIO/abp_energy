package com.misit.abpenergy.HazardReport.ViewModelimport android.content.Contextimport android.util.Logimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.HazardReport.HazardReportActivityimport com.misit.abpenergy.HazardReport.SQLite.DataSource.HeaderDataSourceOfflineimport com.misit.abpenergy.HazardReport.SQLite.Model.HazardHeaderModelimport com.misit.abpenergy.HazardReport.SQLite.Model.HeaderListModelimport com.misit.abpenergy.Utils.PrefsUtilimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.asyncimport kotlinx.coroutines.launchclass HeaderViewModel:ViewModel() {    var hazardList : MutableLiveData<MutableList<HeaderListModel>>    lateinit var offlineHeader :HeaderDataSourceOffline    var modelHazard : MutableList<HeaderListModel>?=null    init {        if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN", false)){            NIK = PrefsUtil.getInstance().getStringState(PrefsUtil.NIK, "")            USERNAME = PrefsUtil.getInstance().getStringState(PrefsUtil.USER_NAME, "")        }        hazardList = MutableLiveData()        modelHazard = ArrayList()    }    fun hazardObserver():MutableLiveData<MutableList<HeaderListModel>>{        return hazardList    }    fun offlineHazard(c:Context){        modelHazard?.clear()        offlineHeader = HeaderDataSourceOffline(c)        GlobalScope.launch {            val deferred = async {                offlineHeader.getAll()            }            if(deferred.await()!=null){                deferred.await().forEach {                    modelHazard?.add(HeaderListModel(it.idHazard,                        it.uid,                        it.perusahaan,                        it.tgl_hazard,it.jam_hazard,it.idKemungkinan,it.idKeparahan,it.deskripsi,it.lokasi,it.lokasi_detail,it.status_perbaikan,it.user_input,it.time_input))                }                hazardList.postValue(modelHazard)            }else{                hazardList.postValue(modelHazard)            }        }    }    fun onlineHazard(c:Context,dari:String,sampai:String){        modelHazard?.clear()        GlobalScope.launch {            async {                val apiEndPoint = ApiClient.getClient(c)!!.create(ApiEndPoint::class.java)                val call = apiEndPoint.getHazardOffline(USERNAME,dari,sampai)                if(call!=null){                    if(call.isSuccessful)                    {                        val result = call.body()                        if(result!=null){                            result.data?.forEach {                                modelHazard?.add(HeaderListModel(it.idHazard,it.uid,it.perusahaan,it.tglHazard,it.jamHazard,it.idKemungkinan,it.idKeparahan,it.deskripsi,it.lokasi,it.lokasiDetail,it.statusPerbaikan,it.userInput,it.timeInput))                            }                            hazardList.postValue(modelHazard)                        }else{                            hazardList.postValue(modelHazard)                        }                    }                }            }.await()        }    }    companion object{        var NIK="NIK"        var USERNAME="USERNAME"    }}