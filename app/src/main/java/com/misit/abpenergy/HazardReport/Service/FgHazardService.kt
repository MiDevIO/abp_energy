package com.misit.abpenergy.HazardReport.Serviceimport android.app.*import android.content.BroadcastReceiverimport android.content.Contextimport android.content.Intentimport android.os.Buildimport android.os.IBinderimport android.util.Logimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.misit.abpenergy.NewIndexActivityimport com.misit.abpenergy.Rimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.Constantsclass FgHazardService:Service() {    var TAG ="FgHazardService"    lateinit var manager:NotificationManager    private var tokenPassingReceiver: BroadcastReceiver?=null    lateinit var hazardSave :HazardSaveOffline    lateinit var bgHazardService:Intent    override fun onCreate() {        reciever(this@FgHazardService)        Log.d(TAG,"onCreate")        hazardSave = HazardSaveOffline()        createNotificationChannel()        bgHazardService = Intent(this@FgHazardService,BgHazardService::class.java)        super.onCreate()    }    override fun onBind(intent: Intent?): IBinder? {        return null    }    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {        Log.d(TAG,"onStartCommand")        intent.let {            when(it!!.action){                Constants.SERVICE_START -> showNotification()                Constants.SERVICE_STOP -> stopService()            }        }        return super.onStartCommand(intent, flags, startId)    }    override fun onDestroy() {        super.onDestroy()    }    private fun showNotification() {        Log.d(TAG,"showNotification")        val notificationIntent = Intent(this, NewIndexActivity::class.java)        val pendingIntent = PendingIntent.getActivity(this, 1, notificationIntent, 0)        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val notification =                Notification.Builder(this, Constants.CHANNEL_ID).setContentText("Synchronize . . .!!!").setSmallIcon(                    R.drawable.abp_white                ).setContentIntent(pendingIntent).build()            ConfigUtil.playNotificationSound(this@FgHazardService,"Play")            hazardSave.getToken(this@FgHazardService,"SavingHazard","FgHazardDone")            startForeground(Constants.NOTIFICATION_ID, notification)        }    }    private fun createNotificationChannel(){        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){            val serviceChannel = NotificationChannel(                Constants.CHANNEL_ID,                "Saving Service Channel",                NotificationManager.IMPORTANCE_DEFAULT            )            manager = getSystemService(                NotificationManager::class.java            )            manager.createNotificationChannel(serviceChannel)        }    }    private fun stopService(){        manager.cancel(Constants.NOTIFICATION_ID)        stopForeground(true)        stopSelf()        Log.d(TAG, "Service Stopped!!")    }    private fun reciever(c: Context){        Log.d(TAG,"reciever")        tokenPassingReceiver= object : BroadcastReceiver() {            override fun onReceive(context: Context, intent: Intent) {                val bundle = intent.extras                if (bundle != null) {                    if (bundle.containsKey("SavingHazard")) {                        val tokenData = bundle.getString("SavingHazard")                        Log.d(TAG,tokenData)                        if(tokenData=="FgHazardDone"){                            startStopService(FgHazardService::class.java,c)                        }else if(tokenData=="BgHazardDone"){                            bgStopService(bgHazardService,c)                        }                    }                }            }        }    }    private fun startStopService(jvClass:Class<*>,c:Context) {        if(isMyServiceRunning(jvClass)){            var intent = Intent(c, jvClass).apply {                this.action = Constants.SERVICE_STOP                LocalBroadcastManager.getInstance(c).unregisterReceiver(tokenPassingReceiver!!)                Log.d(TAG,"SERVICE_STOP")            }            stopService(intent)        }else{            var intent = Intent(c, jvClass).apply {                this.action = Constants.SERVICE_START                Log.d(TAG,"SERVICE_START")            }            startService(intent)        }    }    private fun isMyServiceRunning(mClass: Class<*>): Boolean {        val manager: ActivityManager =getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager        for (service: ActivityManager.RunningServiceInfo in manager.getRunningServices(Integer.MAX_VALUE)){            if(mClass.name.equals(service.service.className)){                return true                Log.d(TAG,"isMyServiceRunning")            }        }        return false    }    private fun bgStopService(intent: Intent,c:Context){        stopService(intent)        Log.d(TAG,"bgStopService")        LocalBroadcastManager.getInstance(c).unregisterReceiver(tokenPassingReceiver!!)    }}