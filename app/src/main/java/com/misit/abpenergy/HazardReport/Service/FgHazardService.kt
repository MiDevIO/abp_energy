package com.misit.abpenergy.HazardReport.Serviceimport android.app.*import android.content.Intentimport android.os.Buildimport android.os.IBinderimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.misit.abpenergy.NewIndexActivityimport com.misit.abpenergy.Rimport com.misit.abpenergy.Utils.Constantsimport es.dmoral.toasty.Toastyclass FgHazardService:Service() {    lateinit var manager:NotificationManager    lateinit var hazardSave :HazardSaveOffline    override fun onCreate() {        hazardSave = HazardSaveOffline()        createNotificationChannel()        super.onCreate()    }    override fun onBind(intent: Intent?): IBinder? {        return null    }    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {        intent.let {            when(it!!.action){                Constants.SERVICE_START -> showNotification()                Constants.SERVICE_STOP -> stopService()            }        }        return super.onStartCommand(intent, flags, startId)    }    override fun onDestroy() {        super.onDestroy()    }    private fun showNotification() {        val notificationIntent = Intent(this, NewIndexActivity::class.java)        val pendingIntent = PendingIntent.getActivity(this, 1, notificationIntent, 0)        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val notification =                Notification.Builder(this, Constants.CHANNEL_ID).setContentText("Synchronize . . .!!!").setSmallIcon(                    R.drawable.abp_white                ).setContentIntent(pendingIntent).build()            hazardSave.getToken(this@FgHazardService,"SavingHazard","FgHazardDone")            startForeground(Constants.NOTIFICATION_ID, notification)        }    }    private fun createNotificationChannel(){        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){            val serviceChannel = NotificationChannel(                Constants.CHANNEL_ID,                "Saving Service Channel",                NotificationManager.IMPORTANCE_DEFAULT            )            manager = getSystemService(                NotificationManager::class.java            )            manager.createNotificationChannel(serviceChannel)        }    }    private fun stopService(){        manager.cancel(Constants.NOTIFICATION_ID)        stopForeground(true)        stopSelf()        Toasty.info(this@FgHazardService, "Service Stopped!!").show()    }}