package com.misit.abpenergy.HazardReport.SQLite.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport com.misit.abpenergy.HazardReport.SQLite.Model.HazardHeaderModelimport com.misit.abpenergy.SQLite.DbHelperimport es.dmoral.toasty.Toastyclass HazardHeaderDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<HazardHeaderModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    private fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: HazardHeaderModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("$tbItem",null,cv)        closeAccess()        return hasil!!    }    fun getItem(idHazard: String): HazardHeaderModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE idHazard = ?", arrayOf(idHazard))        c?.moveToFirst()        var itemModels = HazardHeaderModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    fun getAll(): ArrayList<HazardHeaderModel> {        val listItem : ArrayList<HazardHeaderModel> = ArrayList()        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem ",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): HazardHeaderModel {        val idHazard = cursor.getInt(cursor.getColumnIndex("idHazard"))        val uid = cursor.getString(cursor.getColumnIndex("uid"))        val perusahaan = cursor.getString(cursor.getColumnIndex("perusahaan"))        val tgl_hazard = cursor.getString(cursor.getColumnIndex("tgl_hazard"))        val jam_hazard = cursor.getString(cursor.getColumnIndex("jam_hazard"))        val idKemungkinan = cursor.getInt(cursor.getColumnIndex("idKemungkinan"))        val idKeparahan = cursor.getInt(cursor.getColumnIndex("idKeparahan"))        val deskripsi = cursor.getString(cursor.getColumnIndex("deskripsi"))        val lokasi = cursor.getString(cursor.getColumnIndex("lokasi"))        val lokasi_detail = cursor.getString(cursor.getColumnIndex("lokasi_detail"))        val status_perbaikan = cursor.getString(cursor.getColumnIndex("status_perbaikan"))        val user_input = cursor.getString(cursor.getColumnIndex("user_input"))        val time_input = cursor.getString(cursor.getColumnIndex("time_input"))        val hazardHeaderModel = HazardHeaderModel()        hazardHeaderModel.idHazard = idHazard        hazardHeaderModel.uid = uid        hazardHeaderModel.perusahaan = perusahaan        hazardHeaderModel.tgl_hazard = tgl_hazard        hazardHeaderModel.jam_hazard = jam_hazard        hazardHeaderModel.idKemungkinan = idKemungkinan        hazardHeaderModel.idKeparahan = idKeparahan        hazardHeaderModel.deskripsi = deskripsi        hazardHeaderModel.lokasi = lokasi        hazardHeaderModel.lokasi_detail = lokasi_detail        hazardHeaderModel.status_perbaikan = status_perbaikan        hazardHeaderModel.user_input = user_input        hazardHeaderModel.time_input = time_input        return hazardHeaderModel    }    fun deleteItem(item:Int){        openAccess()        val hasil = sqlDatabase?.delete("$tbItem","idHazard = ? ", arrayOf(item.toString()))        if(hasil!! <0 ){            Toasty.error(c!!,"Gagal Hapus").show()        }else{            Toasty.success(c!!,"Hapus Berhasil").show()        }        closeAccess()    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun updateItem(item: HazardHeaderModel, idKemungkinan:Int):Boolean{        openAccess()        val items = ContentValues()        items.put("uid",item.uid)        items.put("perusahaan",item.perusahaan)        items.put("tgl_hazard",item.tgl_hazard)        items.put("jam_hazard",item.jam_hazard)        items.put("idKemungkinan",item.idKemungkinan)        items.put("idKeparahan",item.idKeparahan)        items.put("deskripsi",item.deskripsi)        items.put("lokasi",item.lokasi)        items.put("lokasi_detail",item.lokasi_detail)        items.put("status_perbaikan",item.status_perbaikan)        items.put("user_input",item.user_input)        items.put("time_input",item.time_input)        val hasil = sqlDatabase?.update("$tbItem",items,"idHazard = ?", arrayOf("${idKemungkinan}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : HazardHeaderModel): ContentValues {        var cv = ContentValues()        cv.put("uid",item.uid)        cv.put("perusahaan",item.perusahaan)        cv.put("tgl_hazard",item.tgl_hazard)        cv.put("jam_hazard",item.jam_hazard)        cv.put("idKemungkinan",item.idKemungkinan)        cv.put("idKeparahan",item.idKeparahan)        cv.put("deskripsi",item.deskripsi)        cv.put("lokasi",item.lokasi)        cv.put("lokasi_detail",item.lokasi_detail)        cv.put("status_perbaikan",item.status_perbaikan)        cv.put("user_input",item.user_input)        cv.put("time_input",item.time_input)        return cv    }    companion object{        val tbItem = "HAZARD_HEADER"    }}