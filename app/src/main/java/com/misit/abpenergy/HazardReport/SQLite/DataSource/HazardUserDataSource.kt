package com.misit.abpenergy.HazardReport.SQLite.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport com.misit.abpenergy.HazardReport.SQLite.Model.HazardHeaderModelimport com.misit.abpenergy.HazardReport.SQLite.Model.HazardUserModelimport com.misit.abpenergy.SQLite.DbHelperclass HazardUserDataSource(c:Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<HazardUserModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    companion object{        val tbItem = "HAZARD_USER"    }    private fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: HazardUserModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("${tbItem}",null,cv)        closeAccess()        return hasil!!    }    fun getItem(): HazardUserModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "${tbItem} ", null)        c?.moveToFirst()        var itemModels = HazardUserModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    private fun createCV(item : HazardUserModel): ContentValues {        var cv = ContentValues()        cv.put("total_hazard",item.total_hazard)        cv.put("verify_hazard",item.verify_hazard)        return cv    }    private fun fetchRow(cursor: Cursor): HazardUserModel {        val total_hazard = cursor.getString(cursor.getColumnIndex("total_hazard"))        val verify_hazard = cursor.getString(cursor.getColumnIndex("verify_hazard"))        val model = HazardUserModel()        model.total_hazard = total_hazard        model.verify_hazard = verify_hazard        return model    }    fun deleteAll(): Boolean {        openAccess()        val hasil = sqlDatabase?.delete("${tbItem}",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }}