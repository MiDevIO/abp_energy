package com.misit.abpenergy.Serviceimport android.app.Activityimport android.app.Applicationimport android.content.Contextimport android.content.Intentimport android.util.Logimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.DataSource.DataUsersSourceimport com.misit.abpenergy.Model.DataUsersModelimport com.misit.abpenergy.Utils.PrefsUtilimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.asyncimport kotlinx.coroutines.launchclass InitUtil(c:Context) {    private var dataUserDatasource: DataUsersSource?=null    init {        dataUserDatasource = DataUsersSource(c)    }    fun loadUsers(name: String,msg: String,c: Context,username:String?){        GlobalScope.launch(Dispatchers.IO) {            Log.d("DataSave", "Ok4")            val deferred = async {                dataUserDatasource?.deleteAll() ?: false            }            if(deferred.await()){                val def = async {                    val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPoint::class.java)                    val response = apiEndPoint?.dataUserCorutine(username)                    if(response!=null){                        val usersModel = DataUsersModel()                        if(response.isSuccessful) {                            var res = response.body()                            if (res != null) {                                if (res.dataUser != null) {                                    val dt = res.dataUser                                    var dataHazard = if(res.dataHazard!=null){ res.dataHazard} else { 0 }                                    var datInspeksi = if(res.datInspeksi!=null){ res.datInspeksi} else { 0 }                                    usersModel.compString = 0                                    usersModel.department = dt?.department                                    usersModel.dept = dt?.dept                                    usersModel.email = dt?.email                                    usersModel.flag = dt?.flag                                    usersModel.id_dept = dt?.idDept                                    usersModel.id_perusahaan = dt?.idPerusahaan                                    usersModel.nama_lengkap = dt?.namaLengkap                                    usersModel.id_sect = dt?.idSect                                    usersModel.id_session = dt?.idSession                                    usersModel.id_user = dt?.idUser                                    usersModel.inc = dt?.inc                                    usersModel.level = dt?.level                                    usersModel.nama_perusahaan = dt?.namaPerusahaan                                    usersModel.nik = dt?.nik                                    usersModel.password = dt?.password                                    usersModel.perusahaan = dt?.perusahaan                                    usersModel.photo_profile = dt?.photoProfile                                    usersModel.rule = dt?.rule                                    usersModel.sect = dt?.sect                                    usersModel.section = dt?.section                                    usersModel.status = dt?.status                                    usersModel.tglentry = dt?.tglentry                                    usersModel.time_in = dt?.timeIn                                    usersModel.timelog = dt?.timelog                                    usersModel.ttd = dt?.ttd                                    usersModel.user_entry = dt?.userEntry                                    usersModel.username = USERNAME                                    usersModel.dataHazard = dataHazard                                    usersModel.dataInspeksi = datInspeksi                                    val result = dataUserDatasource?.insertItem(usersModel)                                    if (result != null) {                                        if(result>=0){                                            Log.d("DataSave","${result}")                                            sendMessageToActivity(name,msg,c)                                        }else{                                            loadUsers(name,msg,c,username)                                        }                                    }                                }                            }                        }                    }                }                def.await()            }        }    }    companion object{        var USERNAME ="USERNAME"    }    private fun sendMessageToActivity(name: String,msg: String,c: Context) {        val intent = Intent()        intent.action = "com.misit.abpenergy"        intent.putExtra(name, msg)        LocalBroadcastManager.getInstance(c).sendBroadcast(intent)    }}