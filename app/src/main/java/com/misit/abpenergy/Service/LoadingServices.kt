package com.misit.abpenergy.Serviceimport android.app.*import android.content.Contextimport android.content.Intentimport android.net.ConnectivityManagerimport android.os.Buildimport android.os.CountDownTimerimport android.os.IBinderimport android.util.Logimport android.widget.Toastimport androidx.appcompat.app.AlertDialogimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Model.KaryawanModelimport com.misit.abpenergy.NewIndexActivityimport com.misit.abpenergy.Rimport com.misit.abpenergy.Sarpras.Realm.PenumpangModelimport com.misit.abpenergy.Sarpras.SaranaResponse.ListSaranaResponseimport com.misit.abpenergy.Utils.Constantsimport com.misit.abpenergy.Utils.PrefsUtilimport io.realm.Realmimport io.realm.RealmResultsimport io.realm.Sortimport kotlinx.android.synthetic.main.activity_main.*import kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass LoadingServices: Service() {    lateinit var manager: NotificationManager    var karyawanModel : ArrayList<KaryawanModel>? = null    override fun onBind(intent: Intent?): IBinder? {        return null    }    override fun onCreate() {        createNotificationChannel()        super.onCreate()    }    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {        intent.let {            when(it!!.action){                Constants.SERVICE_START -> showNotification()                Constants.SERVICE_STOP -> stopService()            }        }        return super.onStartCommand(intent, flags, startId)    }    private fun showNotification() {        val notificationIntent = Intent(this, NewIndexActivity::class.java)        val pendingIntent = PendingIntent.getActivity(this, 1, notificationIntent, 0)        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val notification =                Notification.Builder(this, Constants.CHANNEL_ID).setContentText("Mengambil data....!!!").setSmallIcon(                    R.drawable.abp_white                ).setContentIntent(pendingIntent).build()            startForeground(Constants.NOTIFICATION_ID, notification)            Log.d("LoadingServices", "Service Started!!")            corutineSarana()        }    }    private fun savingHazard() {        object : CountDownTimer(30000, 10) {            override fun onTick(millisUntilFinished: Long) {                Log.d("LoadingServices", "seconds remaining: " + millisUntilFinished / 1000)            }            override fun onFinish() {                stopService(Intent(this@LoadingServices, LoadingServices::class.java).apply {                    this.action = Constants.SERVICE_STOP                })                Log.d("LoadingServices", "done")            }        }.start()    }    fun koneksiInActive(){        AlertDialog.Builder(this)            .setTitle("Maaf Koneksi Internet Tidak Ada!")            .setPositiveButton("OK, Keluar", { dialog,                                               which ->            }).show()    }    private fun loadSarana(){        val apiEndPoint = ApiClient.getClient(this@LoadingServices)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getAllSarana()        call?.enqueue(object : Callback<ListSaranaResponse?> {            override fun onFailure(call: Call<ListSaranaResponse?>, t: Throwable) {                if (!cekKoneksi(this@LoadingServices)) {                    koneksiInActive()                }            }            override fun onResponse(                call: Call<ListSaranaResponse?>,                response: Response<ListSaranaResponse?>            ) {                var i = 1                val listSarana = response.body()                if (listSarana != null) {                    listSarana.karyawan?.let {                        //                        karyawan?.addAll(it)                        listSarana.karyawan?.forEach {                            karyawanModel?.add(                                KaryawanModel(                                    i.toLong(),                                    it.nik!!,                                    it.nama!!,                                    it.jabatan!!                                )                            )                            i++                        }                        PrefsUtil.getInstance()                            .setStringState(                                PrefsUtil.AWAL_BULAN,                                listSarana.awalBulan                            )                        PrefsUtil.getInstance()                            .setStringState(                                PrefsUtil.AKHIR_BULAN,                                listSarana.akhirBulan                            )                        listPenumpang()                    }                }            }        })    }    private fun corutineSarana()= runBlocking{        var i = 1        val apiEndPoint = ApiClient.getClient(this@LoadingServices)!!.create(ApiEndPoint::class.java)        launch(Dispatchers.IO){            val response = apiEndPoint.corutineAllSarana()            if (response.isSuccessful) {                for (karyawan in response.body()?.karyawan!!) {                    karyawanModel?.add(                        KaryawanModel(                            i.toLong(),                            karyawan.nik!!,                            karyawan.nama!!,                            karyawan.jabatan!!                        )                    )                    i++                }                PrefsUtil.getInstance()                    .setStringState(                        PrefsUtil.AWAL_BULAN,                        response?.body()?.awalBulan                    )                PrefsUtil.getInstance()                    .setStringState(                        PrefsUtil.AKHIR_BULAN,                        response?.body()?.akhirBulan                    )                if(listPenumpang()){                    Log.d("LoadingServices", "Realm Success!!")                    stopService()                }else{                    Log.d("LoadingServices", "Realm Failed!!")                }            }else{                koneksiInActive()            }        }    }    fun listPenumpang():Boolean{        var realm = Realm.getDefaultInstance()        realm?.executeTransaction {            var listPenumpang =                realm?.where(PenumpangModel::class.java)                    ?.findAllSorted("id", Sort.DESCENDING)            listPenumpang?.deleteAllFromRealm()            val penumpang = PenumpangModel()            karyawanModel?.forEach {                penumpang.id = it.id                penumpang.nik = it.nik                penumpang.nama = it.nama                penumpang.jabatan = it.jabatan                try {                    realm?.copyToRealm(penumpang)//                        stopService()                } catch (e: Exception) {                    Log.d("LoadingServices", "Realm Failed!!")                    Toast.makeText(                        this@LoadingServices,                        "Load Data Karyawan Gagal : $e",                        Toast.LENGTH_SHORT                    ).show()                }            }        }        realm?.close()        if(realm.isClosed){            return true        }        return false    }    fun cekKoneksi(context: Context):Boolean{        val connectivityManager= context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager        val networkInfo = connectivityManager.activeNetworkInfo        return networkInfo != null && networkInfo.isConnected    }    private fun createNotificationChannel(){        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){            val serviceChannel = NotificationChannel(                Constants.CHANNEL_ID,                "Saving Service Channel",                NotificationManager.IMPORTANCE_DEFAULT            )            manager = getSystemService(                NotificationManager::class.java            )            manager.createNotificationChannel(serviceChannel)        }    }    private fun stopService(){        sendMessageToActivity("Loaded")        manager.cancel(Constants.NOTIFICATION_ID)        stopForeground(true)        stopSelf()//        Toasty.info(this@LoadingServices,"Service Stopped!!").show()        Log.d("LoadingServices", "Service Stopped!!")    }    private fun sendMessageToActivity(msg: String) {        val intent = Intent()        intent.action = "com.misit.abpenergy"        intent.putExtra("LoadData", msg)        LocalBroadcastManager.getInstance(this).sendBroadcast(intent)    }}