package com.misit.abpenergy.Serviceimport android.app.*import android.content.Contextimport android.content.Intentimport android.net.ConnectivityManagerimport android.os.Buildimport android.os.CountDownTimerimport android.os.IBinderimport android.util.Logimport android.widget.Toastimport androidx.appcompat.app.AlertDialogimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Model.KaryawanModelimport com.misit.abpenergy.NewIndexActivityimport com.misit.abpenergy.Rimport com.misit.abpenergy.Sarpras.Realm.PenumpangModelimport com.misit.abpenergy.Sarpras.SaranaResponse.ListSaranaResponseimport com.misit.abpenergy.Sarpras.Service.LoadSaranaimport com.misit.abpenergy.Utils.Constantsimport com.misit.abpenergy.Utils.PrefsUtilimport io.realm.Realmimport io.realm.RealmResultsimport io.realm.Sortimport kotlinx.android.synthetic.main.activity_main.*import kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass LoadingServices: Service() {    lateinit var manager: NotificationManager    lateinit var sarana:LoadSarana    var ListKaryawan : ArrayList<KaryawanModel>? = null    override fun onBind(intent: Intent?): IBinder? {        return null    }    override fun onCreate() {        Log.d("LoadingServices","CreateService")        ListKaryawan = ArrayList()        sarana = LoadSarana()        createNotificationChannel()        super.onCreate()    }    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {        Log.d("LoadingServices","commanStart")        intent.let {            when(it!!.action){                Constants.SERVICE_START -> showNotification()                Constants.SERVICE_STOP -> stopService()            }        }        return super.onStartCommand(intent, flags, startId)    }    private fun showNotification() {        Log.d("LoadingServices","ShowNotification")        val notificationIntent = Intent(this, NewIndexActivity::class.java)        val pendingIntent = PendingIntent.getActivity(this, 1, notificationIntent, 0)        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val notification =                Notification.Builder(this, Constants.CHANNEL_ID).setContentText("Mengambil data....!!!").setSmallIcon(                    R.drawable.abp_white                ).setContentIntent(pendingIntent).build()            sarana.run(this@LoadingServices,"fgSarana","fgDone")            startForeground(Constants.NOTIFICATION_ID, notification)            Log.d("LoadingServices", "Service Started!!")        }    }    private fun createNotificationChannel(){        Log.d("LoadingServices","CreateChannel")        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){            val serviceChannel = NotificationChannel(                Constants.CHANNEL_ID,                "Saving Service Channel",                NotificationManager.IMPORTANCE_DEFAULT            )            manager = getSystemService(                NotificationManager::class.java            )            manager.createNotificationChannel(serviceChannel)        }    }    private fun stopService(){//        sendMessageToActivity("Loaded")        manager.cancel(Constants.NOTIFICATION_ID)        stopForeground(true)        stopSelf()        Log.d("LoadingServices", "Service Stopped!!")    }    private fun sendMessageToActivity(msg: String) {        val intent = Intent()        intent.action = "com.misit.abpenergy"        intent.putExtra("LoadData", msg)        LocalBroadcastManager.getInstance(this).sendBroadcast(intent)    }}