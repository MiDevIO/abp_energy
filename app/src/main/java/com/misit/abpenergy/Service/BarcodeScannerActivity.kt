package com.misit.abpenergy.Serviceimport android.Manifestimport android.annotation.SuppressLintimport android.app.Activityimport android.content.Intentimport android.content.pm.PackageManagerimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.util.SparseArrayimport android.view.SurfaceHolderimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport androidx.core.util.isNotEmptyimport com.google.android.gms.vision.CameraSourceimport com.google.android.gms.vision.Detectorimport com.google.android.gms.vision.barcode.Barcodeimport com.google.android.gms.vision.barcode.BarcodeDetectorimport com.misit.abpenergy.Rimport com.misit.abpenergy.Sarpras.SarprasActivityimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_barcode_scanner.*import java.lang.Exceptionclass BarcodeScannerActivity : AppCompatActivity() {    private val requestCodeCameraPermission = 1999    private lateinit var cameraSource : CameraSource    private lateinit var detector: BarcodeDetector    private var hasilQRCodeScan:String?= null    private var aktivitas:String?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_barcode_scanner)        title = "Scan QRcode"        aktivitas = intent.getStringExtra("aktivitas")        if(ContextCompat.checkSelfPermission(this@BarcodeScannerActivity,Manifest.permission.CAMERA)!=PackageManager.PERMISSION_GRANTED){            askForCameraPermission()        }else{            setupControl()        }    }    private fun setupControl() {        detector = BarcodeDetector.Builder(this@BarcodeScannerActivity).build()        cameraSource = CameraSource.Builder(this@BarcodeScannerActivity,detector).setAutoFocusEnabled(true).build()        cameraSrufaceView.holder.addCallback(surgaceCallBack)        detector.setProcessor(processor)    }    private fun askForCameraPermission(){        ActivityCompat.requestPermissions(this@BarcodeScannerActivity,        arrayOf(Manifest.permission.CAMERA),requestCodeCameraPermission)    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {//        if(requestCode == requestCodeCameraPermission && grantResults.isNotEmpty()  && grantResults[0] == PackageManager.PERMISSION_GRANTED){////        }else{//            Toasty.error(this@BarcodeScannerActivity,"Permission Denied!").show()//        }        when (requestCode) {            requestCodeCameraPermission -> {                // If request is cancelled, the result arrays are empty.                if ((grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)) {                    // permission was granted, yay! Do the                    // contacts-related task you need to do.                    setupControl()                    Toasty.info(this@BarcodeScannerActivity,"PERMISSION_GRANTED",Toasty.LENGTH_SHORT).show()                } else {                    // permission denied, boo! Disable the                    // functionality that depends on this permission.                    Toasty.info(this@BarcodeScannerActivity,"PERMISSION_DENIED",Toasty.LENGTH_SHORT).show()                }                return            }            // Add other 'when' lines to check for other            // permissions this app might request.            else -> {                // Ignore all other requests.                Toasty.info(this@BarcodeScannerActivity,"PERMISSION_Ignore",Toasty.LENGTH_SHORT).show()            }        }        super.onRequestPermissionsResult(requestCode, permissions, grantResults)    }    private val surgaceCallBack = object : SurfaceHolder.Callback{        @SuppressLint("MissingPermission")        override fun surfaceCreated(holder: SurfaceHolder) {            try {                cameraSource.start(holder)            }catch (e:Exception){                Toasty.error(this@BarcodeScannerActivity,"Something Went Wrong!").show()            }        }        override fun surfaceChanged(holder: SurfaceHolder, format: Int, width: Int, height: Int) {        }        override fun surfaceDestroyed(holder: SurfaceHolder) {            cameraSource.stop()        }    }    private val processor = object :Detector.Processor<Barcode>{        override fun release() {        }        override fun receiveDetections(p0: Detector.Detections<Barcode>?) {            if (p0!=null && p0.detectedItems.isNotEmpty()){                var qCodes : SparseArray<Barcode> = p0.detectedItems                var code = qCodes.valueAt(0)                if(aktivitas!=null){                    addTeamData(aktivitas!!,code.displayValue)                }            }else{//                textScanResult.text = ""            }        }    }    private fun addTeamData(aktivitas:String,hasil:String){        if (aktivitas=="addTeam"){            var intent = Intent()            intent.putExtra("NikTeam",hasil)            setResult(Activity.RESULT_OK,intent)            finish()        }    }}