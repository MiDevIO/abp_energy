package com.misit.abpenergy.Serviceimport android.app.*import android.app.job.JobParametersimport android.app.job.JobServiceimport android.content.BroadcastReceiverimport android.content.Contextimport android.content.Intentimport android.content.IntentFilterimport android.os.Buildimport android.util.Logimport android.view.Viewimport androidx.lifecycle.observeimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.misit.abpenergy.HazardReport.HazardReportActivityimport com.misit.abpenergy.HazardReport.Service.BgHazardServiceimport com.misit.abpenergy.HazardReport.Service.HazardSaveOfflineimport com.misit.abpenergy.HomePage.IndexActivityimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.ConnectionLiveDataimport com.misit.abpenergy.Utils.Constantsimport com.misit.abpenergy.Utils.PrefsUtilimport kotlinx.android.synthetic.main.index_new.*import kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.launchimport java.lang.Exceptionimport kotlin.random.Randomclass JobServices : JobService(){    private var TAG="JobScheduler"    private var jobcanceled = false    lateinit var manager: NotificationManager    lateinit var hazardSave : HazardSaveOffline    var tokenPassingReceiver : BroadcastReceiver?=null    lateinit var jobParameters: JobParameters    lateinit var bgHazardService:Intent    override fun onCreate() {        Log.d(TAG,"onCreate")        reciever()        LocalBroadcastManager.getInstance(this@JobServices).registerReceiver(tokenPassingReceiver!!, IntentFilter("com.misit.abpenergy"))        PrefsUtil.initInstance(this@JobServices)        if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN", false)) {            USERNAME = PrefsUtil.getInstance().getStringState(PrefsUtil.USER_NAME, "")        }        bgHazardService = Intent(this@JobServices, BgHazardService::class.java)        hazardSave= HazardSaveOffline()        super.onCreate()    }    override fun onStartJob(params: JobParameters?): Boolean {        Log.d(TAG,"Job Started")        if (params != null) {            jobParameters = params        }        doBackground()        backgroundJob()        return true    }    override fun onStopJob(params: JobParameters?): Boolean {        Log.d(TAG,"Job Cancelation Before Completion")        stopService(bgHazardService)        jobcanceled=true        return true    }    private fun doBackground(){//        var counter = 0//        while(counter<=100){//            try {////                Thread.sleep(1000)//                Log.d(TAG,"Counter : $counter | JobId ${jobParameters.jobId}")//            }catch (e:InterruptedException){//                Log.d(TAG,e.toString())//            }//            counter++//            jobFinished(jobParameters,true)//        }    }    private fun backgroundJob(){        GlobalScope.launch(Dispatchers.IO) {            hazardSave.getToken(this@JobServices, "SavingHazard", "BgHazardDone")        }    }    private fun reciever() {        tokenPassingReceiver = object : BroadcastReceiver() {            override fun onReceive(context: Context, intent: Intent) {                val bundle = intent.extras                if (bundle != null) {                    if (bundle.containsKey("SavingHazard")) {                        val tokenData = bundle.getString("SavingHazard")                        if(tokenData=="FgHazardDone"){//                                ConfigUtil.startStopService(FgHazardService::class.java,this@JobServices, USERNAME,tokenPassingReceiver!!)                                LocalBroadcastManager.getInstance(this@JobServices).unregisterReceiver(tokenPassingReceiver!!)                            jobFinished(jobParameters,true)                            Log.d("ServiceName", tokenData)                        }                        if(tokenData=="BgHazardDone"){                            LocalBroadcastManager.getInstance(this@JobServices).unregisterReceiver(tokenPassingReceiver!!)                            stopService(bgHazardService)                            Log.d("ServiceName", tokenData)                            jobFinished(jobParameters,true)                        }                        if(tokenData=="KOSONG"){                            LocalBroadcastManager.getInstance(this@JobServices).unregisterReceiver(tokenPassingReceiver!!)                            stopService(bgHazardService)                            Log.d("ServiceName", tokenData)                            var intent = Intent(this@JobServices, HazardReportActivity::class.java)                            var rCode = (100..1000).random()//                            ConfigUtil.showNotification(this@JobServices,"Hazard Report","Hazard Report Kosong",intent,rCode,"Hazard Report")                            jobFinished(jobParameters,true)                        }                    }                }            }        }    }    init {        Log.d(TAG,"init reciever")    }    companion object{        var USERNAME = "USERNAME"    }}