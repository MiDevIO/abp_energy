package com.misit.abpenergy.Serviceimport android.app.*import android.app.job.JobParametersimport android.app.job.JobServiceimport android.content.BroadcastReceiverimport android.content.Contextimport android.content.ContextWrapperimport android.content.Intentimport android.graphics.Bitmapimport android.graphics.BitmapFactoryimport android.net.Uriimport android.os.Buildimport android.util.Logimport androidx.core.net.toUriimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.bumptech.glide.Glideimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.HazardReport.Response.HazardReportResponseimport com.misit.abpenergy.HazardReport.SQLite.DataSource.HazardDetailDataSourceimport com.misit.abpenergy.HazardReport.SQLite.DataSource.HazardHeaderDataSourceimport com.misit.abpenergy.HazardReport.Service.BgHazardServiceimport com.misit.abpenergy.HazardReport.Service.FgHazardServiceimport com.misit.abpenergy.NewIndexActivityimport com.misit.abpenergy.Rimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.Constantsimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_new_hazard.*import kotlinx.android.synthetic.main.index_new.*import kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.launchimport okhttp3.MediaType.Companion.toMediaTypeOrNullimport okhttp3.MultipartBodyimport okhttp3.RequestBodyimport okhttp3.RequestBody.Companion.asRequestBodyimport okhttp3.RequestBody.Companion.toRequestBodyimport retrofit2.Responseimport java.io.Fileimport java.io.IOExceptionimport java.net.URIclass JobServices : JobService(){    private var TAG="JobScheduler"    private var jobcanceled = false    lateinit var manager: NotificationManager    private var tokenPassingReceiver: BroadcastReceiver?=null    lateinit var bgHazardService:Intent    override fun onCreate() {        bgHazardService = Intent(this@JobServices,BgHazardService::class.java)        super.onCreate()    }    override fun onStartJob(params: JobParameters?): Boolean {        Log.d(TAG,"Job Started")        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {            startStopService(FgHazardService::class.java,this)        }else{            startService(bgHazardService)        }        jobFinished(params,false)        return true    }    override fun onStopJob(params: JobParameters?): Boolean {        Log.d(TAG,"Job Cancelation Before Completion")        jobcanceled=true        return true    }    private fun reciever(c:Context){        tokenPassingReceiver= object : BroadcastReceiver() {            override fun onReceive(context: Context, intent: Intent) {                val bundle = intent.extras                if (bundle != null) {                    if (bundle.containsKey("SavingHazard")) {                        val tokenData = bundle.getString("SavingHazard")                        Log.d("ServiceName",tokenData)                        if(tokenData=="FgHazardDone"){                            startStopService(FgHazardService::class.java,c)                        }else if(tokenData=="BgHazardDone"){                            bgStopService(bgHazardService,c)                        }                    }                }            }        }    }    private fun startStopService(jvClass:Class<*>,c:Context) {        if(isMyServiceRunning(jvClass)){            var intent = Intent(c, jvClass).apply {                this.action = Constants.SERVICE_STOP                LocalBroadcastManager.getInstance(c).unregisterReceiver(tokenPassingReceiver!!)            }            stopService(intent)        }else{            var intent = Intent(c, jvClass).apply {                this.action = Constants.SERVICE_START            }            startService(intent)        }    }    private fun isMyServiceRunning(mClass: Class<*>): Boolean {        val manager: ActivityManager =getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager        for (service: ActivityManager.RunningServiceInfo in manager.getRunningServices(Integer.MAX_VALUE)){            if(mClass.name.equals(service.service.className)){                return true            }        }        return false    }    private fun bgStopService(intent: Intent,c:Context){        stopService(intent)        LocalBroadcastManager.getInstance(c).unregisterReceiver(tokenPassingReceiver!!)    }    init {        reciever(this@JobServices)    }}