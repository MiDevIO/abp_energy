package com.misit.abpenergy.Serviceimport android.app.*import android.app.job.JobParametersimport android.app.job.JobServiceimport android.content.BroadcastReceiverimport android.content.Contextimport android.content.Intentimport android.content.IntentFilterimport android.os.Buildimport android.util.Logimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.misit.abpenergy.HazardReport.Service.BgHazardServiceimport com.misit.abpenergy.HazardReport.Service.FgHazardServiceimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.Constantsclass JobServices : JobService(){    private var TAG="JobScheduler"    private var jobcanceled = false    lateinit var manager: NotificationManager    private var tokenPassingReceiver: BroadcastReceiver?=null    lateinit var bgHazardService:Intent    override fun onCreate() {        reciever(this)        Log.d(TAG,"onCreate")        bgHazardService = Intent(this,BgHazardService::class.java)        LocalBroadcastManager.getInstance(this).registerReceiver(tokenPassingReceiver!!, IntentFilter("com.misit.abpenergy"))        super.onCreate()    }    override fun onStartJob(params: JobParameters?): Boolean {        Log.d(TAG,"Job Started")        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {            Log.d(TAG,"FgHazardService")            startStopService(FgHazardService::class.java,this)        }else{            Log.d(TAG,"bgHazardService")            startService(bgHazardService)        }        jobFinished(params,false)        return true    }    override fun onStopJob(params: JobParameters?): Boolean {        Log.d(TAG,"Job Cancelation Before Completion")        jobcanceled=true        return true    }    private fun reciever(c:Context){        Log.d(TAG,"reciever")        tokenPassingReceiver= object : BroadcastReceiver() {            override fun onReceive(context: Context, intent: Intent) {                val bundle = intent.extras                if (bundle != null) {                    if (bundle.containsKey("SavingHazard")) {                        val tokenData = bundle.getString("SavingHazard")                        Log.d(TAG,tokenData)                        if(tokenData=="FgHazardDone"){                            startStopService(FgHazardService::class.java,c)//                            ConfigUtil.playNotificationSound(this@JobServices,"Stop")                        }else if(tokenData=="BgHazardDone"){                            bgStopService(bgHazardService,c)                        }                    }                }            }        }    }    private fun startStopService(jvClass:Class<*>,c:Context) {        if(isMyServiceRunning(jvClass)){            var intent = Intent(c, jvClass).apply {                this.action = Constants.SERVICE_STOP                LocalBroadcastManager.getInstance(c).unregisterReceiver(tokenPassingReceiver!!)                Log.d("SERVICE_STOP_JOB","SERVICE_STOP_JOB")                Log.d("isMyServiceRunning","SERVICE_STOP_JOB")            }            stopService(intent)        }else{            var intent = Intent(c, jvClass).apply {                this.action = Constants.SERVICE_START                Log.d("SERVICE_START","SERVICE_START_JOB")                Log.d("isMyServiceRunning","SERVICE_START_JOB")            }            startService(intent)        }    }    private fun isMyServiceRunning(mClass: Class<*>): Boolean {        val manager: ActivityManager =getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager        for (service: ActivityManager.RunningServiceInfo in manager.getRunningServices(Integer.MAX_VALUE)){            if(mClass.name.equals(service.service.className)){                return true                Log.d("isMyServiceRunning","true 2" )            }        }        Log.d("isMyServiceRunning","false 2" )        return false    }    private fun bgStopService(intent: Intent,c:Context){        stopService(intent)        Log.d(TAG,"bgStopService")        LocalBroadcastManager.getInstance(c).unregisterReceiver(tokenPassingReceiver!!)    }    init {        Log.d(TAG,"init reciever")    }}