package com.misit.abpenergy.Serviceimport android.content.Contextimport android.content.Intentimport android.util.Logimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Model.DataUserModelimport com.misit.abpenergy.NewIndexActivityimport com.misit.abpenergy.Utils.PrefsUtilimport io.realm.Realmimport io.realm.exceptions.RealmExceptionimport io.realm.kotlin.createObjectimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.launchimport java.lang.Exceptionimport java.util.*class GetToken{    var TAG ="BgToken"    fun getToken(c:Context,username:String,name: String,msg: String) {        GlobalScope.launch(Dispatchers.IO) {            val apiEndPoint = ApiClient.getClient(c)!!.create(ApiEndPoint::class.java)            val response = apiEndPoint.dataUserCorutine(username)            if(response!!.isSuccessful) {                var res = response.body()                if (res != null) {                    if (res.dataUser != null) {                        val dt = res.dataUser                        var dataHazard = if(res.dataHazard!=null){ res.dataHazard} else { 0 }                        var datInspeksi = if(res.datInspeksi!=null){ res.datInspeksi} else { 0 }                        realmGetToken(                            c,                            dt!!.inc!!.toLong(),                            dt.namaLengkap!!,                            dt.nik!!,                            dt.username!!,                            dt.dept!!,                            dt.sect!!,                            dt.namaPerusahaan!!,                            dt.rule!!,                            dt.email!!,                            dt.level!!,                            dt.photoProfile!!,                            dt.perusahaan!!,                            dataHazard!!,                            datInspeksi!!,                            name,                            msg                        )                        var r = res.dataUser!!                        if (r.photoProfile != null) {                            PrefsUtil.getInstance()                                .setBooleanState(PrefsUtil.PHOTO_PROFILE, true)                            PrefsUtil.getInstance()                                .setStringState(PrefsUtil.PHOTO_URL, r.photoProfile)                        } else {                            PrefsUtil.getInstance()                                .setBooleanState(                                    PrefsUtil.PHOTO_PROFILE,                                    false                                )                        }                        if (r.rule != null) {                            NewIndexActivity.RULE = r.rule!!                            PrefsUtil.getInstance()                                .setStringState(                                    PrefsUtil.TOTAL_HAZARD_USER,                                    res!!.dataHazard!!.toString()                                )                            PrefsUtil.getInstance()                                .setStringState("COMPANY_NAME", res!!.dataUser!!.namaPerusahaan)                        }                    }                }            }        }    }    fun realmGetToken(c:Context,                    id:Long,                      nmLengkap:String,                      nik:String,                      username: String,                      dept:String,                      sect:String,                      nmPerusahaan:String,                      rule:String,                      email:String,                      level:String,                      ftProfile:String,                      perusahaan:Int,                      dataHazard:Int,                      dataInspeksi:Int,                      name:String,                      msg: String                      ){        GlobalScope.launch(Dispatchers.IO) {            var realm = Realm.getDefaultInstance()            realm.beginTransaction()            realm.deleteAll()            try {                var dataUser = realm.createObject(DataUserModel::class.java,id)                dataUser.nama_lengkap = nmLengkap                dataUser.nik = nik                dataUser.username = username                dataUser.nama_perusahaan = nmPerusahaan                dataUser.dept = dept                dataUser.sect = sect                dataUser.rule = rule                dataUser.email = email                dataUser.level = level                dataUser.photo_profile = ftProfile                dataUser.perusahaan = perusahaan                dataUser.dataHazard = dataHazard                dataUser.dataInspeksi = dataInspeksi                realm.commitTransaction()                Log.d("dataUser", dataUser.toString())            }catch (e:RealmException){                Log.d("ErrorTokenRealm",e.toString())            }            sendMessageToActivity(c,name,msg)            realm.close()        }    }    private fun sendMessageToActivity(c:Context,name:String,msg: String) {        Log.d(TAG,"sendMessageToActivity")        val intent = Intent()        intent.action = "com.misit.abpenergy"        intent.putExtra(name, msg)        LocalBroadcastManager.getInstance(c).sendBroadcast(intent)    }}