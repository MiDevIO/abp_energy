package com.misit.abpenergyimport android.content.Contextimport android.content.Intentimport android.content.pm.PackageInfoimport android.content.pm.PackageManagerimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.os.Handlerimport android.provider.Settingsimport android.util.Logimport com.bumptech.glide.Glideimport com.google.android.play.core.appupdate.AppUpdateManagerimport com.google.android.play.core.appupdate.AppUpdateManagerFactoryimport com.google.android.play.core.install.model.AppUpdateTypeimport com.google.android.play.core.install.model.UpdateAvailabilityimport com.misit.abpenergy.HomePage.IndexActivityimport com.misit.abpenergy.Login.LoginActivityimport com.misit.abpenergy.Master.ListUserActivityimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.Constantsimport com.misit.abpenergy.Utils.PrefsUtilimport kotlinx.android.synthetic.main.activity_main_page.*import kotlinx.android.synthetic.main.menu_option.view.*import java.util.*class MainPageActivity : AppCompatActivity() {    private var updateApp : AppUpdateManager?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main_page)        updateApp = AppUpdateManagerFactory.create(this)        checkUpdate()        val id = ConfigUtil.deviceId(this)        Log.d("DeviceId",id)        dirInit(this@MainPageActivity)    }    fun checkUpdate(){        if(updateApp!=null){            updateApp!!.appUpdateInfo!!.addOnSuccessListener { updateInfo ->                Log.d("checkUpdate","Run")                if(updateInfo.updateAvailability()==UpdateAvailability.UPDATE_AVAILABLE                    && updateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)){                    updateApp!!.startUpdateFlowForResult(updateInfo,AppUpdateType.IMMEDIATE,this,Constants.APP_IN_UPDATE)                }else{                    dirInit(this@MainPageActivity)                }            }        }else{            Log.d("checkUpdate","$updateApp")        }    }    fun proggressUpdate(){        updateApp!!.appUpdateInfo!!.addOnSuccessListener  { updateInfo ->            Log.d("checkUpdate","Run")            if(updateInfo.updateAvailability()==UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS                && updateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)){                updateApp!!.startUpdateFlowForResult(updateInfo,AppUpdateType.IMMEDIATE,this,Constants.APP_IN_UPDATE)            }else{                dirInit(this@MainPageActivity)            }        }    }    private fun firstInstall(c:Context){        if(PrefsUtil.getInstance().getBooleanState("INTRO_APP",false)){            loadingAnimate()        }else{            startActivity(Intent(c,IntroActivity::class.java))            finish()        }    }    fun loadingAnimate(){        val runnable= {            var besar = progressHorizontal.progress            progressHorizontal.progress = besar + 100            if(besar<100){                loadingAnimate()            } else {                if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN", false))                {                    val intent = Intent(this, IndexActivity::class.java)                    startActivity(intent)                }                else                {                    val intent = Intent(this, LoginActivity::class.java)                    startActivity(intent)                }                finish()            }        }        Handler().postDelayed(runnable, 100)    }    override fun onResume() {        Locale.setDefault(Locale.US)        proggressUpdate()        versionApp()        super.onResume()    }    private fun dirInit(c:Context){        Glide.with(c).load(R.drawable.abp).into(imageView)        PrefsUtil.initInstance(c)        ConfigUtil.changeColor(this@MainPageActivity)        ConfigUtil.deleteInABPIMAGES(c,"ABP_IMAGES")        ConfigUtil.createFolder(c,"ABP_IMAGES")        ConfigUtil.createFolder(c,"PROFILE_IMAGE")        ConfigUtil.createFolder(c,"HAZARD_TEMP")        ConfigUtil.createFolder(c,"HAZARD_OFFLINE")        ConfigUtil.createFolder(c,"TEMUAN")        ConfigUtil.createFolder(c,"PENANGGUNG_JAWAB")        ConfigUtil.createFolder(c,"PERBAIKAN")        firstInstall(c)    }    fun versionApp(){        Use@ try {            val pInfo: PackageInfo = this.getPackageManager().getPackageInfo(packageName, 0)            tvVersionCode.text = pInfo.versionName        } catch (e: PackageManager.NameNotFoundException) {            e.printStackTrace()        }    }    companion object {        private  var TAG="MainPageLog"    }}