package com.misit.abpenergy.Sarpras.Serviceimport android.content.Contextimport android.content.Intentimport android.util.Logimport androidx.appcompat.app.AlertDialogimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.DataSource.DataUsersSourceimport com.misit.abpenergy.Model.DataUsersModelimport com.misit.abpenergy.Model.KaryawanModelimport com.misit.abpenergy.Sarpras.SQLite.PenumpangDataSourceimport com.misit.abpenergy.Sarpras.SQLite.PenumpangModelimport com.misit.abpenergy.Sarpras.SaranaResponse.PenumpangListModelimport com.misit.abpenergy.Utils.PrefsUtilimport kotlinx.coroutines.*class LoadSarana {    var listKaryawan : ArrayList<KaryawanModel>? = null    private var penumpangDataSource:PenumpangDataSource?=null    private var penumpangModel:ArrayList<PenumpangListModel>?=null    private var username:String?=null    lateinit var dataUserDatasource: DataUsersSource    fun run(c:Context,name:String,msg:String){        if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN", false)) {            username =                PrefsUtil.getInstance().getStringState(PrefsUtil.USER_NAME, "")        }        penumpangDataSource = PenumpangDataSource(c)        dataUserDatasource = DataUsersSource(c)        penumpangModel = ArrayList()        listKaryawan = ArrayList()        PrefsUtil.initInstance(c)        GlobalScope.launch {            async {                corutineSarana(c,name,msg)            }.await()        }    }    suspend fun corutineSarana(c:Context,name: String,msg: String){        GlobalScope.launch(Dispatchers.IO){            val deferred = async {                deletePenumpang()            }            val result = deferred.await()            Log.d("ResultDelete","${result}")            if(result){        async {            var len =0            listKaryawan?.clear()            var i = 1            val apiEndPoint = ApiClient.getClient(c)!!.create(ApiEndPoint::class.java)            val response = apiEndPoint.corutineAllSarana()            if (response.isSuccessful) {                val r= response.body()?.karyawan                r.let {                    len = r?.size!!                    r?.forEach {                        penumpangModel?.add(                            PenumpangListModel(i.toLong(),it!!.nik!!,it!!.nama!!,it!!.jabatan!!)                        )                        i++                    }                    PrefsUtil.getInstance()                        .setStringState(                            PrefsUtil.AWAL_BULAN,                            response.body()?.awalBulan                        )                    PrefsUtil.getInstance()                        .setStringState(                            PrefsUtil.AKHIR_BULAN,                            response.body()?.akhirBulan                        )                }                copyPenumpang(penumpangModel!!)//                listPenumpang(c,name,msg)            }else{                koneksiInActive(c)            }            if(i>=len){                sendMessageToActivity(name,msg,c)                loadUsers(name,msg,c)//                Log.d("CounterInsert",i.toString())            }        }.await()            }        }    }    fun deletePenumpang():Boolean{        return penumpangDataSource!!.deleteAll()    }    suspend private fun copyPenumpang(penumpang: ArrayList<PenumpangListModel>){        CoroutineScope(Dispatchers.IO).launch{            async {                var p = PenumpangModel()                penumpang.forEach {                    p.id = it.id                    p.nik = it.nik                    p.nama = it.nama                    p.jabatan = it.jabatan                    penumpangDataSource?.insertItem(p)                }            }.await()        }    }    private fun deleteUsers():Boolean{        return dataUserDatasource.deleteAll()    }    private fun loadUsers(name: String,msg: String,c: Context){        GlobalScope.launch(Dispatchers.IO) {            Log.d("DataSave", "Ok4")            val deferred = async {                deleteUsers()            }        if(deferred.await()){            val def = async {                val apiEndPoint = ApiClient.getClient(c)?.create(ApiEndPoint::class.java)                val response = apiEndPoint?.dataUserCorutine(username!!)                if(response!=null){                    val usersModel = DataUsersModel()                    if(response.isSuccessful) {                        var res = response.body()                        if (res != null) {                            if (res.dataUser != null) {                                val dt = res.dataUser                                var dataHazard = if(res.dataHazard!=null){ res.dataHazard} else { 0 }                                var datInspeksi = if(res.datInspeksi!=null){ res.datInspeksi} else { 0 }                                usersModel.compString = 0                                usersModel.department = dt?.department                                usersModel.dept = dt?.dept                                usersModel.email = dt?.email                                usersModel.flag = dt?.flag                                usersModel.id_dept = dt?.idDept                                usersModel.id_perusahaan = dt?.idPerusahaan                                usersModel.id_sect = dt?.idSect                                usersModel.id_session = dt?.idSession                                usersModel.id_user = dt?.idUser                                usersModel.id = dt?.id!!                                usersModel.level = dt?.level                                usersModel.nama_perusahaan = dt?.namaPerusahaan                                usersModel.nik = dt?.nik                                usersModel.password = dt?.password                                usersModel.perusahaan = dt?.perusahaan                                usersModel.photo_profile = dt?.photoProfile                                usersModel.rule = dt?.rule                                usersModel.sect = dt?.sect                                usersModel.section = dt?.section                                usersModel.status = dt?.status                                usersModel.tglentry = dt?.tglentry                                usersModel.time_in = dt?.timeIn                                usersModel.timelog = dt?.timelog                                usersModel.ttd = dt?.ttd                                usersModel.user_entry = dt?.userEntry                                usersModel.username = username                                usersModel.dataHazard = dataHazard                                usersModel.dataInspeksi = datInspeksi                                val result = dataUserDatasource.insertItem(usersModel)                                Log.d("DataSave","${result}")                            }                        }                    }                }            }            def.await()        }        }    }    fun koneksiInActive(c:Context){        AlertDialog.Builder(c)            .setTitle("Maaf Koneksi Internet Tidak Ada!")            .setPositiveButton("OK, Keluar", { dialog,                                               which ->            }).show()    }    private fun sendMessageToActivity(name: String,msg: String,c: Context) {        val intent = Intent()        intent.action = "com.misit.abpenergy"        intent.putExtra(name, msg)        LocalBroadcastManager.getInstance(c).sendBroadcast(intent)    }}