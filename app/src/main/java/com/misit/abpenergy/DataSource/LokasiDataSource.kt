package com.misit.abpenergy.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport com.misit.abpenergy.Model.LokasiModelimport com.misit.abpenergy.Model.PerusahaanModelimport com.misit.abpenergy.SQLite.DbHelperimport es.dmoral.toasty.Toastyclass LokasiDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<LokasiModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    private fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: LokasiModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("$tbItem",null,cv)        closeAccess()        return hasil!!    }    fun getItem(idLok: String): LokasiModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE idLok = ?", arrayOf(idLok))        c?.moveToFirst()        var itemModels = LokasiModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    fun getAll(): ArrayList<LokasiModel> {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem ",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): LokasiModel {        val idLok = cursor.getInt(cursor.getColumnIndex("idLok"))        val lokasi = cursor.getString(cursor.getColumnIndex("lokasi"))        val tglInput = cursor.getString(cursor.getColumnIndex("tglInput"))        val userInput = cursor.getString(cursor.getColumnIndex("userInput"))        val lokasiModel = LokasiModel()        lokasiModel.idLok = idLok        lokasiModel.lokasi = lokasi        lokasiModel.tglInput = tglInput        lokasiModel.userInput = userInput        return lokasiModel    }    fun deleteItem(item:Int){        openAccess()        val hasil = sqlDatabase?.delete("$tbItem","idLok = ? ", arrayOf(item.toString()))        if(hasil!! <0 ){            Toasty.error(c!!,"Gagal Hapus").show()        }else{            Toasty.success(c!!,"Hapus Berhasil").show()        }        closeAccess()    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun updateItem(item: LokasiModel, idLok:Int):Boolean{        openAccess()        val items = ContentValues()        items.put("lokasi",item.lokasi)        items.put("userInput",item.userInput)        items.put("tglInput",item.tglInput)        val hasil = sqlDatabase?.update("$tbItem",items,"idLok = ?", arrayOf("${idLok}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : LokasiModel): ContentValues {        var cv = ContentValues()        cv.put("idLok",item.idLok)        cv.put("lokasi",item.lokasi)        cv.put("tglInput",item.tglInput)        cv.put("userInput",item.userInput)        return cv    }    companion object{        val tbItem = "LOKASI"    }}