package com.misit.abpenergy.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport androidx.core.database.getIntOrNullimport com.misit.abpenergy.Model.KemungkinanModelimport com.misit.abpenergy.SQLite.DbHelperimport com.misit.abpenergy.Sarpras.SQLite.PenumpangDataSourceimport es.dmoral.toasty.Toastyclass KemungkinanDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<KemungkinanModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    private fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: KemungkinanModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("$tbItem",null,cv)        closeAccess()        return hasil!!    }    fun getItem(idKemungkinan: String): KemungkinanModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE idKemungkinan = ?", arrayOf(idKemungkinan))        c?.moveToFirst()        var itemModels = KemungkinanModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    fun getAll(): ArrayList<KemungkinanModel> {        val listItem : ArrayList<KemungkinanModel> = ArrayList()        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem ORDER BY idKemungkinan DESC",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): KemungkinanModel {        val idKemungkinan = cursor.getInt(cursor.getColumnIndex("idKemungkinan"))        val kemungkinan = cursor.getString(cursor.getColumnIndex("kemungkinan"))        val flag = cursor.getInt(cursor.getColumnIndex("flag"))        val nilai = cursor.getInt(cursor.getColumnIndex("nilai"))        val kemungkinanModel = KemungkinanModel()        kemungkinanModel.idKemungkinan = idKemungkinan        kemungkinanModel.kemungkinan = kemungkinan        kemungkinanModel.flag = flag        kemungkinanModel.nilai = nilai        return kemungkinanModel    }    fun deleteItem(item:Int):Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem","idKemungkinan = ? ", arrayOf(item.toString()))        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun cekData(idKemungkinan: String,kemungkinan_update:String): Int {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT count(*) FROM "+                "${tbItem} WHERE idKemungkinan = '"+idKemungkinan+"' and kemungkinan_update = '"+kemungkinan_update+"'",null)        c?.let {            if(it.moveToFirst()){                return it?.getIntOrNull(0) ?: 0            }        }        c?.close()        closeAccess()        return 0    }    fun updateItem(item: KemungkinanModel, idKemungkinan:Int):Boolean{        openAccess()        val items = ContentValues()        items.put("kemungkinan",item.kemungkinan)        items.put("flag",item.flag)        items.put("nilai",item.nilai)        items.put("kemungkinan_update",item.kemungkinan_update)        val hasil = sqlDatabase?.update("$tbItem",items,"idKemungkinan = ?", arrayOf("${idKemungkinan}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : KemungkinanModel): ContentValues {        var cv = ContentValues()        cv.put("idKemungkinan",item.idKemungkinan)        cv.put("kemungkinan",item.kemungkinan)        cv.put("flag",item.flag)        cv.put("nilai",item.nilai)        cv.put("kemungkinan_update",item.kemungkinan_update)        return cv    }    companion object{        val tbItem = "KEMUNGKINAN"    }}