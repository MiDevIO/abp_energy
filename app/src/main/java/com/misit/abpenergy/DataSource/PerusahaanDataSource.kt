package com.misit.abpenergy.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport com.misit.abpenergy.Model.PerusahaanModelimport com.misit.abpenergy.SQLite.DbHelperimport es.dmoral.toasty.Toastyclass PerusahaanDataSource(val c: Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    var listItem :ArrayList<PerusahaanModel>?=null    init {        listItem = ArrayList()        dbHelper = DbHelper(c)    }    private fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    private fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: PerusahaanModel):Long{        openAccess()        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("$tbItem",null,cv)        closeAccess()        return hasil!!    }    fun getItem(idPerusahaan: String): PerusahaanModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE idPerusahaan = ?", arrayOf(idPerusahaan))        c?.moveToFirst()        var itemModels = PerusahaanModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    fun getAll(): ArrayList<PerusahaanModel> {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem ",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): PerusahaanModel {        val idPerusahaan = cursor.getInt(cursor.getColumnIndex("idPerusahaan"))        val namaPerusahaan = cursor.getString(cursor.getColumnIndex("namaPerusahaan"))        val flag = cursor.getInt(cursor.getColumnIndex("flag"))        val timeIn = cursor.getString(cursor.getColumnIndex("timeIn"))        val perusahaanModel = PerusahaanModel()        perusahaanModel.idPerusahaan = idPerusahaan        perusahaanModel.namaPerusahaan = namaPerusahaan        perusahaanModel.flag = flag        perusahaanModel.timeIn = timeIn        return perusahaanModel    }    fun deleteItem(item:Int){        openAccess()        val hasil = sqlDatabase?.delete("$tbItem","idPerusahaan = ? ", arrayOf(item.toString()))        if(hasil!! <0 ){            Toasty.error(c!!,"Gagal Hapus").show()        }else{            Toasty.success(c!!,"Hapus Berhasil").show()        }        closeAccess()    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun updateItem(item: PerusahaanModel, idPerusahaan:Int):Boolean{        openAccess()        val items = ContentValues()        items.put("namaPerusahaan",item.namaPerusahaan)        items.put("flag",item.flag)        items.put("timeIn",item.timeIn)        val hasil = sqlDatabase?.update("$tbItem",items,"idPerusahaan = ?", arrayOf("${idPerusahaan}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : PerusahaanModel): ContentValues {        var cv = ContentValues()        cv.put("idPerusahaan",item.idPerusahaan)        cv.put("namaPerusahaan",item.namaPerusahaan)        cv.put("flag",item.flag)        cv.put("timeIn",item.timeIn)        return cv    }    companion object{        val tbItem = "PERUSAHAAN"    }}