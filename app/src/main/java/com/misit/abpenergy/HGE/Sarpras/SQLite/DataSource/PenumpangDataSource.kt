package com.misit.abpenergy.HGE.Sarpras.SQLite.DataSourceimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport android.database.sqlite.SQLiteDatabaseimport android.database.sqlite.SQLiteExceptionimport androidx.core.database.getIntOrNullimport com.misit.abpenergy.SQLite.DbHelperimport com.misit.abpenergy.HGE.Sarpras.SQLite.Model.PenumpangModelclass PenumpangDataSource(val c:Context) {    var dbHelper : DbHelper    var sqlDatabase : SQLiteDatabase?=null    init {        dbHelper = DbHelper(c)    }    fun openAccess(){        sqlDatabase = dbHelper.writableDatabase    }    fun closeAccess(){        sqlDatabase?.close()        dbHelper?.close()    }    fun insertItem(item: PenumpangModel):Long{        var cv = createCV(item)        var hasil = sqlDatabase?.insertOrThrow("$tbItem",null,cv)        return hasil!!    }    fun getItem(nik: String): PenumpangModel {        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE nik = ?", arrayOf(nik))        c?.moveToFirst()        var itemModels = PenumpangModel()        c?.let {            itemModels = fetchRow(it)        }        c?.close()        closeAccess()        return itemModels    }    fun getAll(): ArrayList<PenumpangModel> {        var listItem : ArrayList<PenumpangModel> = ArrayList()        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem ",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    fun getFilter(cari:String?): ArrayList<PenumpangModel> {        var listItem : ArrayList<PenumpangModel> = ArrayList()        openAccess()        val c = sqlDatabase?.rawQuery("SELECT * FROM "+                "$tbItem WHERE nik like '%"+cari+"%' or nama like '%"+cari+"%' or jabatan like '%"+cari+"%' ",null)        if(c!!.moveToFirst()){            do {                listItem?.add(fetchRow(c))            }while (c.moveToNext())        }        c?.close()        closeAccess()        return listItem!!    }    private fun fetchRow(cursor: Cursor): PenumpangModel {        val id = cursor.getInt(cursor.getColumnIndex("id"))        val nik = cursor.getString(cursor.getColumnIndex("nik"))        val nama = cursor.getString(cursor.getColumnIndex("nama"))        val jabatan = cursor.getString(cursor.getColumnIndex("jabatan"))        val penumpangModel = PenumpangModel()        penumpangModel.id = id.toLong()        penumpangModel.nik = nik        penumpangModel.nama = nama        penumpangModel.jabatan = jabatan        return penumpangModel    }    fun deleteAll():Boolean{        openAccess()        val hasil = sqlDatabase?.delete("$tbItem",null,null)        if(hasil!! <0 ){            return false        }        closeAccess()        return true    }    fun deleteItem(nik: String):Boolean{        val hasil = sqlDatabase?.delete("$tbItem","nik = ? ", arrayOf(nik))        if(hasil!! <0 ){            return false        }        return true    }    suspend fun cekUser(nik: String,penumpang_update:String): Int {        openAccess()        try {            val c = sqlDatabase?.rawQuery("SELECT count(*) FROM "+                    "$tbItem WHERE nik = '"+nik+"' and penumpang_update = '"+penumpang_update+"'",null)            c?.let {                if(it.moveToFirst()){                    return it?.getIntOrNull(0) ?: 0                }            }            c?.close()            closeAccess()        }catch (e:SQLiteException){            return 0        }        return 0    }    fun updateItem(item: PenumpangModel, nik:String):Boolean{        openAccess()        val items = ContentValues()        items.put("nik",item.nik)        items.put("nama",item.nama)        items.put("jabatan",item.jabatan)        items.put("penumpang_update",item.penumpang_update)        val hasil = sqlDatabase?.update("$tbItem",items,"nik = ?", arrayOf("${nik}"))        if(hasil!! < 0){            return false        }        closeAccess()        return true    }    private fun createCV(item : PenumpangModel): ContentValues {        var cv = ContentValues()        cv.put("id",item.id)        cv.put("nik",item.nik)        cv.put("nama",item.nama)        cv.put("jabatan",item.jabatan)        return cv    }    companion object{        val tbItem = "PENUMPANG"    }}