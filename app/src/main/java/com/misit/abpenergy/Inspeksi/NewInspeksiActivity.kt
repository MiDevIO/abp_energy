package com.misit.abpenergy.Inspeksiimport android.app.Activityimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.view.Viewimport androidx.appcompat.app.AlertDialogimport androidx.recyclerview.widget.LinearLayoutManagerimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Inspeksi.Adapter.ListInspeksiAdapterimport com.misit.abpenergy.Inspeksi.Adapter.PicaAdapterimport com.misit.abpenergy.Inspeksi.Adapter.TeamInspeksiAdapterimport com.misit.abpenergy.Inspeksi.Response.*import com.misit.abpenergy.Login.LoginActivityimport com.misit.abpenergy.Rimport com.misit.abpenergy.Rkb.Response.CsrfTokenResponseimport com.misit.abpenergy.Service.BarcodeScannerActivityimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.PopupUtilimport com.misit.abpenergy.Utils.PrefsUtilimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_new_inspeksi.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.util.*import kotlin.collections.ArrayListclass NewInspeksiActivity : AppCompatActivity(),View.OnClickListener {    private var adapter: ListInspeksiAdapter? = null    private var teamAdapter : TeamInspeksiAdapter?=null    private var picaAdapter : PicaAdapter?=null    private var subItems:MutableList<SubItemsModels>?=null    private var teamList:MutableList<TeamInspeksiTempItem>?=null    private var picaList:MutableList<InspeksiPicaItem>?=null    private var page : Int=1    private var loading : Boolean=false    private var uniqueID:String?=null    private var formId:String?=null    private var csrf_token:String?=null    var curentPosition: Int=0    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_new_inspeksi)        val actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        uniqueID = UUID.randomUUID().toString()        formId = intent.getStringExtra(IDFORM)        var nameForm = intent.getStringExtra(NAMEFORM)        title = "FORM ${nameForm}".capitalize()        PrefsUtil.initInstance(this)        if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN",false)){            USERNAME = PrefsUtil.getInstance().getStringState(PrefsUtil.USER_NAME,"")            var nikTeam = PrefsUtil.getInstance().getStringState(PrefsUtil.NIK,"")            addTeamInspeksi(uniqueID!!, formId!!,nikTeam)            PopupUtil.dismissDialog()        }else{            val intent = Intent(this, LoginActivity::class.java)            startActivity(intent)            finish()        }        subItems= ArrayList()        teamList = ArrayList()        picaList = ArrayList()        adapter = ListInspeksiAdapter(this@NewInspeksiActivity,formId!!,uniqueID!!,            USERNAME,subItems!!)        val linearLayoutManager = LinearLayoutManager(this@NewInspeksiActivity)        val linearLayoutManager1 = LinearLayoutManager(this@NewInspeksiActivity)        val linearLayoutManager2 = LinearLayoutManager(this@NewInspeksiActivity)        rvListInspeksi?.layoutManager = linearLayoutManager        rvListInspeksi.adapter =adapter//        adapter?.setListener(this)        teamAdapter = TeamInspeksiAdapter(this@NewInspeksiActivity,teamList!!)        rvTeamInspeksi?.layoutManager = linearLayoutManager2        rvTeamInspeksi.adapter=teamAdapter        picaAdapter = PicaAdapter(this@NewInspeksiActivity,picaList!!)        rvPicaInspeksi?.layoutManager = linearLayoutManager1        rvPicaInspeksi.adapter=picaAdapter!!        teamList?.clear()        subItems?.clear()        picaList?.clear()        pullRefreshNewInspeksi.visibility = View.GONE        lnLoadingNewInspeksi.visibility = View.VISIBLE        loadInspeksi(formId!!,page.toString())        addTeamQrCode.setOnClickListener(this)        btnBatalInspeksi.setOnClickListener(this)        inTglInspeksi.setOnClickListener(this)        addPicaInspeksi.setOnClickListener(this)    }    override fun onClick(v: View?) {        if(v?.id==R.id.addTeamQrCode){            var intent = Intent(this@NewInspeksiActivity,BarcodeScannerActivity::class.java)            intent.putExtra("aktivitas","addTeam")            startActivityForResult(intent,100)        }        if(v?.id==R.id.btnBatalInspeksi){            onBackPressed()        }        if(v?.id==R.id.inTglInspeksi){            ConfigUtil.showDialogTgl(inTglInspeksi,this@NewInspeksiActivity)        }        if(v?.id==R.id.addPicaInspeksi){            var intent = Intent(this@NewInspeksiActivity,PicaInspeksiActivity::class.java)            intent.putExtra("formId",formId)            intent.putExtra("uniqueID",uniqueID)            startActivityForResult(intent,101)        }    }    override fun onResume() {        getToken()        super.onResume()    }    fun loadInspeksi(idforms:String,hal:String){        PopupUtil.showProgress(            this@NewInspeksiActivity,"Loading...","Memuat Form Inspeksi!")        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getListSubInspeksi(idforms)        call?.enqueue(object : Callback<InspeksiGroupsResponse> {            override fun onFailure(call: Call<InspeksiGroupsResponse>, t: Throwable) {                Log.d("ERRORLOG",t.toString())                PopupUtil.dismissDialog()            }            override fun onResponse(call: Call<InspeksiGroupsResponse>, response: Response<InspeksiGroupsResponse>) {                var listInspeksi = response.body()                if (listInspeksi != null) {                    if (listInspeksi != null) {                        loading = true                        listInspeksi.itemInspeksi!!.forEach {                            val subItem = SubItemsModels()                            var listItemArr: ArrayList<ItemsInspeksiModels>? = null                            listItemArr = ArrayList()                            subItem.nameSub = it.nameSub                            subItem.numSub = it.numSub                            it.items!!.forEach {                                val itemInspeksi = ItemsInspeksiModels()                                itemInspeksi.idForm = it.idForm                                itemInspeksi.idList = it.idList                                itemInspeksi.idSub = it.idSub                                itemInspeksi.listInspeksi = it.listInspeksi                                itemInspeksi.flag = it.flag                                itemInspeksi.tglInput = it.tglInput                                listItemArr.add(itemInspeksi)                            }                            subItem.items = listItemArr                            subItems!!.add(subItem)                        }                        adapter?.notifyDataSetChanged()                        pullRefreshNewInspeksi.visibility = View.VISIBLE                    }                }                PopupUtil.dismissDialog()                lnLoadingNewInspeksi.visibility = View.GONE            }        })    }    private fun getToken() {        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getToken("csrf_token")        call?.enqueue(object : Callback<CsrfTokenResponse> {            override fun onResponse(                call: Call<CsrfTokenResponse>,                response: Response<CsrfTokenResponse>            ) {                csrf_token = response.body()?.csrfToken            }            override fun onFailure(call: Call<CsrfTokenResponse>, t: Throwable) {                Log.d("csrf_token",t.toString())            }        })    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }    companion object{        var USERNAME="USERNAME"        var IDFORM = "IDFORM"        var NAMEFORM = "NAMEFORM"    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if(resultCode==Activity.RESULT_OK && requestCode==100){            var nikTeam = data!!.getStringExtra("NikTeam")            addTeamInspeksi(uniqueID!!,formId!!,nikTeam)            Log.d("addTeam",nikTeam)        }else if(resultCode==Activity.RESULT_OK && requestCode==101){            listPica(uniqueID!!)        }        super.onActivityResult(requestCode, resultCode, data)    }    override fun onBackPressed() {        areYouSure("Informasi","Apakah anda yakin?")    }    private fun areYouSure(titleDialog:String,msgDialog:String){        val builder = AlertDialog.Builder(this)        builder.setTitle(titleDialog)        builder.setMessage(msgDialog)        builder.setPositiveButton("Tidak") { dialog, which ->        }        builder.setNegativeButton("Ya") { dialog, which ->            deleteInspeksiTemp(uniqueID!!)        }        builder.show()    }    private fun addTeamInspeksi(idTemp:String,idForm:String,nikTeam:String){        PopupUtil.showProgress(this@NewInspeksiActivity,"Loading...","Menambah Team Inspeksi!")        val apiEndPoint = ApiClient.getClient(this@NewInspeksiActivity)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.addTeamInspeksi(idTemp,idForm,nikTeam)        call?.enqueue(object : Callback<ItemTempResponse> {            override fun onResponse(                call: Call<ItemTempResponse>,                response: Response<ItemTempResponse>            ) {                var r = response.body()                if(r!=null){                    teamList?.clear()                    loadTeamInspeksi(uniqueID!!)                    PopupUtil.dismissDialog()                }else{                    PopupUtil.dismissDialog()                }                PopupUtil.dismissDialog()            }            override fun onFailure(call: Call<ItemTempResponse>, t: Throwable) {                Log.d("ErrAddTeam",t.toString())                PopupUtil.dismissDialog()            }        })    }    private fun loadTeamInspeksi(idTemp:String){//        PopupUtil.showProgress(this@NewInspeksiActivity,"Loading...","Memuat Team Inspeksi!")        val apiEndPoint = ApiClient.getClient(this@NewInspeksiActivity)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.teamInspeksiTemp(idTemp)        call?.enqueue(object : Callback<TeamInspeksiTempResponse> {            override fun onResponse(                call: Call<TeamInspeksiTempResponse>,                response: Response<TeamInspeksiTempResponse>            ) {                var r = response.body()                if(r!=null){                    if(r.teamInspeksiTemp!=null)                    {                        var team = r!!.teamInspeksiTemp                        teamList?.addAll(team!!)                        teamAdapter?.notifyDataSetChanged()                        PopupUtil.dismissDialog()                    }else{                        Log.d("ErrorLoadTeam",r.toString())                        PopupUtil.dismissDialog()                    }                    PopupUtil.dismissDialog()                }else{                    Log.d("ErrorLoadTeam",r.toString())                    PopupUtil.dismissDialog()                }            }            override fun onFailure(call: Call<TeamInspeksiTempResponse>, t: Throwable) {                Log.d("ErrorLoadTeam",t.toString())                PopupUtil.dismissDialog()            }        })    }    private fun deleteInspeksiTemp(idTemp:String){        PopupUtil.showProgress(this@NewInspeksiActivity,"Loading...","Sedang Memproses . . .!")        val apiEndPoint = ApiClient.getClient(this@NewInspeksiActivity)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.deleteInspeksiTemp(idTemp)        call?.enqueue(object : Callback<ItemTempResponse> {            override fun onResponse(                call: Call<ItemTempResponse>,                response: Response<ItemTempResponse>            ) {                var r = response.body()                if(r!=null){                        finish()                    PopupUtil.dismissDialog()                }else{                    deleteInspeksiTemp(uniqueID!!)                    PopupUtil.dismissDialog()                }            }            override fun onFailure(call: Call<ItemTempResponse>, t: Throwable) {                Log.d("deleteTempInspeksi",t.toString())                PopupUtil.dismissDialog()            }        })    }    private fun listPica(idTemp:String){        picaList?.clear()        PopupUtil.showProgress(this@NewInspeksiActivity,"Loading...","Sedang Memproses . . .!")        val apiEndPoint = ApiClient.getClient(this@NewInspeksiActivity)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.listInspeksiPica(idTemp)        call?.enqueue(object : Callback<ListInspeksiPicaResponse> {            override fun onResponse(                call: Call<ListInspeksiPicaResponse>,                response: Response<ListInspeksiPicaResponse>            ) {                var r = response.body()                if(r!=null){                    picaList?.addAll(r!!.inspeksiPica!!)                    picaAdapter?.notifyDataSetChanged()                    PopupUtil.dismissDialog()                }else{                    PopupUtil.dismissDialog()                }            }            override fun onFailure(call: Call<ListInspeksiPicaResponse>, t: Throwable) {                PopupUtil.dismissDialog()                Log.d("ErrorPica",t.toString())            }        })    }}