package com.misit.abpenergy.Inspeksi.Adapterimport android.content.Contextimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.TextViewimport android.widget.Toastimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport androidx.swiperefreshlayout.widget.SwipeRefreshLayoutimport com.misit.abpenergy.Inspeksi.Response.ItemsInspeksiModelsimport com.misit.abpenergy.Inspeksi.Response.SubItemsModelsimport com.misit.abpenergy.Rimport es.dmoral.toasty.Toastyimport java.text.SimpleDateFormatclass ListInspeksiAdapter(private var c: Context?,                          private val subItemList:MutableList<SubItemsModels>):    RecyclerView.Adapter<ListInspeksiAdapter.MyViewHolder>(),ItemsInspeksiAdapter.OnItemsClickListener {    private var onItemClickListener: OnItemClickListener? = null    private val layoutInflater: LayoutInflater    private var simpleDateFormat: SimpleDateFormat? = null    lateinit var view:View//    API    private var itemAdapter: ItemsInspeksiAdapter? = null    private var itemList:MutableList<ItemsInspeksiModels>?=null//    API    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {        itemList = ArrayList()        view = layoutInflater.inflate(R.layout.sub_inspeksi_custom,parent,false)        return MyViewHolder(view)    }    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {        var listSub = subItemList[position]        holder.tvSub.text =listSub.nameSub        if(listSub.nameSub==null){            holder.tvSub.visibility = View.GONE            holder.vSub.visibility = View.GONE        }else{            holder.tvSub.visibility = View.VISIBLE            holder.vSub.visibility = View.VISIBLE        }        itemList = listSub.items        itemAdapter = ItemsInspeksiAdapter(c,itemList!!)        holder.rvItemInspeksi.layoutManager = LinearLayoutManager(c,            LinearLayoutManager.VERTICAL,false)        holder.rvItemInspeksi.adapter = itemAdapter        holder.rvItemInspeksi.isNestedScrollingEnabled =false        itemAdapter?.notifyDataSetChanged()    }    override fun getItemCount(): Int {        return subItemList.size    }    class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {        var tvSub = itemView.findViewById<View>(R.id.tvSub) as TextView        var rvItemInspeksi = itemView.findViewById<View>(R.id.rvItemInspeksi) as RecyclerView        var vSub = itemView.findViewById<View>(R.id.vSub) as View    }    interface OnItemClickListener{        fun onItemClick(idForm:String,nameForm:String)    }    fun setListener (listener: OnItemClickListener){        onItemClickListener = listener    }    init {        layoutInflater = LayoutInflater.from(c)        simpleDateFormat= SimpleDateFormat("yyyy-MM-dd")    }    override fun onItemsClick(idItems: String, items: String) {    }}