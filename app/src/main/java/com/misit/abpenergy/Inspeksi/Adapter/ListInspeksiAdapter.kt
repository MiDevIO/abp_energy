package com.misit.abpenergy.Inspeksi.Adapterimport android.content.Contextimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.LinearLayoutimport android.widget.TextViewimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Inspeksi.Response.ItemCounterModelsimport com.misit.abpenergy.Inspeksi.Response.ItemTempResponseimport com.misit.abpenergy.Inspeksi.Response.ItemsInspeksiModelsimport com.misit.abpenergy.Inspeksi.Response.SubItemsModelsimport com.misit.abpenergy.Rimport com.misit.abpenergy.Utils.PopupUtilimport com.misit.abpenergy.Utils.PrefsUtilimport es.dmoral.toasty.Toastyimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.text.SimpleDateFormatclass ListInspeksiAdapter(private var c: Context,                          private var idForm:String,                          private var uniqueID:String,                          private var username:String,                          private val subItemList:MutableList<SubItemsModels>):    RecyclerView.Adapter<ListInspeksiAdapter.MyViewHolder>(),ItemsInspeksiAdapter.OnItemsClickListener {    private val layoutInflater: LayoutInflater    private var simpleDateFormat: SimpleDateFormat? = null    lateinit var view:View    private var counterNow:Int=0    //    API    private var itemAdapter: ItemsInspeksiAdapter? = null    private var itemList:MutableList<ItemsInspeksiModels>?=null    private var onItemsCountListener: OnItemsCounterListener? = null//    API    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {        itemList = ArrayList()        PrefsUtil.initInstance(c)        view = layoutInflater.inflate(R.layout.sub_inspeksi_custom,parent,false)        return MyViewHolder(view)    }    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {        var listSub = subItemList[position]        holder.tvSub.text =listSub.nameSub        holder.tvNumb.text = listSub.numSub        if(listSub.nameSub==null){            holder.tvSub.visibility = View.GONE            holder.lnSub.visibility = View.GONE        }else{            holder.tvSub.visibility = View.VISIBLE            holder.lnSub.visibility = View.VISIBLE        }        itemList = listSub.items        itemAdapter = ItemsInspeksiAdapter(c,idForm,uniqueID,itemList!!)        holder.rvItemInspeksi.layoutManager = LinearLayoutManager(c,            LinearLayoutManager.VERTICAL,false)        holder.rvItemInspeksi.adapter = itemAdapter        holder.rvItemInspeksi.isNestedScrollingEnabled =false        itemAdapter?.notifyDataSetChanged()        itemAdapter?.setListener(this@ListInspeksiAdapter)    }    override fun getItemCount(): Int {        return subItemList.size    }    class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {        var tvSub = itemView.findViewById<View>(R.id.tvSub) as TextView        var rvItemInspeksi = itemView.findViewById<View>(R.id.rvItemInspeksi) as RecyclerView        var lnSub = itemView.findViewById<View>(R.id.lnSub) as LinearLayout        var tvNumb = itemView.findViewById<View>(R.id.tvNumb) as TextView    }    companion object{        var USERNAME = "USERNAME"    }    init {        layoutInflater = LayoutInflater.from(c)        simpleDateFormat= SimpleDateFormat("yyyy-MM-dd")    }    interface OnItemsCounterListener{        fun onCounter(idItem:String)    }    fun setListener (listenerCounter: OnItemsCounterListener){        onItemsCountListener = listenerCounter    }    override fun onRadioClick(idForm:String,idItem: String, uniqueID: String, option: Int,holder: ItemsInspeksiAdapter.MyViewHolder,yes:Int,no:Int,total:Int) {        postItemTemp(uniqueID,idForm,idItem,option.toString(),username,holder)        PrefsUtil.getInstance().setStringState(PrefsUtil.TOTAL_ITEM,total.toString())        PrefsUtil.getInstance().setStringState(PrefsUtil.YES_COUNTER,yes.toString())        PrefsUtil.getInstance().setStringState(PrefsUtil.NO_COUNTER,no.toString())        Toasty.warning(c!!,"Yes : ${yes}, No : ${no} = TotalItem ${total}").show()    }    private fun postItemTemp(uniqueID: String, idForm: String, idItem: String, answer: String, username: String,holder: ItemsInspeksiAdapter.MyViewHolder) {        PopupUtil.showLoading(c,"Loading","Saving...!")        val apiEndPoint = ApiClient.getClient(c)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.itemInspeksiTemp(uniqueID,idForm,idItem,answer,username)        call?.enqueue(object : Callback<ItemTempResponse> {            override fun onResponse(                call: Call<ItemTempResponse>,                response: Response<ItemTempResponse>            ) {                var r = response.body()                if(r!=null){                    if(r.success){                        PopupUtil.dismissDialog()                    }else{                        holder.rbYes.isChecked=false                        holder.rbNo.isChecked=false                        Toasty.error(c,"Mohon Periksa Kembali Isian Anda").show()                        PopupUtil.dismissDialog()                    }                }else{                    PopupUtil.dismissDialog()                }            }            override fun onFailure(call: Call<ItemTempResponse>, t: Throwable) {                Log.d("ItemIsnpeksiLog",t.toString())            }        })    }}