package com.misit.abpenergy.Inspeksiimport android.app.Activityimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.view.Viewimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.Inspeksi.Response.ItemTempResponseimport com.misit.abpenergy.Rimport com.misit.abpenergy.Rkb.Response.CsrfTokenResponseimport com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.PopupUtilimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_pica_inspeksi.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass PicaInspeksiActivity : AppCompatActivity() , View.OnClickListener{    private var uniqueID:String?=null    private var idForm:String?=null    private var csrf_token:String?=null    private var rbStatus:String?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_pica_inspeksi)        title = "Problem Identification Corrective Action"        val actionBar = supportActionBar        uniqueID = intent.getStringExtra("uniqueID")        idForm = intent.getStringExtra("formId")        actionBar?.setDisplayHomeAsUpEnabled(true)        inPicaTenggat.setOnClickListener(this)        btnPicaBatal.setOnClickListener(this)        btnPicaSimpan.setOnClickListener(this)    }    override fun onClick(v: View?) {        if(v?.id==R.id.inPicaTenggat){            ConfigUtil.showDialogTgl(inPicaTenggat,this@PicaInspeksiActivity)        }        if(v?.id==R.id.btnPicaBatal){            onBackPressed()        }        if(v?.id==R.id.btnPicaSimpan){            var temuan = inPicaTemuan.text.toString()            var buktiTemuan = ""            var nikPJ = inPicaNikPJ.text.toString()            var namaPJ = inPicaNamaPJ.text.toString()            var tglTenggat = inPicaTenggat.text.toString()            if(rbPicaSelesai.isChecked){                rbStatus = rbPicaSelesai.text.toString()            }else if(rbPicaBelumSelesai.isChecked){                rbStatus = rbPicaBelumSelesai.text.toString()            }else if(rbPicaDalamPengerjaan.isChecked){                rbStatus = rbPicaDalamPengerjaan.text.toString()            }else if(rbPicaBerlanjut.isChecked){                rbStatus = rbPicaBerlanjut.text.toString()            }            simpanPICA(uniqueID!!,idForm!!.toString(),temuan,buktiTemuan,nikPJ,namaPJ,tglTenggat,rbStatus!!)        }    }    private fun simpanPICA(idTemp:String,idForm:String,temuan:String,buktiTemuan:String,nikPJ:String,namaPJ:String,tglTenggat:String,rbStatus:String){        if(!isValidate()){            return        }        PopupUtil.showProgress(            this@PicaInspeksiActivity,            "Loading...",            "Menyimpan Pica ...!"        )        val apiEndPoint = ApiClient.getClient(this)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.inspeksiPicaTemp(idTemp,idForm,temuan,nikPJ,namaPJ,tglTenggat,rbStatus,csrf_token)        call?.enqueue(object : Callback<ItemTempResponse> {            override fun onResponse(                call: Call<ItemTempResponse>,                response: Response<ItemTempResponse>            ) {                var r =response.body()                if(r!=null){                   if(r!!.success){                       Toasty.success(this@PicaInspeksiActivity,"PICA Berhasil di tambah!").show()                        PopupUtil.dismissDialog()                       var intent= Intent()                       setResult(Activity.RESULT_OK,intent)                       finish()                   }else{                       Toasty.error(this@PicaInspeksiActivity,"PICA Gagal di tambah!").show()                       PopupUtil.dismissDialog()                   }                }else{                    Toasty.error(this@PicaInspeksiActivity,"PICA Gagal di tambah!").show()                    PopupUtil.dismissDialog()                }            }            override fun onFailure(call: Call<ItemTempResponse>, t: Throwable) {                Log.d("ErrorPica",t.toString())                PopupUtil.dismissDialog()            }        })    }    override fun onNavigateUp(): Boolean {        onBackPressed()        return super.onNavigateUp()    }    fun isValidate():Boolean {        clearError()        if (inPicaTemuan.text!!.isEmpty()) {            tilPicaTemuan.error = "Please Input Someting"            inPicaTemuan.requestFocus()            return false        }        if (inPicaTenggat.text!!.isEmpty()) {            tilPicaTenggat.error = "Please Input Someting"            inPicaTenggat.requestFocus()            return false        }        if (inPicaNikPJ.text!!.isEmpty()) {            tilPicaNikPJ.error = "Please Input Someting"            inPicaNikPJ.requestFocus()            return false        }        if (inPicaNamaPJ.text!!.isEmpty()) {            tilPicaNamaPJ.error = "Please Input Someting"            inPicaNamaPJ.requestFocus()            return false        }        return true    }    private fun clearError() {        tilPicaTemuan.error=null        tilPicaNamaPJ.error=null        tilPicaTenggat.error=null        tilPicaNikPJ.error=null    }    override fun onResume() {        getToken()        super.onResume()    }    private fun getToken() {        val apiEndPoint = ApiClient.getClient(this@PicaInspeksiActivity)!!.create(ApiEndPoint::class.java)        val call = apiEndPoint.getToken("csrf_token")        call?.enqueue(object : Callback<CsrfTokenResponse> {            override fun onResponse(                call: Call<CsrfTokenResponse>,                response: Response<CsrfTokenResponse>            ) {                csrf_token = response.body()?.csrfToken            }            override fun onFailure(call: Call<CsrfTokenResponse>, t: Throwable) {                Log.d("csrf_token",t.toString())            }        })    }}