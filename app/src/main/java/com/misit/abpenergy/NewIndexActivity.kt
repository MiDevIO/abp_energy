package com.misit.abpenergyimport android.Manifestimport android.app.Activityimport android.app.ActivityManagerimport android.app.job.JobInfoimport android.app.job.JobSchedulerimport android.content.*import android.content.pm.PackageManagerimport android.graphics.Colorimport android.graphics.drawable.ColorDrawableimport android.os.Buildimport android.os.Bundleimport android.os.CountDownTimerimport android.util.Logimport android.util.TypedValueimport android.view.*import android.widget.*import androidx.appcompat.app.AlertDialogimport androidx.appcompat.app.AppCompatActivityimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport androidx.localbroadcastmanager.content.LocalBroadcastManagerimport androidx.swiperefreshlayout.widget.CircularProgressDrawableimport com.bumptech.glide.Glideimport com.facebook.shimmer.ShimmerFrameLayoutimport com.google.android.datatransport.runtime.scheduling.Schedulerimport com.google.android.gms.tasks.OnCompleteListenerimport com.google.android.material.bottomsheet.BottomSheetDialogimport com.google.firebase.messaging.FirebaseMessagingimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointimport com.misit.abpenergy.CutiOnline.CutiOnlineActivityimport com.misit.abpenergy.CutiOnline.CutiOnlineAllActivityimport com.misit.abpenergy.CutiOnline.FormCutiActivityimport com.misit.abpenergy.CutiOnline.RosterCutiActivityimport com.misit.abpenergy.HazardReport.*import com.misit.abpenergy.HazardReport.SQLite.DataSource.HazardDetailDataSourceimport com.misit.abpenergy.HazardReport.SQLite.DataSource.HazardHeaderDataSourceimport com.misit.abpenergy.HazardReport.SQLite.DataSource.HazardValidationDataSourceimport com.misit.abpenergy.HazardReport.Service.HazardServiceimport com.misit.abpenergy.Inspeksi.*import com.misit.abpenergy.Login.FotoProfileActivityimport com.misit.abpenergy.Login.LoginActivityimport com.misit.abpenergy.Master.ListUserActivityimport com.misit.abpenergy.Model.DataUserModelimport com.misit.abpenergy.Monitoring_Produksi.*import com.misit.abpenergy.Response.GetUserResponseimport com.misit.abpenergy.Rkb.RkbActivityimport com.misit.abpenergy.Sarpras.*import com.misit.abpenergy.Sarpras.Service.SaranaServiceimport com.misit.abpenergy.Service.*import com.misit.abpenergy.Utils.ConfigUtilimport com.misit.abpenergy.Utils.Constantsimport com.misit.abpenergy.Utils.PrefsUtilimport es.dmoral.toasty.Toastyimport io.realm.Realmimport io.realm.exceptions.RealmExceptionimport kotlinx.android.synthetic.main.index_new.*import kotlinx.android.synthetic.main.menu_option.view.*import kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.launchimport java.sql.SQLExceptionimport java.util.*class NewIndexActivity : AppCompatActivity(),View.OnClickListener {    private var timer:CountDownTimer?=null    private var userRule:Array<String>?=null    private val requestCodeCameraPermission = 1999    private var  mDialogView:View?=null    private var tipe:String? = null    var fotoURL:String?=null    private var shimmerLayout:View?=null    private var shimmerProfileImage:ShimmerFrameLayout?=null    private var shimmerHazardUser:ShimmerFrameLayout?=null    private var shimmerInspeksiUser:ShimmerFrameLayout?=null    private var shimmerUserName:ShimmerFrameLayout?=null    private var shimmerNIK:ShimmerFrameLayout?=null    private var shimmerView:ShimmerFrameLayout?=null    private var shimmerView1:ShimmerFrameLayout?=null    private var shimmerSection:ShimmerFrameLayout?=null    private var shimmerCompany:ShimmerFrameLayout?=null    private var tokenPassingReceiver: BroadcastReceiver?=null    lateinit var saranaService:Intent    lateinit var bgTokenService:Intent    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.index_new)        title= "PT ALAMJAYA BARA PRATAMA"        shimmerLayout = findViewById(R.id.shimmerLayout)        shimmerProfileImage = shimmerLayout?.findViewById(R.id.shimmerProfileImage)        shimmerHazardUser = shimmerLayout?.findViewById(R.id.shimmerHazardUser)        shimmerHazardUser = shimmerLayout?.findViewById(R.id.shimmerHazardUser)        shimmerInspeksiUser = shimmerLayout?.findViewById(R.id.shimmerInspeksiUser)        shimmerUserName = shimmerLayout?.findViewById(R.id.shimmerUserName)        shimmerNIK = shimmerLayout?.findViewById(R.id.shimmerNIK)        shimmerView = shimmerLayout?.findViewById(R.id.shimmerView)        shimmerView1 = shimmerLayout?.findViewById(R.id.shimmerView1)        shimmerSection = shimmerLayout?.findViewById(R.id.shimmerSection)        shimmerCompany = shimmerLayout?.findViewById(R.id.shimmerCompany)        if(ContextCompat.checkSelfPermission(                this@NewIndexActivity,                Manifest.permission.CAMERA            )!= PackageManager.PERMISSION_GRANTED){            askForCameraPermission()        }        PrefsUtil.initInstance(this@NewIndexActivity)        if(PrefsUtil.getInstance().getBooleanState("IS_LOGGED_IN", false)){            USERNAME = PrefsUtil.getInstance().getStringState(PrefsUtil.USER_NAME, "")            NAMA_LENGKAP = PrefsUtil.getInstance().getStringState(PrefsUtil.NAMA_LENGKAP, "")            NIK = PrefsUtil.getInstance().getStringState(PrefsUtil.NIK, "")            DEPARTMENT = PrefsUtil.getInstance().getStringState(PrefsUtil.DEPT, "")            SECTON = PrefsUtil.getInstance().getStringState(PrefsUtil.SECTION, "")            LEVEL = PrefsUtil.getInstance().getStringState(PrefsUtil.LEVEL, "")            RULE = PrefsUtil.getInstance().getStringState(PrefsUtil.RULE, "")            PHOTO_PROFILE = PrefsUtil.getInstance().getBooleanState(PrefsUtil.PHOTO_PROFILE,false)            INTRO_APP = PrefsUtil.getInstance().getBooleanState("INTRO_APP",false)            COMPANY = PrefsUtil.getInstance().getStringState("COMPANY_NAME","")            tvUserName.text = NAMA_LENGKAP        }else{            val intent = Intent(this, LoginActivity::class.java)            startActivity(intent)            finish()        }    //        Rule User            userRule = RULE.split(",").toTypedArray()            var apprSarpras = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                Arrays.stream(userRule).anyMatch{ t -> t== "approve sarpras"}            } else {                userRule?.contains("approve sarpras")            }            if(apprSarpras!!){                btnSarprasApproveKabag.visibility= View.VISIBLE            }else{                btnSarprasApproveKabag.visibility= View.GONE            }    //        Rule User        val c = this@NewIndexActivity        btnTotal.setOnClickListener(c)        btnApprove.setOnClickListener(c)        btnWaiting.setOnClickListener(c)        btnCancel.setOnClickListener(c)        btnSarpras.setOnClickListener(c)        btnNewSarpras.setOnClickListener(c)        btnClose.setOnClickListener(c)        btnSarprasApproveKabag.setOnClickListener(this@NewIndexActivity)        btnOB.setOnClickListener(this@NewIndexActivity)        btnHAULING.setOnClickListener(this@NewIndexActivity)        btnCRUSHING.setOnClickListener(this@NewIndexActivity)        btnBARGING.setOnClickListener(this@NewIndexActivity)        btnSTOCKROOM.setOnClickListener(this@NewIndexActivity)        btnSTOCKPRODUCT.setOnClickListener(this@NewIndexActivity)        btnHazard.setOnClickListener(this@NewIndexActivity)        btnNewHazard.setOnClickListener(this@NewIndexActivity)        btnNewSarana.setOnClickListener(this@NewIndexActivity)        btnHazardALL.setOnClickListener(this@NewIndexActivity)        btnSarprasAll.setOnClickListener(this@NewIndexActivity)        btnInspection.setOnClickListener(this@NewIndexActivity)        btnQRCODES.setOnClickListener(this@NewIndexActivity)        cvBarcodeProfile.setOnClickListener(this@NewIndexActivity)        btnMenuTop.setOnClickListener(this@NewIndexActivity)        first_menu_item.setOnClickListener(this@NewIndexActivity)        second_menu_item.setOnClickListener(this@NewIndexActivity)        third_menu_item.setOnClickListener(this@NewIndexActivity)        fourth_menu_item.setOnClickListener(this@NewIndexActivity)        fabIC.setOnClickListener(this@NewIndexActivity)        btnCutiOnline.setOnClickListener(this@NewIndexActivity)        btnRosterCuti.setOnClickListener(this@NewIndexActivity)        btnCutiAllKaryawan.setOnClickListener(this@NewIndexActivity)        saranaService = Intent(this@NewIndexActivity, SaranaService::class.java)        bgTokenService = Intent(this@NewIndexActivity,BgTokenService::class.java)        stopService(saranaService)    }    private fun reciever(){       tokenPassingReceiver= object : BroadcastReceiver() {            override fun onReceive(context: Context, intent: Intent) {                val bundle = intent.extras                if (bundle != null) {                    if (bundle.containsKey("MyData")) {                        val tokenData = bundle.getString("MyData")                        Log.d("ServiceName",tokenData)                        tvTimer.text = tokenData                    }                    if (bundle.containsKey("LoadData")) {                        val tokenData = bundle.getString("LoadData")                        Log.d("ServiceName",tokenData)                        if(tokenData=="fgTokenService"){                            startStopService(FgTokenService::class.java)                        }else if(tokenData=="bgTokenService"){                            bgStopService(bgTokenService)                        }                    }                    if (bundle.containsKey("fgSarana")) {                        val tokenData = bundle.getString("fgSarana")                        Log.d("ServiceName","${tokenData} Index")                        if(tokenData=="fgDone"){                            startStopService(LoadingServices::class.java)                        }else{                            Toasty.info(this@NewIndexActivity,"Failed To Stop Service").show()                        }                    }                    if (bundle.containsKey("bgSarana")) {                        val tokenData = bundle.getString("bgSarana")                        Log.d("ServiceName","${tokenData} Index")                        if(tokenData=="bgDone"){                            bgStopService(saranaService)                        }else{                            Toasty.info(this@NewIndexActivity,"Failed To Load Data").show()                        }                    }                }            }        }    }    private fun bgStopService(intent: Intent){        stopService(intent)        LocalBroadcastManager.getInstance(this@NewIndexActivity).unregisterReceiver(tokenPassingReceiver!!)        realmToken()        shimmerStop()    }    private fun startStopService(jvClass:Class<*>) {        if(isMyServiceRunning(jvClass)){            var intent = Intent(this@NewIndexActivity, jvClass).apply {                this.action = Constants.SERVICE_STOP                LocalBroadcastManager.getInstance(this@NewIndexActivity).unregisterReceiver(tokenPassingReceiver!!)                realmToken()            }            stopService(intent)        }else{            shimmerStart()            var intent = Intent(this@NewIndexActivity, jvClass).apply {                this.action = Constants.SERVICE_START            }            intent.putExtra("username", USERNAME)            startService(intent)        }    }    private fun isMyServiceRunning(mClass: Class<*>): Boolean {        val manager: ActivityManager =getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager        for (service: ActivityManager.RunningServiceInfo in manager.getRunningServices(Integer.MAX_VALUE)){            if(mClass.name.equals(service.service.className)){                return true            }        }        return false    }    private fun uploadProfile(){        val intent = Intent(this@NewIndexActivity,FotoProfileActivity::class.java)        intent.putExtra("fotoURL",fotoURL)        startActivityForResult(intent,1234)    }    fun Int.toDp(context: Context):Int = TypedValue.applyDimension(        TypedValue.COMPLEX_UNIT_DIP, this.toFloat(), context.resources.displayMetrics    ).toInt()    override fun onOptionsItemSelected(item: MenuItem): Boolean {        return super.onOptionsItemSelected(item)    }    private fun askForCameraPermission(){        ActivityCompat.requestPermissions(            this@NewIndexActivity,            arrayOf(Manifest.permission.CAMERA,Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE), requestCodeCameraPermission        )    }    override fun onClick(v: View?) {        val c = this@NewIndexActivity        if(v?.id==R.id.fabIC){            fabIC.setColorFilter(ContextCompat.getColor(c, R.color.red_smooth), android.graphics.PorterDuff.Mode.SRC_IN)            val bottomSheetDialog = BottomSheetDialog(c,R.style.BottomSheetDialogTheme)            val bottomSheetView = LayoutInflater.from(c).inflate(R.layout.bottom_sheet_dialog,findViewById<LinearLayout>(R.id.bottomSheet))            bottomSheetView?.findViewById<View>(R.id.btnNewSarprasMenu)?.setOnClickListener {                newSarana()                bottomSheetDialog.dismiss()            }            bottomSheetView?.findViewById<View>(R.id.btnNewHazardMenu)?.setOnClickListener {                newHazardReport()                bottomSheetDialog.dismiss()            }            bottomSheetView?.findViewById<View>(R.id.btnNewCuti)?.setOnClickListener {                newPengajuanCuti()                bottomSheetDialog.dismiss()            }            bottomSheetView?.findViewById<View>(R.id.btnRunJob)?.setOnClickListener {                val componentName = ComponentName(this@NewIndexActivity,JobServices::class.java)                val jobInfo = JobInfo.Builder(2601,componentName)                    .setRequiresCharging(true)                    .setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY)                    .setPersisted(true)                    .setPeriodic(15 * 60 * 1000)                    .build()                val scheduler = this.getSystemService(JOB_SCHEDULER_SERVICE) as JobScheduler                val resultCode = scheduler.schedule(jobInfo)                if(resultCode == JobScheduler.RESULT_SUCCESS){                    Log.d("JobScheduler","Job Scheduled")                }else{                    Log.d("JobScheduler","Job Scheduled Failed")                }            }            bottomSheetView.findViewById<View>(R.id.btnStopSchedule)?.setOnClickListener {                val scheduler = this.getSystemService(JOB_SCHEDULER_SERVICE) as JobScheduler                    scheduler.cancel(2601)                Log.d("JobScheduler","Job Canceled")            }            bottomSheetView.findViewById<View>(R.id.btnSaving)?.setOnClickListener {                startStopService(HazardService::class.java)            }            bottomSheetDialog.setOnDismissListener {                fabIC.setColorFilter(ContextCompat.getColor(c, R.color.colorPrimaryDark), android.graphics.PorterDuff.Mode.SRC_IN)            }            if(ConfigUtil.cekKoneksi(this@NewIndexActivity)){                bottomSheetView.findViewById<View>(R.id.btnNewSarprasMenu)?.visibility = View.VISIBLE                bottomSheetView.findViewById<View>(R.id.btnNewCuti)?.visibility = View.VISIBLE            }else{                bottomSheetView.findViewById<View>(R.id.btnNewSarprasMenu)?.visibility = View.GONE                bottomSheetView.findViewById<View>(R.id.btnNewCuti)?.visibility = View.GONE            }            bottomSheetDialog.setContentView(bottomSheetView!!)            bottomSheetDialog.show()        }        btnFLMenuIndex.collapse()        if(v?.id==R.id.btnTotal){            var intent = Intent(c, RkbActivity::class.java)            intent.putExtra(RkbActivity.USERNAME, USERNAME)            intent.putExtra(RkbActivity.DEPARTMENT, DEPARTMENT)            intent.putExtra(RkbActivity.SECTON, SECTON)            intent.putExtra(RkbActivity.LEVEL, LEVEL)            var tbindex = 0 as Int            intent.putExtra(RkbActivity.Tab_INDEX, tbindex)            startActivity(intent)        }        if(v?.id==R.id.btnApprove){            var intent = Intent(c, RkbActivity::class.java)            intent.putExtra(RkbActivity.USERNAME, USERNAME)            intent.putExtra(RkbActivity.DEPARTMENT, DEPARTMENT)            intent.putExtra(RkbActivity.SECTON, SECTON)            intent.putExtra(RkbActivity.LEVEL, LEVEL)            var tbindex = 1 as Int            intent.putExtra(RkbActivity.Tab_INDEX, tbindex)            startActivity(intent)        }        if(v?.id==R.id.btnWaiting){            var intent = Intent(c, RkbActivity::class.java)            intent.putExtra(RkbActivity.USERNAME, USERNAME)            intent.putExtra(RkbActivity.DEPARTMENT, DEPARTMENT)            intent.putExtra(RkbActivity.SECTON, SECTON)            intent.putExtra(RkbActivity.LEVEL, LEVEL)            var tbindex = 2 as Int            intent.putExtra(RkbActivity.Tab_INDEX, tbindex)            startActivity(intent)        }        if(v?.id==R.id.btnCancel){            var intent = Intent(c, RkbActivity::class.java)            intent.putExtra(RkbActivity.USERNAME, USERNAME)            intent.putExtra(RkbActivity.DEPARTMENT, DEPARTMENT)            intent.putExtra(RkbActivity.SECTON, SECTON)            intent.putExtra(RkbActivity.LEVEL, LEVEL)            var tbindex = 3 as Int            intent.putExtra(RkbActivity.Tab_INDEX, tbindex)            startActivity(intent)        }        if(v?.id==R.id.btnClose){            var intent = Intent(c, RkbActivity::class.java)            intent.putExtra(RkbActivity.USERNAME, USERNAME)            intent.putExtra(RkbActivity.DEPARTMENT, DEPARTMENT)            intent.putExtra(RkbActivity.SECTON, SECTON)            intent.putExtra(RkbActivity.LEVEL, LEVEL)            var tbindex = 4 as Int            intent.putExtra(RkbActivity.Tab_INDEX, tbindex)            startActivity(intent)        }        if(v?.id==R.id.btnSarpras  || v!!.id==R.id.second_menu_item){            var intent = Intent(                c,                SarprasActivity::class.java            )            startActivity(intent)        }        if(v?.id==R.id.btnNewSarpras){            var intent = Intent(c, NewSarprasActivity::class.java)            startActivity(intent)        }        if(v?.id==R.id.btnSarprasApproveKabag){            var intent = Intent(c, KabagApprSarprasActivity::class.java)            startActivity(intent)        }        if(v?.id==R.id.btnOB){            var intent = Intent(c, ProductionActivity::class.java)            intent.putExtra(ProductionActivity.MONITORING, "OB")            startActivity(intent)        }        if(v?.id==R.id.btnHAULING){            var  intent = Intent(c, ProductionActivity::class.java)            intent.putExtra(ProductionActivity.MONITORING, "HAULING")            startActivity(intent)        }        if(v?.id==R.id.btnCRUSHING){            var  intent = Intent(c, ProductionActivity::class.java)            intent.putExtra(ProductionActivity.MONITORING, "CRUSHING")            startActivity(intent)        }        if(v?.id==R.id.btnBARGING){            var intent = Intent(c, ProductionActivity::class.java)            intent.putExtra(ProductionActivity.MONITORING, "BARGING")            startActivity(intent)        }        if(v?.id==R.id.btnSTOCKROOM){            var intent = Intent(c, StockActivity::class.java)            intent.putExtra(ProductionActivity.MONITORING, "ROOM")            startActivity(intent)        }        if(v?.id==R.id.btnSTOCKPRODUCT){            var intent = Intent(c, StockActivity::class.java)            intent.putExtra(ProductionActivity.MONITORING, "PRODUCT")            startActivity(intent)        }        if(v?.id==R.id.btnHazard|| v!!.id==R.id.first_menu_item){//            hazardReport()            first_menu_item.setColorFilter(ContextCompat.getColor(c, R.color.red_smooth), android.graphics.PorterDuff.Mode.SRC_IN)            userRule = RULE.split(",").toTypedArray()            var hseAdmin = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                Arrays.stream(userRule).anyMatch{ t -> t== "admin_hse"}            } else {                userRule?.contains("admin_hse")            }            if(hseAdmin!!) {                val list = arrayOf<String>("Hazard Report","Hazard Report Ke Saya","Seluruh Hazard Report")                showDialogOption(c,list)            }else{                val list = arrayOf<String>("Hazard Report","Hazard Report Ke Saya")                showDialogOption(c,list)            }        }        if(v!!.id==R.id.btnNewSarana){            newSarana()        }        if(v!!.id==R.id.btnNewHazard){            newHazardReport()        }        if(v?.id==R.id.content_frame){            btnFLMenuIndex.collapse()        }        if(v?.id==R.id.btnHazardALL){            var intent = Intent(c, ALLHazardReportActivity::class.java)            startActivity(intent)        }        if(v?.id==R.id.btnSarprasAll){            var intent = Intent(c, AllSarprasActivity::class.java)            startActivity(intent)        }        if(v?.id==R.id.btnInspection){            var intent = Intent(c, InspeksiActivity::class.java)            startActivity(intent)        }        if(v?.id==R.id.btnInspectionALL){            var intent = Intent(c, AllInspeksiActivity::class.java)            startActivity(intent)        }        if(v?.id==R.id.btnQRCODES){            var intent = Intent(c, BarcodeScannerActivity::class.java)            intent.putExtra("aktivitas", "addTeam")            startActivity(intent)        }        if(v?.id==R.id.cvBarcodeProfile || v!!.id==R.id.third_menu_item){            val intent = Intent(c, QRCodeActivity::class.java)            intent.putExtra("itemCodes", NIK)            intent.putExtra("judul", "QR-Code Anda")            startActivity(intent)        }        if(v?.id==R.id.btnMenuTop || v!!.id==R.id.fourth_menu_item){            profile(c)        }        if(v?.id==R.id.btnCutiOnline){            val intent = Intent(c,CutiOnlineActivity::class.java)            startActivityForResult(intent,Constants.CODE_CUTI_USER)        }        if(v?.id==R.id.btnRosterCuti){            val intent = Intent(c,RosterCutiActivity::class.java)            startActivityForResult(intent,Constants.CODE_CUTI_USER)        }        if(v?.id==R.id.btnCutiAllKaryawan){            val intent = Intent(c, CutiOnlineAllActivity::class.java)            startActivityForResult(intent,Constants.CODE_CUTI_USER)        }    }    private fun newPengajuanCuti() {        val intent = Intent(this@NewIndexActivity,FormCutiActivity::class.java)        startActivityForResult(intent,Constants.CODE_PENGAJUAN_CUTI)    }    fun showDialogOption(c:Context, title: Array<String>){        val alertDialog = AlertDialog.Builder(c)        alertDialog.setTitle("Silahkan Pilih")        alertDialog!!.setItems(title, DialogInterface.OnClickListener{ dialog, which ->            when (which) {                0 ->hazardReport(c,"hazard")                1 ->hazardReport(c,"hazard_saya")                2 ->hazardReport(c,"hazard_hse")            }        })        alertDialog.setOnDismissListener {            first_menu_item.setColorFilter(ContextCompat.getColor(c, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN)        }        alertDialog.create()        alertDialog.show()    }    private fun profile(c:Context){        mDialogView = LayoutInflater.from(c).inflate(R.layout.menu_option,null)        val nama = mDialogView?.findViewById<View>(R.id.mnNama) as TextView        val nik = mDialogView?.findViewById<View>(R.id.mnNik) as TextView        nama.text = NAMA_LENGKAP        nik.text = NIK        val mnFoto = mDialogView?.findViewById<View>(R.id.mnFoto) as ImageView        Glide.with(c).load(fotoURL).into(mnFoto)    val mBuilder = AlertDialog.Builder(c)        mBuilder.setView(mDialogView)        val dialog =mBuilder.show()        userRule = RULE.split(",").toTypedArray()        var apprSarpras = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {            Arrays.stream(userRule).anyMatch { t -> t == "master perusahaan" }        } else {            userRule?.contains("master perusahaan")        }        if (apprSarpras!!) {            mDialogView?.btnMasterPerusahaan!!.visibility = View.VISIBLE        }else{            mDialogView?.btnMasterPerusahaan!!.visibility = View.GONE        }        val administrator= if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {            Arrays.stream(userRule).anyMatch { t -> t == "administrator" }        } else {            userRule?.contains("administrator")        }        if (administrator!!) {            mDialogView?.btnListUser!!.visibility = View.VISIBLE        }else{            mDialogView?.btnListUser!!.visibility = View.GONE        }        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))        mDialogView?.btnListUser!!.setOnClickListener {            val intent = Intent(c,ListUserActivity::class.java)            intent.putExtra(ListUserActivity.DataExtra,"Index")            startActivity(intent)            dialog.dismiss()        }        mDialogView?.dialogDismis!!.setOnClickListener {            dialog.dismiss()        }        mDialogView?.btnChangePWD!!.setOnClickListener {            ConfigUtil.changePassword(c, USERNAME)            dialog.dismiss()        }        mDialogView?.btnKeluarApp!!.setOnClickListener{            logOut()            dialog.dismiss()        }        mDialogView?.btnUpdateData!!.setOnClickListener {            dialog.dismiss()        }        mDialogView?.btnUploadFoto!!.setOnClickListener {            uploadProfile()            dialog.dismiss()        }        mDialogView?.btnMasterPerusahaan!!.setOnClickListener {            ConfigUtil.masterPerusahaan(c)            dialog.dismiss()        }    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {        when (requestCode) {            requestCodeCameraPermission -> {                // If request is cancelled, the result arrays are empty.                if ((grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)) {                    // permission was granted, yay! Do the                    // contacts-related task you need to do.                    Toasty.info(this@NewIndexActivity, "PERMISSION_GRANTED", Toasty.LENGTH_SHORT)                        .show()                } else {                    // permission denied, boo! Disable the                    // functionality that depends on this permission.                    Toasty.info(this@NewIndexActivity, "PERMISSION_DENIED", Toasty.LENGTH_SHORT)                        .show()                }                return            }            // Add other 'when' lines to check for other            // permissions this app might request.            else -> {                // Ignore all other requests.                Toasty.info(this@NewIndexActivity, "PERMISSION_Ignore", Toasty.LENGTH_SHORT).show()            }        }        super.onRequestPermissionsResult(requestCode, permissions, grantResults)    }    //    On Resume    override fun onResume() {        loadHazardOffline()        reciever()        shimmerStart()        PrefsUtil.initInstance(this)//        Session        if(ConfigUtil.cekKoneksi(this@NewIndexActivity)){            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {                startStopService(FgTokenService::class.java)            }else{                bgTokenService.putExtra("username", USERNAME)                startService(bgTokenService)            }        }else{            shimmerLayout?.visibility = View.VISIBLE            rvTop.visibility= View.GONE            timer=object : CountDownTimer(3000, 1000) {                    override fun onTick(millisUntilFinished: Long) {                    }                    override fun onFinish() {                        Toasty.error(this@NewIndexActivity,"Tidak Ada Koneksi Internet! Anda dalam Mode Offline!").show()                        realmToken()                        lnSaranaPrasarana.visibility = View.GONE                        lnRKBsystem.visibility = View.GONE                        lnMonitoringProduksi.visibility = View.GONE                    }                }            timer?.start()        }        tipe =  intent.getStringExtra(TIPE)        if(tipe=="rkb"){            rkbNotif("0")            intent.putExtra(TIPE, "")        }else if(tipe=="sarpras"){            sarprasNotif()            intent.putExtra(TIPE, "")        }        firebase()        LocalBroadcastManager.getInstance(this).registerReceiver(tokenPassingReceiver!!, IntentFilter("com.misit.abpenergy"))        super.onResume()    }    private fun realmToken(){        GlobalScope.launch(Dispatchers.Main) {            var realm = Realm.getDefaultInstance()            realm.where(DataUserModel::class.java).equalTo("username", USERNAME).findFirst().let {                try {                    PrefsUtil.getInstance()                        .setStringState(                            PrefsUtil.TOTAL_HAZARD_USER,                            it?.dataHazard.toString()                        )                    if (it?.photo_profile != null) {                        PrefsUtil.getInstance().setBooleanState(PrefsUtil.PHOTO_PROFILE, true)                        Glide.with(this@NewIndexActivity).load(it?.photo_profile.toString()).into(fotoProfileA)                        fotoURL = it?.photo_profile                        PrefsUtil.getInstance()                            .setStringState(PrefsUtil.PHOTO_URL, it?.photo_profile)                    } else {                        PrefsUtil.getInstance()                            .setBooleanState(                                PrefsUtil.PHOTO_PROFILE,                                false                            )                        if(!PHOTO_PROFILE){                            uploadProfile()                        }                    }                    tvUserName.text = it?.nama_lengkap                    tvNIK.text = it?.nik.toString()                    tvDept.text = it?.dept                    tvSect.text = it?.sect                    rvCompany.text = it?.nama_perusahaan                    PrefsUtil.getInstance().setStringState("COMPANY_NAME",it?.nama_perusahaan)//                    Log.d("DataUserModel",it?.nama_lengkap)                    if(ConfigUtil.cekKoneksi(this@NewIndexActivity)){                    if (it?.perusahaan == 0) {                        lnSaranaPrasarana.visibility = View.VISIBLE                        lnRKBsystem.visibility = View.VISIBLE                        btnNewSarana.visibility = View.VISIBLE                    } else {                        lnSaranaPrasarana.visibility = View.GONE                        lnRKBsystem.visibility = View.GONE                        btnNewSarana.visibility = View.GONE                    }                    }                    Log.d("RULE",it?.rule.toString())                    userRule = it?.rule?.split(",")?.toTypedArray()                    var apprSarpras = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                        Arrays.stream(userRule).anyMatch { t -> t == "approve sarpras" }                    } else {                        userRule?.contains("approve sarpras")                    }                    if (apprSarpras!!) {                        btnSarprasApproveKabag.visibility = View.VISIBLE                    } else {                        btnSarprasApproveKabag.visibility = View.GONE                    }                    var security = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                        Arrays.stream(userRule).anyMatch { t -> t == "security" }                    } else {                        userRule?.contains("security")                    }                    if (security!!) {                        btnSarprasAll.visibility = View.VISIBLE                    } else {                        btnSarprasAll.visibility = View.GONE                    }                    var allHazard = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                        Arrays.stream(userRule).anyMatch { t -> t == "allHazard" }                    } else {                        userRule?.contains("allHazard")                    }                    if (allHazard!!) {                        btnHazardALL.visibility = View.VISIBLE                    } else {                        btnHazardALL.visibility = View.GONE                    }                    var allInspeksi = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                        Arrays.stream(userRule).anyMatch { t -> t == "allInspeksi" }                    } else {                        userRule?.contains("allInspeksi")                    }                    if (allInspeksi!!) {                        btnInspectionALL.visibility = View.VISIBLE                    } else {                        btnInspectionALL.visibility = View.GONE                    }                    tvHazardUser.text = it?.dataHazard.toString()                    tvInspeksiUser.text = it?.dataInspeksi.toString()                    shimmerStop()                }catch (e:RealmException){                    Log.d("RealmErro",e.toString())                }            }            realm.close()        }    }//On Resume    private fun shimmerStart(){        shimmerLayout?.visibility = View.VISIBLE        shimmerSarana.visibility = View.VISIBLE        shimmerProfileImage?.startShimmer()        shimmerHazardUser?.startShimmer()        shimmerHazardUser?.startShimmer()        shimmerInspeksiUser?.startShimmer()        shimmerUserName?.startShimmer()        shimmerNIK?.startShimmer()        shimmerView?.startShimmer()        shimmerView1?.startShimmer()        shimmerSection?.startShimmer()        shimmerCompany?.startShimmer()        rvTop.visibility= View.GONE        lnSaranaPrasarana.visibility = View.GONE        lnRKBsystem.visibility = View.GONE        lnMonitoringProduksi.visibility = View.GONE    }    private fun shimmerStop(){        shimmerLayout?.visibility = View.GONE        shimmerSarana.visibility = View.GONE        shimmerProfileImage?.stopShimmer()        shimmerHazardUser?.stopShimmer()        shimmerHazardUser?.stopShimmer()        shimmerInspeksiUser?.stopShimmer()        shimmerUserName?.stopShimmer()        shimmerNIK?.stopShimmer()        shimmerView?.stopShimmer()        shimmerView1?.stopShimmer()        shimmerSection?.stopShimmer()        shimmerCompany?.stopShimmer()        rvTop.visibility= View.VISIBLE        if (ConfigUtil.cekKoneksi(this@NewIndexActivity)){            lnSaranaPrasarana.visibility = View.VISIBLE            lnRKBsystem.visibility = View.VISIBLE            lnMonitoringProduksi.visibility = View.VISIBLE        }else{            lnSaranaPrasarana.visibility = View.GONE            lnRKBsystem.visibility = View.GONE            lnMonitoringProduksi.visibility = View.GONE        }    }    fun firebase(){        FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->            if (!task.isSuccessful) {                Log.w("FIREBASE", "Fetching FCM registration token failed", task.exception)                return@OnCompleteListener            }            // Get new FCM registration token            val token = task.result            // Log and toast            val msg = getString(R.string.msg_token_fmt, token)            Log.d("FIREBASE", msg)//            Toast.makeText(baseContext, msg, Toast.LENGTH_SHORT).show()        })    }    //    Sarpras Notif    private fun sarprasNotif(){        var intent = Intent(            this@NewIndexActivity,            SarprasActivity::class.java        )        intent.putExtra(RkbActivity.TIPE, "notif")        startActivity(intent)    }    //    Sarpras Notif//    NotifRkb    private fun rkbNotif(tabindex: String?){        var intent = Intent(this@NewIndexActivity, RkbActivity::class.java)        intent.putExtra(RkbActivity.USERNAME, USERNAME)        intent.putExtra(RkbActivity.DEPARTMENT, DEPARTMENT)        intent.putExtra(RkbActivity.SECTON, SECTON)        intent.putExtra(RkbActivity.LEVEL, LEVEL)        intent.putExtra(RkbActivity.Tab_INDEX, tabindex)        intent.putExtra(RkbActivity.TIPE, "notif")        startActivity(intent)    }//    NotifRkb    //    LogOut    private fun logOut() {        AlertDialog.Builder(this)            .setTitle("Confirmation")            .setPositiveButton("OK , Sign Out", { dialog,                                                  which ->                if (PrefsUtil.getInstance().getBooleanState(                        "IS_LOGGED_IN", true                    )                ) {                    PrefsUtil.getInstance().setBooleanState(                        "IS_LOGGED_IN", false                    )                    PrefsUtil.getInstance().setStringState(                        PrefsUtil.USER_NAME, null                    )                    val intent = Intent(this, LoginActivity::class.java)                    startActivity(intent)                    finish()                }            })            .setNegativeButton("Cancel",                { dialog,                  which ->                    dialog.dismiss()                })            .show()    }    //LogOut//    Companion    companion object{        var USERNAME = "username"        var DEPARTMENT="department"        var SECTON="section"        var LEVEL="level"        var Tab_INDEX ="tab_index"        var NAMA_LENGKAP = "nama_lengkap"        var NO_RKB = "NO_RKB"        var TIPE = null        var RULE = "RULE"        var NIK = "NIK"        var COMPANY = "COMPANY"        var PHOTO_PROFILE=false        var INTRO_APP=false    }//    Companion//    HazardRepord    fun hazardReport(c:Context,pilih:String) {        var intent:Intent?=null        when(pilih){            "hazard" -> {                intent = Intent(c, HazardReportActivity::class.java)                first_menu_item.setColorFilter(ContextCompat.getColor(c, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN)            }            "hazard_saya" -> {                intent = Intent(c, HazardSayaActivity::class.java)                first_menu_item.setColorFilter(ContextCompat.getColor(c, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN)            }            "hazard_hse" -> {                intent = Intent(c, HazardHSEActivity::class.java)                first_menu_item.setColorFilter(ContextCompat.getColor(c, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN)            }        }        startActivity(intent)    }    //    onActivityResult    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if(resultCode== Activity.RESULT_OK && requestCode==101){            var intent = Intent(this@NewIndexActivity,HazardReportActivity::class.java)            startActivity(intent)        }        super.onActivityResult(requestCode, resultCode, data)    }    //    onActivityResult    fun newSarana(){        btnFLMenuIndex.collapse()        var intent = Intent(this@NewIndexActivity, NewSarprasActivity::class.java)        startActivityForResult(intent, 102)    }    fun newHazardReport() {        btnFLMenuIndex.collapse()        var intent = Intent(this@NewIndexActivity, NewHazardActivity::class.java)        startActivityForResult(intent, 101)    }    private fun loadHazardOffline(){        GlobalScope.launch(Dispatchers.IO) {            val hazardHeader = HazardHeaderDataSource(this@NewIndexActivity)            try {                val hazardRow = hazardHeader.getAll()                hazardRow.forEach {                    val detail = HazardDetailDataSource(this@NewIndexActivity)                    val detailFirst = detail.getItem(it.idHazard.toString())                    Log.d("HazardReport",it.deskripsi.toString())                    if(detailFirst!=null){                        val validation = HazardValidationDataSource(this@NewIndexActivity)                        val validationFirst = validation.getItem(it.idHazard.toString())                        Log.d("HazardReport",detailFirst.fotoPJ.toString())                        if(validationFirst!=null){                            Log.d("HazardReport",validationFirst.idValidation.toString())                        }                    }                }            }catch (e: SQLException){                Log.d("HazardReport",e.toString())            }        }    }}