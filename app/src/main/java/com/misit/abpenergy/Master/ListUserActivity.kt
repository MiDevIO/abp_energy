package com.misit.abpenergy.Masterimport android.app.Activityimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.util.Logimport android.view.Menuimport android.view.MenuItemimport android.view.Windowimport android.view.WindowManagerimport androidx.appcompat.widget.SearchViewimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport androidx.swiperefreshlayout.widget.SwipeRefreshLayoutimport com.misit.abpenergy.Api.ApiClientimport com.misit.abpenergy.Api.ApiEndPointTwoimport com.misit.abpenergy.Master.Adapter.ListUserAdapterimport com.misit.abpenergy.Master.Response.ListUsersResponseimport com.misit.abpenergy.Master.Response.UserItemimport com.misit.abpenergy.Rimport es.dmoral.toasty.Toastyimport kotlinx.android.synthetic.main.activity_list_user.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.util.*import kotlin.collections.ArrayListclass ListUserActivity : AppCompatActivity(),ListUserAdapter.OnItemClickListener {    private var adapter: ListUserAdapter? = null    private var userList:MutableList<UserItem>?=null    private var userPick:String?=null    private var page:Int=1    private var call: Call<ListUsersResponse>?=null    private var visibleItem : Int=0    private var total : Int=0    private var pastVisibleItem : Int=0    lateinit var swipeRefreshLayout: SwipeRefreshLayout    private var loading : Boolean=false    private var search:String?=""    var curentPosition: Int=0    var dataIntent:String?=null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_list_user)        title="List User"        userPick = ""        val window: Window = this.window        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)        window.statusBarColor = ContextCompat.getColor(this, R.color.colorPrimary)        userList = ArrayList()        userPick = intent.getStringExtra("userPick")        dataIntent = intent.getStringExtra(DataExtra)        var actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        adapter = ListUserAdapter(            this,            userPick,            userList!!        )        val linearLayoutManager = LinearLayoutManager(this@ListUserActivity)        rvListUser?.layoutManager = linearLayoutManager        rvListUser.adapter =adapter        adapter?.setListener(this)        swipeRefreshLayout = findViewById(R.id.pullRefreshUser)        swipeRefreshLayout.setOnRefreshListener(object :SwipeRefreshLayout.OnRefreshListener{            override fun onRefresh() {                rvListUser.adapter = adapter                page=1                userList?.clear()                loadData(search,page)//                swipeRefreshLayout.isRefreshing=false                //PopupUtil.dismissDialog()            }        })        loadData(search,page)    }    private fun loadData(cari:String?,hal:Int) {        val apiEndPoint = ApiClient.getClient(this@ListUserActivity)!!.create(ApiEndPointTwo::class.java)        call = apiEndPoint.getUsersList(cari,hal)        call?.enqueue(object : Callback<ListUsersResponse?> {            override fun onFailure(call: Call<ListUsersResponse?>, t: Throwable) {                Toasty.error(this@ListUserActivity,"Error : "+ t).show()            }            override fun onResponse(                call: Call<ListUsersResponse?>,                response: Response<ListUsersResponse?>            ) {                var r= response.body()                if(r!=null){                    Log.d("response",r.toString())                    if(r!=null){                        if(r.listUser!=null){                            loading=true                            if(userList?.size==0) {                                userList?.addAll(r.listUser?.data!!)                                swipeRefreshLayout.isRefreshing=false                            }else{                                curentPosition = (rvListUser.layoutManager as LinearLayoutManager).findLastVisibleItemPosition()                                userList?.addAll(r.listUser?.data!!)                                swipeRefreshLayout.isRefreshing=false                            }                        }                        adapter?.notifyDataSetChanged()                        rvListUser.addOnScrollListener(object : RecyclerView.OnScrollListener(){                            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {                                if (dy > 0) {                                    visibleItem = recyclerView.layoutManager!!.childCount                                    total = recyclerView.layoutManager!!.itemCount                                    pastVisibleItem =                                        (recyclerView.layoutManager as LinearLayoutManager).findFirstVisibleItemPosition()                                    if (loading) {                                        if ((visibleItem + pastVisibleItem) >= total) {                                            loading = false                                            page++                                            loadData(search,page)                                        }                                    }                                }                            }                            override fun onScrollStateChanged(                                recyclerView: RecyclerView,                                newState: Int                            ) {                                super.onScrollStateChanged(recyclerView, newState)                            }                        })                    }                }            }        })    }    override fun onCreateOptionsMenu(menu: Menu?): Boolean {        menuInflater.inflate(R.menu.menu_cari,menu)        val menuItem = menu!!.findItem(R.id.searchUser)        val searchView = menuItem.actionView as SearchView        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener{            override fun onQueryTextSubmit(query: String?): Boolean {                return true            }            override fun onQueryTextChange(newText: String?): Boolean {                userList?.clear()                search=newText                loadData(newText,1)                adapter?.notifyDataSetChanged()                return true            }        })        return super.onCreateOptionsMenu(menu)    }    override fun onOptionsItemSelected(item: MenuItem): Boolean {        return super.onOptionsItemSelected(item)    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return super.onSupportNavigateUp()    }    override fun onItemClick(id_user: Int, nama: String, nik: String, profileIMG: String?) {        if(dataIntent=="Hazard"){            val intent = Intent()            intent.putExtra("nama",nama)            intent.putExtra("nik",nik)            intent.putExtra("profileIMG",profileIMG)            intent.putExtra(userPick,id_user.toString())            setResult(Activity.RESULT_OK,intent)            finish()        }    }    companion object{        var DataExtra = "DataExtra"    }}